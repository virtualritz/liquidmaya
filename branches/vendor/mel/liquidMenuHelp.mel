//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:  June 5, 2000
//
//
//  Description:
//      Liquids main menu help interface.
//
//  Input Arguments:
//
//  Returns:
//

global proc liquidMenuHelp()
{
    string $gliquidLocation = "/usr/home/canuck/Dev/Liquid";
    string $browserCmd = "netscape ";
    string $helpURL = "index.html";

    global string $gHelpBrowserWinID = "";
    global int    $gUseHelpBrowserWin = false;
    global int    $gRaiseHelpBrowserWin;

    $helpURL = ( $gliquidLocation + "/html/" + $helpURL );

    //NT we want to execute the URL and let windows
    //locate the default browser for us.
    if (`about -nt`) {
		string $upperURL = toupper($helpURL);
		if (!gmatch($upperURL, "HTTP:*")) {
			$helpURL = unconvert($helpURL);		 // Only convert if using the file system.
		}

		$helpURL = "load " + $helpURL;  // load is keyword for our custom popen to use ShellExecute
		waitCursor -state on;
		$browserCmd = system($helpURL);  // NT only
		waitCursor -state off;
    } else {

	//
	//  Build netscape cmd string
	//
	if ("" != system("ps -u `whoami` | grep netscape")) {   // GG: not executed on NT
		//
		//  Running copy of browser found.
		//
		if ("" != $gHelpBrowserWinID) {
			//
			//  Already have a X window id.  Check that it is still valid.
			//
			$resStr = system(("xwininfo -id "+$gHelpBrowserWinID));  // GG: not executed on NT
			if ("" == $resStr) {
				//
				//  X id is no good.  Window has been closed.
				//
				$gHelpBrowserWinID = "";
			}
		}

		if ($gUseHelpBrowserWin && $gHelpBrowserWinID == "") {
			//
			//  Find an existing browser window.
			//
			waitCursor -state on;
			findBrowserWin;
			waitCursor -state off;
		}


		if ("" != $gHelpBrowserWinID) {
			//
			//  Specify which window we want to use.
			//
			$browserCmd += ("-id " + $gHelpBrowserWinID + " ");
		}

		//
		//  Add 'raise' window option.
		//
		if ($gRaiseHelpBrowserWin && "" != $gHelpBrowserWinID) {
			$browserCmd += "-raise ";
		} else {
			$browserCmd += "-noraise ";
		}

		//
		//  Specify the URL, and whether we want a new window.
		//
		$browserCmd += ("-remote 'openURL(" + $helpURL);
		if (!$gUseHelpBrowserWin && "" == $gHelpBrowserWinID) {
			$browserCmd += ",new-window)'";
		} else {
			$browserCmd += ")'&";
		}

	} else {
		//
		//  Open a new version of the browser.  Need to use a shell script
		//  so that it won't block.
		//
		$gHelpBrowserWinID = "";
		$browserCmd = ("launchNetscapeHelp "+ $helpURL);
	}

	//
	//  Run the shell cmd to start or communicate with the browser..
	//
	waitCursor -state on;
	system($browserCmd);      // GG: not executed on NT
	waitCursor -state off;

	if ("" == $gHelpBrowserWinID) {
		//
		//  Remember the window id for next time.
		//
		findBrowserWin;
	}

	}//NT end exist

}

global proc findBrowserWin() {
//
//  Description:
//		Find a browser window of the correct type.  
//
//

	global string $gHelpBrowserWinID = "";
	global int    $gUseHelpBrowserWin = false;

	string $cmdStr;
	string $resStr;
	string $resStrs[];
	int $nArr;
	int $notDone = true;
	int $i;

	//
	//  Generate a list of browser windows.
	//
	waitCursor -state on;

	$cmdStr = "xlswins | grep 'Netscape:'";
	$resStr = system($cmdStr);
	tokenize $resStr "\n" $resStrs;

	if (1 == size($resStrs) && "" == $resStrs[0]) {
		//
		//  Netscape window isn't up yet. Check again.
		//
		for ($i = 0; $i < 5; $i++) {
			$resStr = system($cmdStr);
			tokenize $resStr "\n" $resStrs;
			
			if ("" != $resStrs[0]) {
				$gUseHelpBrowserWin = true;
				break;
			}
		}
	} else {
		$gUseHelpBrowserWin = true;
	}

	//
	//  Test the windows to make sure that we have a browser window,
	//  not a news, or mail window.
	//
	//  If we are looking for an existing window start at the beginning
	//  of the list.  If we are looking for a new window start at the 
	//  end of the list.
	//
	$nArr = size ($resStrs);
	$i = $gUseHelpBrowserWin ? 0 : $nArr - 1;
	while ($notDone) {
		if ($i >= 0 && $i < $nArr) {
			//
			//  Extract X window id
			//
			if ($gUseHelpBrowserWin) {
				$gHelpBrowserWinID = match("0x[0-9a-f]*", $resStrs[$i++]);
			} else {
				$gHelpBrowserWinID = match("0x[0-9a-f]*", $resStrs[$i--]);
			}
				
			if ($gHelpBrowserWinID != "") {
				//
				//  Test for a browser window.
				//
				$resStr = system(("xprop -id "+ $gHelpBrowserWinID + 
								  " | grep WM_CLASS | grep Navigator"));

				if ("" != $resStr) {
					$notDone = false;
				}
			}
		} else {
			$notDone = false;
		}
	}

	waitCursor -state off;
}

print "Initialized Liquid Help Interface...\n";
