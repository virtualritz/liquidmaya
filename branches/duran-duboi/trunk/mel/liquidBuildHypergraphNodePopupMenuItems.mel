// Copyright (C) 1997-2004 Alias Systems Corp.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
//
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//
//
//
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//
//
//  Alias Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  Date
//
// Description:
//
//		description
//

source clipMenuCommands.mel;

//---------------------------------------------------------------------------
// The procedure which builds the menu
//
global proc buildHypergraphNodePopupMenuItems(
	string $hypershade,
	string $node)
{
	//
	// Description:
	//	This procedure is called when the user RMB clicks on a node in a scene
	//	or graph tab hypershade editor.
	//	This procedure builds the menu items which will appear in the popup
	//	menu.
	//	The popup menu this procedure generates can vary depending on the
	//	type of the node under the cursor.
	//


	string $nodeType = `nodeType $node`;

	// Node name, displayed without the path.
	//
	string $nodeName = match("[^|]*$", $node) + "...";

	menuItem
		-label $nodeName
		-command
			("hyperGraph -e -attributeEditor single -useFeedbackList "
				+ $hypershade);

	menuItem -divider true;
	menuItem -divider true;
	menuItem -divider true;

	if ($nodeType == "place3dTexture")
	{
		menuItem
			-label "Fit to Group Bounding Box"
			-command ("source AEplace3dTextureTemplate.mel; " +
					  "PSfitPlacementToGroup " + $node);

		string $selection[] = `ls -sl`;

		if (size($selection) > 0)
		{
			string $leadSelectionItem = $selection[0];
			menuItem
				-label
					("Parent Placement to Selection ("
						+ $leadSelectionItem
						+ ")")
				-command ("parent " + $node + " " + $leadSelectionItem);
		}
		else
		{
			menuItem
				-label "Parent Placement to Selection"
				-enable false;
		}
		menuItem -divider true;
	}
	else if (isClassified($node, "shader"))
	{
		// mental ray material shaders fall into this category.

		string $shadingGroupArray[] =
			`listConnections
				-source false
				-destination true
				-type "shadingEngine"
				$node`;
		int $isOceanShader = nodeType( $node ) == "oceanShader";
		int $groupSize = size($shadingGroupArray);
		if( $groupSize == 2 && $isOceanShader){
			// OceanShaders are assigned twice to the same group:
			// once for displacement and once for surfaceShading.
			// Thus we get two identical groups, while we wish to display
			// just one.
			if( $shadingGroupArray[0] == $shadingGroupArray[1] ){
				$groupSize = 1; // force use of "assign material"
			}
		}

		string $layer = currentRenderLayerLabel();
		if ($layer != "" && $layer != "masterLayer") {
			menuItem
				-radialPosition "W"
				-label ("Assign Material Override for "+$layer)
				-command ("hookShaderOverride(\""+$layer+"\",\"\",\""+$node+"\")");
		}

		if ( $groupSize <= 1)
		{
			if( $isOceanShader )
			{
				menuItem
					-radialPosition "N"
					-label "Assign Material To Selection"
					-command ("assignOceanShader " + $node);
			}
      else if ( isClassified($node, "liq*Swatch" ) )
      {
        menuItem
					-radialPosition "N"
					-label "Assign Shader To Selection"
					-command ("liquidAssignShaderToSelected " + $node);
      }
			else
			{
				menuItem
					-radialPosition "N"
					-label "Assign Material To Selection"
					-command ("hyperShade -assign " + $node);
			}
      if ( nodeType($node) == "liquidLight" )
      {
        menuItem
				-radialPosition "E"
				-label "Select Lights With Light Shader"
				-command ("liquidSelectAssignedToLightShader " + $node);
      }
      else
      {
			menuItem
				-radialPosition "E"
				-label "Select Objects With Material"
				//-command ("hyperShade -objects " + $node);
        // philippe: this is a workaround as maya selects the shapes connected to the shading group
        // and as such yields confusing results on instanced geometry.
        // we select the transforms instead.
				-command ("liquidSelectShaderAssignedTo " + $node);
      }

			menuItem
				-label "Frame Objects With Material"
				-command
					("hyperShade -objects "
						+ $node
						+ ";fitAllPanels -selected");
			menuItem -divider true;
		}
		else
		{
			int $i;

			for ($i = 0; $i < size($shadingGroupArray); $i++)
			{
				menuItem
					-radialPosition "N"
					-label ("Assign "+ $shadingGroupArray[$i] +" To Selection")
					-command ("hyperShade -assign " + $shadingGroupArray[$i]);
			}

			for ($i = 0; $i < size($shadingGroupArray); $i++)
			{
				menuItem
					-label ("Select Objects in " + $shadingGroupArray[$i])
					-radialPosition "E"
					-command ("hyperShade -objects " + $shadingGroupArray[$i]);
				menuItem
					-label ("Frame Objects in " + $shadingGroupArray[$i])
					-command
						("hyperShade -objects "
							+ $shadingGroupArray[$i]
							+ ";fitAllPanels -selected");
			}
			menuItem -divider true;
		}
	}
	// mental ray light shaders
	// They are shaders, not light.
	// So RMB menu for light : "Make Links with Selected Objects", "Break Links with Selected Objects"
	// should not and cannot be supported.
	// Because they satisfy isClassified($node, "light")
	// we need a separate block here,
	// which should come before "light"
	else if (isClassified($node, "rendernode/mentalray/light") &&
			!isClassified($node, "rendernode/mentalray/lightmap") )
	{
		// We can support "Select Objects Illuminated by Light" and
		// "Frame Objects Illuminated by Light"
		// by following a light connected to this shader node.

		string $lightArray[] =
			`listConnections
				-source false
				-destination true
				-type "light"
				$node`;
		int $groupSize = size($lightArray);
		int $i;

		for ($i = 0; $i < $groupSize; $i++)
		{
			menuItem
				-radialPosition "E"
				-label ( "Select Objects Illuminated by " + $lightArray[$i] )
				-command ("selectObjectsIlluminatedBy "+$lightArray[$i]);
			menuItem
				-label ( "Frame Objects Illuminated by " + $lightArray[$i] )
				-command ("selectObjectsIlluminatedBy "+$lightArray[$i] + "; fitAllPanels -selected");
		}
		menuItem -divider true;

	}
	// mental ray texture shaders
	// Handled only if the shader has "outValue" attribute,
	// because otherwise it's not clear what to do.
	else if (isClassified($node, "rendernode/mentalray/texture") )
	{
		string $tmp[] = `ls ($node + ".outValue")`;
		if( size($tmp)>0 )
		{
			menuItem
				-label "Assign Texture's Material to Selection"
				-radialPosition "N"
				-command
					("hypergraphAssignTextureToSelection  " + $node);
		}
	}
	// Other mental ray shaders
	// We need an empty block here
	// to prevent them from falling into wrong categories
	else if (isClassified($node, "rendernode/mentalray") )
	{
	}
	else if (isClassified($node, "texture"))
	{
		menuItem
			-label "Assign Texture's Material to Selection"
			-radialPosition "N"
			-command
				("hypergraphAssignTextureToSelection  " + $node);

		menuItem
			-label "Test Texture"
			-command ("select -replace " +
				`hyperGraph -query -feedbackNode $hypershade` +
				";TestTexture;")
			-radialPosition "W"
			-annotation (getRunTimeCommandAnnotation ("TestTexture"))
			;

		if( (nodeType ($node)) == "psdFileTex" ) {
			menuItem
				-label "Convert To Layered Texture"
				-command
					("hypergraphConvertPsdToLTNetwork  " + $node)
				-radialPosition "SW"
				-annotation ("Convert To Layered Texture: Converts Psd file texture to layered texture network")
				;

			menuItem
				-label "Convert To File Texture"
				-command
					("hypergraphConvertPsdToFile  " + $node)
				-radialPosition "NW"
				-annotation ("Convert To File Texture: Converts Psd file texture to file  texture")
				;
		}

		menuItem
			-label "Render Texture Range"
			-command ("select -replace " +
				`hyperGraph -query -feedbackNode $hypershade` +
				";RenderTextureRange;")
			-radialPosition "E"
			-annotation (getRunTimeCommandAnnotation ("RenderTextureRange"))
			;

		if( ((nodeType ($node)) == "psdFileTex" ) ||((nodeType ($node)) == "file" )) {
		menuItem
			-label "Edit Texture"
			-command ("hyperShadeEditTexture " + $node)
			-radialPosition "SE"
			-annotation (getRunTimeCommandAnnotation ("EditTexture"))
			;
		}

		if ($nodeType == "file")
		{
			menuItem
				-label "Reload Image File"
				-command
					("string $name=`getAttr "
						+ $node
						+ ".fileTextureName`;"
						+ "setAttr "
						+ $node
						+ ".fileTextureName "
						+ "-type \"string\" $name;");
			menuItem -divider true;
		}
	}
	else if (isClassified($node, "utility"))
	{
		// test to make sure the utility node has an output connection
		// if it does not, convertSolidTx will fail
		//

    if ( $nodeType == "liquidRibBox" ) {
      menuItem
        -label "Assign RIB Box to Selection"
        -radialPosition "N"
        -command
        ("liquidAssignRibboxToSelected " + $node);
      menuItem
        -label "Select Assigned Objects"
        -radialPosition "E"
        -command
        ("liquidSelectAssignedToRibbox " + $node);

    } else {
      // a utility node will always be connected to defaultRenderUtilityList
      // so we want to make sure it has more than 1 connection
      string $connections[] = `listConnections -s 0 -d 1 $node`;
      if (`size ($connections)` > 1){

        menuItem
          -label "Assign Texture's Material to Selection"
          -radialPosition "N"
          -command
          ("hypergraphAssignTextureToSelection  " + $node);

        menuItem
          -label "Test Texture"
          -command ("select -replace " +
          `hyperGraph -query -feedbackNode $hypershade` +
          ";TestTexture;")
          -radialPosition "W"
          -annotation (getRunTimeCommandAnnotation ("TestTexture"))
          ;

        menuItem
          -label "Render Texture Range"
          -command ("select -replace " +
          `hyperGraph -query -feedbackNode $hypershade` +
          ";RenderTextureRange;")
          -radialPosition "E"
          -annotation (getRunTimeCommandAnnotation ("RenderTextureRange"))
          ;
      }
    }
	}
	else if (isClassified($node, "light"))
    {
        menuItem
            -label "Make Links with Selected Objects"
            -command ("lightlink -make -light "+$node+" -useActiveObjects");

        menuItem
            -label "Break Links with Selected Objects"
            -command ("lightlink -break -light "+$node+" -useActiveObjects");

        menuItem -divider true;

        menuItem
            -label "Select Objects Illuminated by Light"
			-radialPosition "E"
            -command ("selectObjectsIlluminatedBy "+$node);

        menuItem
            -label "Frame Objects Illuminated by Light"
            -command ("selectObjectsIlluminatedBy "+$node+"; fitAllPanels -selected");

		menuItem -divider true;
    }
	else if ($nodeType == "textureBakeSet" || $nodeType == "vertexBakeSet" )
	{
		menuItem
			-label "Assign Selection To Bake Set"
			-radialPosition "N"
			-command ("sets -forceElement " + $node + " `ls -dag -objectsOnly -geometry -selection`" );
		menuItem
			-label "Select Objects In Bake Set"
			-radialPosition "E"
			-command ("select " + $node);
		menuItem
			-label "Frame Objects In Bake Set"
			-command
				("select " + $node + " ;fitAllPanels -selected");

		menuItem -divider true;
	}
	else if ($nodeType == "animClip")
	{
		menuItem
			-label "Copy"
			-annotation "Copy Clip (to be pasted in TraX Window)"
			-command ("clipCopyMenuCommand " + $node)
			ClipCopyItem;
		menuItem
			-label "Instance"
			-annotation "Instance Clip at Current Time"
			-command ("clipInstanceMenuCommand " + $node)
			ClipInstanceItem;
		menuItem
			-label "Duplicate"
			-annotation "Duplicate Clip"
			-command ("clipDuplicateMenuCommand " + $node)
			ClipDuplicateItem;
		menuItem
			-label "Export"
			-annotation "Export Clip"
			-command ("doExportClipArgList 2 { \"\", \"" + $node + "\"}")
			ClipExportItem;
		menuItem -divider true;
		menuItem
			-label "Apply Pose"
			-annotation "Move Character to Saved Pose or Clip Start"
			-command ("clipApplyPoseMenuCommand " + $node)
			ClipApplyPoseItem;
		menuItem -divider true;
	}
	menuItem
		-label "Select Input Nodes"
		-command ("select -noExpand `listHistory " + $node + "`")
		-annotation "Select all nodes input to this node";
	menuItem
		-label "Select Output Nodes"
		-command
			("select -noExpand `listHistory -future true "
				+ $node
				+ "`")
		-annotation "Select all nodes output from this node";

	menuItem -divider true;

	menuItem
		-label "Rename"
		-command
			("hyperGraph -e -rename -useFeedbackList " + $hypershade);
}
