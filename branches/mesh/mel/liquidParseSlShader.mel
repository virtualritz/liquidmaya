//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar

//
//  Creation Date:    Jan 03, 2003
//
//  Procedure Name:
//	liquidParseSlShader
//
//  Description:
//	Read a SL compiled shader  and return its type and fill an array with args
//  	Return 0 if something is wrong
//
global proc int liquidParseEndStrForVal( string $endStr, int $argType, string $vals[] )
{
  if( $argType == 1  ) // single float
  {
    string $tmpStr2 = `match "\\-*[0-9]*\\.*[0-9]+$" $endStr`; // Search for <float> at end of line
    if( $tmpStr2 == "" )	// No match
      return 0;
    $vals[0] = $tmpStr2;
    return 1;
  }
  else if( $argType == 6 ) // string value
  {
    string $tmpStr2 = `match "\".*\"$" $endStr`; // Search for a string at end of line
    if( $tmpStr2 == "" )	// No match
      return 0;
    $vals[0] = $tmpStr2;
      return 1;
  }
  else if( $argType == 2 ||	// point | vector | normal | color
            $argType == 3 ||	// three float value enclosed with []
            $argType == 4 ||
            $argType == 5 )
  {
    string $tmpStr2 = `match "\\[-*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+\\]$" $endStr`; // Search for [<float> <float> <float>]
    if( $tmpStr2 == "" )	// No match
      return 0;
    string $buffer[];
    int $numTokens = `tokenize $tmpStr2 "[] " $buffer`;
    if( $numTokens != 3 ) return 0;
    else
    {
      $vals[0] = $buffer[0];
      $vals[1] = $buffer[1];
      $vals[2] = $buffer[2];
      return 3;
    }
  }
  else if( $argType == 7 ) // Matrix
  {
    string $tmpStr2 = `match "\\[ *-*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ *\\]$" $endStr`; // Search for [<float> <float> <float> ....]
    if( $tmpStr2 == "" )	// No match
    {
      // May be a multi lines matrix
      $tmpStr2 = `match "\\[*-*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+ -*[0-9]*\\.*[0-9]+\\]*$" $endStr`;
      if( $tmpStr2 == "" )
          return 0;
      string $buffer[];
      int $numTokens = `tokenize $tmpStr2 "[] " $buffer`;
      if( $numTokens != 4 ) return 0;
      else
      {
        int $i =0;
        for( $i = 0; $i < 4; $i++ )
        {
                $vals[$i] = $buffer[$i];
        }
        return 4;
      }
    }
    else
    {
        string $buffer[];
        int $numTokens = `tokenize $tmpStr2 "[] " $buffer`;
        if( $numTokens != 16 )
        {
        return 0;
        }
        else
        {
        int $i =0;
        for( $i = 0; $i < 16; $i++ )
        {
                $vals[$i] = $buffer[$i];
        }
            return 16;
        }
    }
  }
    return 0;
}

/*
    Check we got all default values we needed for latest arg.
    Fix things if possible and return a fixed number of default values.
    Return -1 if an unrecoverable error happened
*/

global proc int liquidCheckDefaultVals( string $argName, int $argType, int $argArraySize, int $nbFound, string $defaultValues[], int $numDefaultValues )
{
    // Check if we got all default we needed for previous arg ( if any )
    int $shouldHaveFound = 0;
    if( $argType == 1 || $argType == 6 ) $shouldHaveFound = 1;
    else if( $argType > 1 && $argType < 6 ) $shouldHaveFound = 3;
    else if( $argType == 7 ) $shouldHaveFound = 16;
    if( $argArraySize ) $shouldHaveFound *= $argArraySize;
    if( $shouldHaveFound != $nbFound )
    {
    print( "Warning : found " + $nbFound + " default values instead of " + $shouldHaveFound +  " expected for " + $argName + "\n" );
    int $diff = $shouldHaveFound - $nbFound;
    // For arrays, some tellers may not output all default values
    // If found to many values, or not an array certainely an unrecoverable parsing error
    if( $diff < 0 || $argArraySize < 1 )
    {
        return -1;
    }
    // Add missing default values
    string $defaultVal = "0.0";
    if( $argType == 6 ) $defaultVal = "arghhh";
    for( $i = 0; $i < $diff; $i++, $numDefaultValues++ )
    {
        $defaultValues[$numDefaultValues] = $defaultVal;
    }
    }
/*
    else
    {
    print ( $shouldHaveFound + " vs " + $nbFound  +"\n" );
    }
*/
    return $numDefaultValues;
}

global proc int liquidParseSlShader ( string $shaderNode, string $fileName )
{
    global string $liqShaderTypes[];
    global string $liqShaderArgTypes[];
    global string $liqRenderers[];

    $liqShaderTypes =
                    {
                "unknown",
                "shader",
                "surface",
                "displacement",
                "volume",
                "light"
                    };
    $liqShaderArgTypes =
                    {
                "unknown",
                "float",
                "point",
                "normal",
                "vector",
                "color",
                "string",
                "shader",
                "matrix"
                    };

    $liqRenderers =
                    {
                // Name     Extension	    Teller
                "unknown",  "",     "",
                "prman",    "slo",  "sloinfo",
                "entropy",  "sle",  "sletell",
                "bmrt",     "slc",  "slctell",
                "air",      "slb",  "slbtell",
                "aqsis",    "slx",  "aqsltell",
                "3delight", "sdl",  "shaderinfo",
                "rndr",	    "sdr",  "sdrinfo"
            };

    // Find extension
    string $buffer[];
    int $shaderType = 0;
    int $numTokens = `tokenize $fileName "." $buffer`;
    int $i;
    string $defaultValues[];
    int $numDefaultValues = 0;
    // May be should we check if file exists ?
    if( $numTokens > 1 ) // Need at least one .
    {
        string $extension = $buffer[ $numTokens -1];
    // Set command to use to parse this shader
    if( $extension == "sl" )    // Shader source
    {
            print( "Error : do not know how to source shader " + $fileName + "\n" );
        return 0;
    }
    else
    {
            int $renderer = 0;
        string $teller = "";
        for( $i = 3; $renderer == 0 && $i < size( $liqRenderers ) ; $i += 3 )
        {
            if( $extension == $liqRenderers[ $i + 1 ] )
            $renderer = $i;
        }
            if( ! $renderer )
        {
            print( "Error : do not know how to handle compiled shader " + $fileName + "\n" );
        return 0;
        }
        $teller = $liqRenderers[ $renderer + 2 ];
            // print( $extension + " shader " + $teller + "\n" );
        string $command = ($teller + " " + $fileName);
        //$command = "cat /rd/steph/liquidmaya/sloinfo_output.txt";
        int $pipe = popen( $command, "r" );
        if( $pipe == 0 )
        {
            print( "Error : can not run " + $command + " trough pipe\n");
        return 0;
        }
        string $line;
        // Parse first lines to find shader type and name
        while( $shaderType == 0 && !feof( $pipe ) )
        {
        $line = fgetline( $pipe );
            $numTokens = `tokenize $line " " $buffer`;
        if( $numTokens > 1 )    // Should retrieve <type> <shader name>
        {
                for( $i = 1; $shaderType == 0 && $i < size( $liqShaderTypes ); $i++ )
            {
            if( $buffer[0] == $liqShaderTypes[$i] ) $shaderType = $i;
            }
        }
        }
        if( $shaderType == 0 )
        {
            print( "Error : could not determine shader type for " + $fileName + "\n" );
        return 0;
        }
        print( $liqShaderTypes[ $shaderType ] + " shader\n" );
        // Now parse args
            int $numArgs = 0;
        string $tmpStr;
        string $argNames[];
        int $argTypes[];
        int $argArraySize[];
        string $argDetailTypes[];
        int $argType;
        int $nbElt;
        int $nbDefaultFound;
            // Parse output
        while( !feof( $pipe ) )
        {
            $line = fgetline( $pipe );
        $line = `substitute "\n$" $line ""`;	// Remove new line character ( does this work for windows ? )

        if( $line != "" && $line != "\n" )
        {
            $tmpStr = `substitute "^[ \t]*Default value[s]*:[ \t]*" $line ""`;
            if( $tmpStr != $line )  // Default value line
            {
                if( $tmpStr != "" )
            {
                if( $numArgs < 1 )
                {
                print( "Error : found default value but got no args\n");
                pclose( $pipe );
                return 0;
                }
                int $curArg = $numArgs -1;
                if( $argArraySize[$curArg] ) // Array arg
                {
                string $tmpStr2 = `match "\\[.+\\]$" $tmpStr`; // Search for [<something>]
                if( $tmpStr2 != "" )
                {
                        $numTokens = `tokenize $tmpStr2 "[] " $buffer`;
                    for( $i = 0; $i < $numTokens; $i++, $numDefaultValues++ )
                    {
                    $defaultValues[$numDefaultValues] = $buffer[$i];
                    $nbDefaultFound++;
                    }
                }
                else // May be a single value
                {
                    string $vals[];
                    int $nb = liquidParseEndStrForVal( $tmpStr, $argTypes[$curArg], $vals );
                    if( ! $nb )
                    {
                    print( "Error : couldn't get default value for " + $argNames[$curArg] + "\n");
                    pclose( $pipe );
                    return 0;
                    }
                    for( $i = 0; $i < $nb; $i++, $numDefaultValues++ )
                    {
                        $defaultValues[$numDefaultValues] = $vals[$i];
                    }
                    $nbDefaultFound += $nb;
                }
                }
                else
                {
                string $vals[];
                int $nb = liquidParseEndStrForVal( $tmpStr, $argTypes[$curArg], $vals );
                if( ! $nb )
                {
                    print( "Error : couldn't get default value for " + $argNames[$curArg] + "\n");
                    pclose( $pipe );
                    return 0;
                }
                for( $i = 0; $i < $nb; $i++, $numDefaultValues++ )
                {
                        $defaultValues[$numDefaultValues] = $vals[$i];
                }
                $nbDefaultFound += $nb;
                }
            }
            }
            else    // Not a line containing "Default value(s):"
            {
            $numTokens = `tokenize $line "\" " $buffer`;
            if( $numTokens >= 3 &&
                ( $buffer[$numTokens-2] == "uniform" || $buffer[$numTokens-2] == "varying")  )	// Looking for <name> [parameter] [uniform|varying] <type>
            {
                // Switching to a new arg
                            if( $numArgs > 0 )
                {
                // Check if we got all default we needed for previous arg ( if any )
                    int $prevArg = $numArgs -1;
                int $fixedNbDefaults = liquidCheckDefaultVals( $argNames[$prevArg], $argTypes[$prevArg], $argArraySize[$prevArg], $nbDefaultFound, $defaultValues, $numDefaultValues );
                                if( $fixedNbDefaults < 0  )
                {
                        print( "Error : unrecoverable parsing error\n");
                        pclose( $pipe );
                    return 0;
                }
                $numDefaultValues = $fixedNbDefaults;
                }
                $nbDefaultFound = 0;
                $tmpStr = `substitute "\\[([0-9])+\\]$" $buffer[$numTokens-1] ""`;
                $argType = 0;
                $nbElt = 0;
                if( $tmpStr != $buffer[$numTokens-1] ) // Match found
                {
                    $nbElt = ( int ) substring( $buffer[$numTokens-1], size( $tmpStr ) + 2, size( $buffer[$numTokens-1] ) -1 );
                }
                for( $i = 0; $argType == 0 && $i < size( $liqShaderArgTypes ) ; $i++ )
                {
                    if( $tmpStr == $liqShaderArgTypes[$i] )
                        $argType = $i;
                }
                if( $argType == 0 )
                {
                    print( "Error : Can't find arg type for " + $buffer[0] + " " + $tmpStr + "\n" );
                return 0;
                }
                else
                {
                    // Ok to add it
                    $argNames[$numArgs] = $buffer[0];
                    $argDetailTypes[$numArgs] = $buffer[$numTokens-2];
                    $argTypes[$numArgs] = $argType;
                $argArraySize[$numArgs] = $nbElt;
                    $numArgs++;
                }
            }
             // Array or matrix default values on several lines
            else if( $numArgs > 0 && ( $argArraySize[$numArgs-1] > 0 || $argTypes[$numArgs-1] == 7 ) )
            {
                string $vals[];
                int $nb = liquidParseEndStrForVal( $tmpStr, $argType, $vals );
                for( $i = 0; $i < $nb; $i++, $numDefaultValues++ )
                {
                    $defaultValues[$numDefaultValues] = $vals[$i];
                }
                $nbDefaultFound += $nb;
            }
/*
            else
            {
                print "Parse error :";
                for( $i = 0; $i < $numTokens; $i++ )
                {
                print( "[" + $buffer[$i] + "]" );
                }
                            print"\n";
            }
*/
            }
        }
        }
        pclose( $pipe );
            if( $numArgs > 0 )	// Check last arg
        {
                int $prevArg = $numArgs -1;
        int $fixedNbDefaults = liquidCheckDefaultVals( $argNames[$prevArg], $argTypes[$prevArg], $argArraySize[$prevArg], $nbDefaultFound, $defaultValues, $numDefaultValues );
        if( $fixedNbDefaults < 0  )
        {
            print( "Error : unrecoverable parsing error\n");
            return 0;
        }
        $numDefaultValues = $fixedNbDefaults;
        }

        // -----------------------------------------------------  Debug : print what we got
        print( $fileName + "\n" );
        print ( "Type : " + $liqShaderTypes[$shaderType] + "\n" );
        $numArgs = size( $argNames );
        print ( "Args : " + $numArgs + "\n");
        int $j = 0;
        int $k;
        for( $i = 0; $i < $numArgs; $i++ )
        {
            print( "\t" + $argNames[$i] + " " + $argDetailTypes[$i] + " " );
        if( $argArraySize[$i] )
        {
            print( $liqShaderArgTypes[$argTypes[$i]] + "[" + $argArraySize[$i] + "]" + "\n" );
            if( $argTypes[$i] > 1 && $argTypes[$i] < 6 )
                    {
            for( $k = 0; $k < $argArraySize[$i]; $k++ )
            {
                            print( "\t\t[" + $k + "] " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
            }
            }
            else if( $argTypes[$i] == 7 )
            {
            for( $k = 0; $k < $argArraySize[$i]; $k++ )
            {
                            print( "\t\t[" + $k + "]\n\t\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
            }
            }
            else
            {
            for( $k = 0; $k < $argArraySize[$i]; $k++ )
            {
                            print( "\t\t[" + $k + "] " + $defaultValues[$j++] + "\n" );
            }
            }
        }
        else
        {
            print( $liqShaderArgTypes[$argTypes[$i]] );
            if( $argTypes[$i] > 1 && $argTypes[$i] < 6 )
            print( " ( default : " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + ")\n" );
            else if( $argTypes[$i] == 7 )
            {
                            print( " default\n\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
                            print( "\t\t" + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + " " + $defaultValues[$j++] + "\n" );
            }
            else
            print( " ( default : " + $defaultValues[$j++] + ")\n" );
        }
        }
        // Add attributes to shader node
    }
    }
    else
    {
        print( "Error : do not know how to handle " + $fileName + "\n" );
    return 0;
    }
    return $shaderType;
}
