//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan, Alf Kraus 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:    January 18th, 2001
//
//  Description:
//  An interface for working with Renderable Curves with Liquid
//

global proc liquidMakeRenderCurve()
{
	string $selected[] = `ls -dag -type "nurbsCurve" -sl`;
	string $current;
	for ( $current in $selected )
	{
		if ( !`attributeQuery -node $current -ex "liquidCurve"`) addAttr -ln liquidCurve -at bool $current;
 	  if ( `attributeQuery -node $current -ex "liquidCurve"`) setAttr ( $current + ".liquidCurve" ) true;
		if ( !`attributeQuery -node $current -ex "liquidCurveBaseWidth"`) addAttr -ln liquidCurveBaseWidth -at "float" $current;
		if ( `attributeQuery -node $current -ex "liquidCurveBaseWidth"`) setAttr ( $current + ".liquidCurveBaseWidth" ) 0.1;
		if ( !`attributeQuery -node $current -ex "liquidCurveTipWidth"`) addAttr -ln liquidCurveTipWidth -at "float" $current;
		if ( `attributeQuery -node $current -ex "liquidCurveTipWidth"`) setAttr ( $current + ".liquidCurveTipWidth" ) 0.1;
	}
}

global proc liquidUnMakeRenderCurve()
{
	string $selected[] = `ls -dag -type "nurbsCurve" -sl`;
	string $current;
	for ( $current in $selected )
	{
		if ( `attributeQuery -node $current -ex "liquidCurve"`) deleteAttr ( $current + ".liquidCurve" );
		if ( `attributeQuery -node $current -ex "liquidCurveBaseWidth"`) deleteAttr ( $current + ".liquidCurveBaseWidth" );
		if ( `attributeQuery -node $current -ex "liquidCurveTipWidth"`) deleteAttr ( $current + ".liquidCurveTipWidth" );
	}
}


global proc liquidCreateCurveGroup()
{
	// have to do it different to support instances
	string $selected[] = `ls -dag -type "transform" -sl`;
	string $curves[];
	int $k = 0;
	for ( $s in $selected )
	{
		string $shapes[] = `listRelatives -s $s`;
		if ( `objectType -isType "nurbsCurve" $shapes[0]` )
		{
			$curves[$k] = $s;
			$k++;
		}
	}
	string $transform = `createNode transform -n liquidCurveGroup`;
	string $bb = `createNode liqBoundingBoxLocator -p $transform`;
	if ( size( $curves ) ) parent $curves $transform;
	
	// custom shading group
	if ( !`attributeQuery -node $transform -ex "liquidCustomShadingGroup"` )
		addAttr -k true -ln "liquidCustomShadingGroup" -at "message" $transform;
		
	// curve group attributes
	if ( !`attributeQuery -node $bb -ex "liquidCurveGroup"` )
		addAttr -k true -dv 1 -ln "liquidCurveGroup" -at bool $bb;
	if ( !`attributeQuery -node $bb -ex "liquidCurveBaseWidth"` )
		addAttr -k true -dv .1 -ln "liquidCurveBaseWidth" -at double $bb;
	if ( !`attributeQuery -node $bb -ex "liquidCurveTipWidth"` )
		addAttr -k true -dv .1 -ln "liquidCurveTipWidth" -at double $bb;
		
	select -r $transform;
}
