//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  By Colin Doncaster
//
//  Creation Date:    July 31st, 2000
//
//  Procedure Name:
//	liquidReAttachParams
//
//  Description:
//	same as reloading, it updates the parameters on the nodes
//

global proc liquidReAttachParams ( string $currentNodeName, string $oldShader )
{     
      int $i;
      string $shaderFileName = `getAttr ( $currentNodeName + ".rmanShaderLong" )`;

      string $nodeType = `objectType $currentNodeName`;
      if ( $oldShader == "surface" ) { 
				if (!`attributeQuery -n $currentNodeName -ex ( "color" ) `) {
					addAttr -longName "color" -at double3 $currentNodeName;
					addAttr -defaultValue 0.5 -longName "red" -at double -parent "color" $currentNodeName;
					addAttr -defaultValue 0.5 -longName "green" -at double -parent "color" $currentNodeName;
					addAttr -defaultValue 0.5 -longName "blue" -at double -parent "color" $currentNodeName;
					setAttr ( $currentNodeName + ".color" ) -type double3 1.0 1.0 1.0 ;
				}
				if (!`attributeQuery -n $currentNodeName -ex ( "opacity" ) `) {
					addAttr -longName "opacity" -at "float" -defaultValue 1.0 $currentNodeName;
				}
			}
      
      if ( $oldShader == "light" ) {
				if (!`attributeQuery -n $currentNodeName -ex ( "shadowCamera" ) `) {
					addAttr -longName "shadowCamera" -dt "string" $currentNodeName;
				}
			}
			
			if ( $oldShader == "disp" || $oldShader == "surface" ) {
				if (!`attributeQuery -n $currentNodeName -ex ( "displacementBound" ) `) {
					addAttr -ln displacementBound -at "float" -dv 0.0 $currentNodeName;
				}
			}
			
      int $numOfArgs = `liquidGetSloInfo -numParam $shaderFileName`;
      for ( $i = 0; $i < $numOfArgs ; $i++ )
      {
	    string $argName = `liquidGetSloInfo -argName $i $shaderFileName`;
	    string $argType = `liquidGetSloInfo -argType $i $shaderFileName`;
	    string $argDetail = `liquidGetSloInfo -argDetail $i $shaderFileName`;
	    string $argDefault[] = `liquidGetSloInfo -argDefault $i $shaderFileName`;
	    int    $argArrayLen = `liquidGetSloInfo -argArraySize $i $shaderFileName`;
	    if ( !`attributeQuery -n $currentNodeName -ex $argName` )
	    {
		  if ( $argType == "float" ) {
		    int $size = size($argDefault);
		    if ( $argArrayLen > 0 )
		    {
			addAttr -longName $argName -dt doubleArray $currentNodeName;
			string $fDefault = "";
			int $k;
			for ( $k = 0; $k < $size; $k++ ) {
			  $fDefault = $fDefault + $argDefault[$k] + " ";
			}
			string $nodeName = $currentNodeName + "." + $argName;
			eval setAttr $nodeName -type doubleArray $size $fDefault;
		    } else { 
			float $defaultVal = $argDefault[0];
			addAttr -longName $argName -at double -dv $defaultVal $currentNodeName;
		    }
		  }
		  if ( $argType == "string" ) {
			string $defaultVal = $argDefault[0];
			addAttr -longName $argName -dt "string" $currentNodeName;
			setAttr ( $currentNodeName + "." + $argName ) -type "string" $defaultVal;
		  }
		  if ( $argType == "color" || $argType == "point" || $argType == "vector" || $argType == "normal" ) {
			float $defaultValA = $argDefault[0];
			float $defaultValB = $argDefault[1];
			float $defaultValC = $argDefault[2];
			addAttr -longName $argName -at double3 $currentNodeName;
			addAttr -longName ( $argName + "a" ) -at double -parent $argName $currentNodeName;
			addAttr -longName ( $argName + "b" ) -at double -parent $argName $currentNodeName;
			addAttr -longName ( $argName + "c" ) -at double -parent $argName $currentNodeName;
			setAttr ( $currentNodeName + "." + $argName ) -type double3 $defaultValA $defaultValB $defaultValC;
		  }
	    } else {
                 if ( $argType == "string" ) {
                        string $defaultVal = $argDefault[0];
                        setAttr ( $currentNodeName + "." + $argName ) -type "string" $defaultVal;
                  }
            } 
      }
}
