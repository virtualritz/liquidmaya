//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:    June 28, 2000
//
//  Procedure Name:
//	liquidFluid
//
//  Description:
//	fluid -> liquids shader editor 	

global string $liquidFluidLastShaderDirectory = "";
global string $liquidFluidShaderList[];
global string $liquidShaderSpec = "*";

global proc liquidFluidUpdateList() 
{
	global string $liquidShaderSpec;
	if ( `textScrollList -exists liquidFluidShaderList` ) {
		textScrollList -e -ra liquidFluidShaderList;
		string $shadingNodes[] = `ls "*liquidSurface*" "*liquidLight*" "*liquidDisp*" "*liquidVolume*"`;
		string $shadingNode;
		for ( $shadingNode in $shadingNodes ) {
   			textScrollList -e -append $shadingNode liquidFluidShaderList;
		}	
		$shadingNodes = `ls -type oldBlindDataBase -type blindDataTemplate`;
		string $shadingNode;
		for ( $shadingNode in $shadingNodes ) {
			int $typeId = `getAttr ( $shadingNode + ".typeId" )`;
			if ( ( $typeId == 303126790 ) || ( $typeId == 303126791 ) || ( $typeId == 303126792 ) || ( $typeId == 303126793 ) ) {
				if ( gmatch( $shadingNode, $liquidShaderSpec ) ) {
	   				textScrollList -e -append $shadingNode liquidFluidShaderList;
				}
			}
		}	
	}
}

global proc liquidFluidReloadCMD ()
{
	string $currentlySelected[] = `ls -sl`;
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	string $node;
	for ( $node in $selectedNode ) {
		string $shaderName = `getAttr ( $node + ".rmanShaderLong" ) `;
		string $type = `liquidGetSloInfo -type $shaderName`;
		if ( $type == "surface" ) liquidReAttachParams $node "surface";
		if ( $type == "light" ) liquidReAttachParams $node "light";
		if ( $type == "displacement" ) liquidReAttachParams $node "disp";
		liquidFluidUpdateList();
	}
	select $currentlySelected;
}

global proc liquidFluidDuplicateCMD ()
{
	string $currentlySelected[] = `ls -sl`;
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	string $node;
	for ( $node in $selectedNode ) {
		liquidDuplicateShaderNode $node;
	}
	select -r $currentlySelected;
	liquidFluidUpdateList();
}

global proc liquidFluidLoadCMD ( string $widget )
{
	global string $liquidCFD;
	string $currentlySelected[] = `ls -sl`;
	string $selectedFiles[] = `textScrollList -q -si $widget`;
	string $selected;
	for ( $selected in $selectedFiles ) {
		string $path = ( $liquidCFD + "/" + $selected );
		if ( `filetest -f $path`) {
			liquidNewShaderNode $path;
		} 
	}
	select $currentlySelected;
	liquidFluidUpdateList();
}

global proc liquidFluidEditCMD ()
{
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedNode[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		string $nodeType = `liquidGetShaderNodeType $selectedNode[0]`;
  	liquidParamDialogWindow $selectedNode[0] $nodeType;
	}
}

global proc liquidFluidAssignCMD ()
{
	string $selectedShader[] = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedShader[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		string $currentSelected;
		for ( $currentSelected in $selectedShader ) {
			string $type = `liquidGetShaderNodeType $currentSelected`;
			if( $type == "Surface" || $type == "Disp" || $type == "Volume" ) {
				string $selectedNode[] = `ls -dag -shapes -mat -sl`;
				string $currentNode;
				for ( $currentNode in $selectedNode ) {
					liquidAssignShaderNode $currentNode $currentSelected;
				}
				$selectedNode = `getMultiListerSelection`;
				for ( $currentNode in $selectedNode ) {
					liquidAssignShaderNode $currentNode $currentSelected;
				}
			}		
			if( $type == "Light" ) {
				string $selectedNode[] = `ls -dag -lights -sl`;
				string $currentNode;
				for ( $currentNode in $selectedNode ) {
					liquidAssignShaderNode $currentNode $currentSelected;
				}
			}
		}
	}
}

global proc liquidFluidUnAssignCMD ()
{
	string $selectedShader[] = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedShader[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		string $selectedNode[] = `ls -dag -set -shapes -sl`;
		if ( size( $selectedNode ) == 0 ) {
				$selectedNode = `getMultiListerSelection`;
		}
		string $type = `liquidGetShaderNodeType $selectedShader[0]`;
		string $currentNode;
		for ( $currentNode in $selectedNode ) {
			string $connections[] = `listConnections ( $currentNode + ".liquid" + $type + "ShaderNode" )`;
			if ( $connections[0] == $selectedShader[0] ) {
				if ( `isConnected ( $selectedShader[0] + ".assignedObjects" ) ( $currentNode + ".liquid" + $type + "ShaderNode" )` ) {
					deleteAttr ( $currentNode + ".liquid" + $type + "ShaderNode" );
				}
			}	
		}
	}
}

global proc liquidFluidPickObjectsCMD()
{
	string $selectedNode[];
	$selectedNode = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedNode[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		string $assignedObjects[] = `listConnections -sh on ( $selectedNode[0] + ".assignedObjects" )`;
		if ( size($assignedObjects) != 0 ) {
			string $selectionList[];
			string $currentObject;
			int $selNum = 0;
			for ( $currentObject in $assignedObjects ) {
				string $type = `liquidGetShaderNodeType $selectedNode[0]`;
				if ( `attributeQuery -node $currentObject -ex ( "liquid" + $type + "ShaderNode" )`) {
					$selectionList[ $selNum ] = $currentObject;
					$selNum++;
				}
			}
			select -r $selectionList;
		} else {
			select -cl;
			print "Fluid -> No objects assigned...\n";
		}
	}	
}

global proc liquidFluidPickAssignedCMD()
{
	string $selectedNode[];
	$selectedNode = `ls -dag -sl`;
	if ( $selectedNode[0] == "" ) {
		print "Fluid -> No Object Selected...\n";
	} else {
		string $assignedObjects[];
		if ( `objExists ( $selectedNode[0] + ".liquidSurfaceShaderNode" )` ) {
			$assignedObjects = `listConnections ( $selectedNode[0] + ".liquidSurfaceShaderNode" )`;
		}
		if ( ( `objExists ( $selectedNode[0] + ".liquidDispShaderNode" )` ) && size($assignedObjects) == 0 ) {
			$assignedObjects = `listConnections ( $selectedNode[0] + ".liquidDispShaderNode" )`;
		}
		if ( ( `objExists ( $selectedNode[0] + ".liquidLightShaderNode" )` ) && size($assignedObjects) == 0 ) {
			$assignedObjects = `listConnections ( $selectedNode[0] + ".liquidLightShaderNode" )`;
		}
		if ( size( $assignedObjects ) > 0 ) {
			textScrollList -e -da liquidFluidShaderList;
			textScrollList -e -si $assignedObjects[0] liquidFluidShaderList;
		}
	}	
}

global proc liquidFluidRemoveCMD ()
{
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedNode[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		string $currentNode;
		int $yesAll;
		$yesAll = 0;
		for ( $currentNode in $selectedNode ) {
			string $yesno;
			if ( $yesAll == 0 )
			$yesno = `confirmDialog -title "Confirm" -message ( "Are you sure you want to delete " + $currentNode + "?" )
		          -button "Yes" -button "Yes To All" -button "No" -defaultButton "Yes"
	            -cancelButton "No" -dismissString "No"`;
			if ( $yesno == "Yes To All" ) {
				$yesAll = 1;
				$yesno = "Yes";
			}
			if ( $yesno == "Yes" ) {
				string $connections[];
				if ( `attributeQuery -node $currentNode -ex "assignedObjects"`) {
					$connections = `listConnections ( $currentNode + ".assignedObjects" )`;
				}
				string $type = `liquidGetShaderNodeType $currentNode`;
				delete $currentNode;
				string $nodeOn;
				for ( $nodeOn in $connections ) {
					if ( `attributeQuery -node $nodeOn -ex ( ".liquid" + $type + "ShaderNode" )`) {
						deleteAttr ( $nodeOn + ".liquid" + $type + "ShaderNode" ); 
					}
				}		 
			}
		}
	}
	liquidFluidUpdateList;
}

global proc liquidFluidRemoveUnusedCMD ()
{
	string $selectedNode[] = `textScrollList -q -ai liquidFluidShaderList`;
	if ( size( $selectedNode ) == 0 ) {
		print "Fluid -> No Shaders Loaded...\n";
	} else {
		string $yesno;
		$yesno = `confirmDialog -title "Confirm" -message ( "Are you sure you want to removed all unused?" )
		          -button "Yes" -button "No" -defaultButton "Yes"
	            -cancelButton "No" -dismissString "No"`;
		if ( $yesno == "Yes" ) {
			string $currentNode;
			for ( $currentNode in $selectedNode ) {
				print $currentNode;
				string $connections[];
				if ( `attributeQuery -node $currentNode -ex "assignedObjects"`) {
					$connections = `listConnections ( $currentNode + ".assignedObjects" )`;
					if ( size( $connections ) == 0 ) {
						delete $currentNode;
					}
				} else {
					delete $currentNode;
				}
			}
		}
	}
	liquidFluidUpdateList;
}

global proc liquidFluidPreviewSelectedShader()
{
    string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
    if ( $selectedNode[0] == "" ) {
	    print "Fluid -> No Shader Selected...\n";
    } else {
    	liquidFluidPreviewShader $selectedNode[0];
    }
}		

global proc liquidFluidPreviewShader( string $shaderNode )
{
    if ( !`liquidGlobalsExists` ) {
	    liquidCreateGlobals;
    }
    string $args = ( "liquidPreviewShader -sphere -shader " + $shaderNode );
    int $sshn = `getAttr liquidGlobals.shortShaderNames`;
    $args = $args + ( " -sshn " + $sshn );
    string $previewCommand = `getAttr liquidGlobals.previewer`;
    if( $previewCommand != "" )
    {
	$args = $args + ( " -renderer " + $previewCommand );
    }
    eval( $args );
}		


global proc liquidSelectNodeCMD() 
{	
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	if ( $selectedNode[0] == "" ) {
		print "Fluid -> No Shader Selected...\n";
	} else {
		select $selectedNode;
	}
} 
	
global proc liquidChangeShaderSpec( string $fieldName )
{
	global string $liquidShaderSpec;
	$liquidShaderSpec = `textFieldGrp -q -tx $fieldName`;
	liquidFluidUpdateList;
}

global proc liquidSelectShader( string $nameField )
{
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	textFieldGrp -e -tx $selectedNode[0] $nameField;
}

global proc liquidRenameShader( string $nameField )
{
	string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
	string $newName = `textFieldGrp -q -tx $nameField`;
	rename $selectedNode[0] $newName;
	liquidFluidUpdateList;
}

global proc string liquidShaderBrowser()
{
	global string $liquidShaderSpec;
	$liquidShaderForm = `formLayout -w 400 -nd 100`;
		string $listSpec = `textFieldGrp -w 400 -tx $liquidShaderSpec -l "Shader Spec"`;
		string $nameField = `textFieldGrp -w 400 -tx "" -l "Name"`;
   	textScrollList -sc ( "liquidSelectShader " + $nameField ) -allowMultiSelection true -w 200 -dcc liquidFluidEditCMD -dkc liquidFluidRemoveCMD liquidFluidShaderList;
		setParent ..;

	string $shaderListPop = `popupMenu -p liquidFluidShaderList`;
			menuItem -label "Reload" -command liquidFluidReloadCMD liquidFluidReloadButton;
			menuItem -label "Duplicate" -command liquidFluidDuplicateCMD liquidFluidDuplicateButton;
			menuItem -label "Remove" -command liquidFluidRemoveCMD liquidFluidRemoveButton;
			menuItem -label "Remove Unused" -command liquidFluidRemoveUnusedCMD liquidFluidRemoveUnusedButton;
			menuItem -label "Assign" -command liquidFluidAssignCMD liquidFluidAssignButton;
			menuItem -label "Unassign" -command liquidFluidUnAssignCMD liquidFluidUnassignButton;
			menuItem -label "Pick Objects" -command liquidFluidPickObjectsCMD liquidFluidPickButton;
			menuItem -label "Pick Assigned" -command liquidFluidPickAssignedCMD liquidFluidPickAssignButton;
			menuItem -label "Render" -command "liquid -GL" liquidFluidRender;
			menuItem -label "Select Node" -command liquidSelectNodeCMD liquidFluidSelectNode;	
			menuItem -label "Render Globals" -command liquidGlobalsWindow liquidFluidRendG;
     
	formLayout -e
		-attachForm $listSpec "top" 0
		-attachForm $listSpec "left" 0
		-attachForm $listSpec "right" 0
			
		-attachControl $nameField "top" 0 $listSpec
		-attachForm $nameField "left" 0
		-attachForm $nameField "right" 0
			
		-attachControl liquidFluidShaderList "top" 0 $nameField
		-attachForm liquidFluidShaderList "bottom" 0
		-attachForm liquidFluidShaderList "left" 0
		-attachForm liquidFluidShaderList "right" 0
		$liquidShaderForm;
		
	string $command = ( "liquidChangeShaderSpec " + $listSpec );
	textFieldGrp -e -cc $command $listSpec;
	string $command = ( "liquidRenameShader " + $nameField );
	textFieldGrp -e -cc $command $nameField;
	return $liquidShaderForm;
}

global proc liquidFluid () 
{
	if ( !`liquidGlobalsExists` ) {
		liquidCreateGlobals;
	}
	if ( `window -exists liquidFluidWindow` ) deleteUI liquidFluidWindow;
	if ( !`window -exists liquidFluidWindow` ) {
		
		window -widthHeight 800 270 -title "Fluid" liquidFluidWindow;
		
		formLayout -nd 10 liquidFluidForm;
		
			string $listPaneLayout = `paneLayout -configuration "vertical2"`;
				string $shaderBrowser = `liquidShaderBrowser`;
				string $fileBrowser[] = `liquidFileBrowserIn "*.sle" "liquidFluidLoadCMD"`;
			setParent ..;
			
		// this let's you add the ability of turning the fluis buttons off and just using the popup menus
		string $getINI = `liquidINIGet fluid buttons`;
		if ( $getINI == "true" ) {	

			button -label "Load" -command ( "liquidFluidLoadCMD " + $fileBrowser[1] ) liquidFluidImportButton;
			button -label "Reload" -command liquidFluidReloadCMD liquidFluidReloadButton;
			button -label "Duplicate" -command liquidFluidDuplicateCMD liquidFluidDuplicateButton;
			button -label "Remove" -command liquidFluidRemoveCMD liquidFluidRemoveButton;
			button -label "Remove Unused" -command liquidFluidRemoveUnusedCMD liquidFluidRemoveUnusedButton;
			button -label "Assign" -command liquidFluidAssignCMD liquidFluidAssignButton;
			button -label "Unassign" -command liquidFluidUnAssignCMD liquidFluidUnassignButton;
			button -label "Pick Objects" -command liquidFluidPickObjectsCMD liquidFluidPickButton;
			button -label "Pick Assigned" -command liquidFluidPickAssignedCMD liquidFluidPickAssignButton;
			button -label "Render" -command "liquid -GL" liquidFluidRender;
			button -label "Select Node" -command liquidSelectNodeCMD liquidFluidSelectNode;
			
			setParent ..;

			formLayout -e 
				-attachForm liquidFluidImportButton "top" 0
				-attachForm liquidFluidImportButton "left" 0
							
				-attachForm liquidFluidReloadButton "top" 0 
				-attachControl liquidFluidReloadButton "left" 0 liquidFluidImportButton
									
				-attachForm liquidFluidRemoveButton "top" 0 
				-attachControl liquidFluidRemoveButton "left" 0 liquidFluidReloadButton

				-attachForm liquidFluidRemoveUnusedButton "top" 0 
				-attachControl liquidFluidRemoveUnusedButton "left" 0 liquidFluidRemoveButton

				-attachForm liquidFluidAssignButton "top" 0 
				-attachControl liquidFluidAssignButton "left" 0 liquidFluidRemoveUnusedButton

				-attachForm liquidFluidUnassignButton "top" 0 
				-attachControl liquidFluidUnassignButton "left" 0 liquidFluidAssignButton

				-attachForm liquidFluidPickButton "top" 0 
				-attachControl liquidFluidPickButton "left" 0 liquidFluidUnassignButton

				-attachForm liquidFluidPickAssignButton "top" 0 
				-attachControl liquidFluidPickAssignButton "left" 0 liquidFluidPickButton

				-attachForm liquidFluidRender "top" 0 
				-attachControl liquidFluidRender "left" 0 liquidFluidPickAssignButton

				-attachForm liquidFluidSelectNode "top" 0 
				-attachControl liquidFluidSelectNode "left" 0 liquidFluidRender

				-attachForm $listPaneLayout "left" 0
				-attachForm $listPaneLayout "bottom" 0
				-attachForm $listPaneLayout "right" 0
				-attachControl $listPaneLayout "top" 0 liquidFluidImportButton
					
				liquidFluidForm;
		} else {
			setParent ..;

			formLayout -e 
				-attachForm $listPaneLayout "left" 0
				-attachForm $listPaneLayout "bottom" 0
				-attachForm $listPaneLayout "right" 0
				-attachForm $listPaneLayout "top" 0 
					
				liquidFluidForm;
		}
	}
	liquidFluidUpdateList;
	showWindow liquidFluidWindow;
}

print "Initialized Fluid...\n";
