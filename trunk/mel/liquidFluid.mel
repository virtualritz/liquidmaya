//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:    June 28, 2000
//
//  Procedure Name:
//  liquidFluid
//
//  Description:
//  fluid -> liquids shader editor

global string $liquidFluidLastShaderDirectory = "";
global string $liquidFluidShaderList[];
global string $liquidShaderSpec = "*";


global proc string liquidFluidGetPreviewDir()
{
  // retrieve the current project path
  string $projectPath = `workspace -q -rootDirectory`;

  // check the existence of the preview directory
  string $previewTopDir = ($projectPath+"liquidPreviews");
  if ( !`filetest -d $previewTopDir` ) {
    string $current = `pwd`;
    chdir $projectPath;
    sysFile -makeDir liquidPreviews;
    chdir $current;
  }

  // check the existence of the scene directory
  string $scene = basenameEx(`file -q -sceneName`);
  if ( !size( $scene ) ) $scene = "Untitled";
  string $previewSceneDir = ($previewTopDir+"/"+$scene);
  if ( !`filetest -d $previewSceneDir` ) sysFile -makeDir $previewSceneDir;

  return $previewSceneDir;
}

global proc liquidSLEditor()
{
  if(`window -exists liquidSLEditorWindow`)
  {
    deleteUI liquidSLEditorWindow;
  }
  window -t "Fluid SL Search/Replace" -wh 300 100 liquidSLEditorWindow;

  columnLayout -adj 1 liquidSLEColumn;

  checkBoxGrp -l "Use Regex" liquidSLRegexCheck;
  checkBoxGrp -l "Keep Dialog" liquidSLDialogCheck;

  checkBoxGrp -ncb 2 -l "Search In:" -la2 "slo Paths" "Shader Names" liquidSLSearchCheck;

  textFieldGrp -l "Search String" -ad2 2 liquidSLSearchString;
  textFieldGrp -l "Replace String" -ad2 2 liquidSLReplaceString;

  checkBoxGrp -l "Replace in Selection" -en 0 liquidSLSelectionCheck;
  button -l "Replace" -h 30 -c ("liquidSLReplace") liquidSLReplaceButton;
  button -l "Cancel" -h 30 -c "deleteUI liquidSLEditorWindow" liquidSLCancelButton;

  showWindow liquidSLEditorWindow;
}

global proc liquidSLReplace()
{
  string $shaderlist[];
  if(`checkBoxGrp -q -v1 liquidSLSelectionCheck`)
  {
    $shaderlist = `ls -sl`;
  }
  else
  {
    //get a list of all shaders
    $shaderlist = liquidGetShaderList("all");
  }

  string $searchstring = `textFieldGrp -q -tx liquidSLSearchString`;
  if(!`checkBoxGrp -q -v1 liquidSLRegexCheck`)
  {
    if(`gmatch $searchstring "*.*"`)
    {
      string $tmp = `substitute "\\." $searchstring "\\\\."`;
      $searchstring = $tmp;
    }
  }
  string $replacestring = `textFieldGrp -q -tx liquidSLReplaceString`;

  int $do_slo = `checkBoxGrp -q -v1 liquidSLSearchCheck`;
  int $do_names = `checkBoxGrp -q -v2 liquidSLSearchCheck`;
  if($do_slo == 0 && $do_names == 0)
  {
    return;
  }
  //searching in slo paths
  if($do_slo)
  {
    for($sh in $shaderlist)
    {
      string $sname = `getAttr ($sh+".rmanShaderLong")`;
      string $newname = `substitute $searchstring $sname $replacestring`;
      setAttr ($sh+".rmanShaderLong") -type "string" $newname;
    }
  }
  //searching in names
  if($do_names)
  {
    for($sh in $shaderlist)
    {
      string $sname = `getAttr ($sh+".rmanShader")`;
      string $newname = `substitute $searchstring $sname $replacestring`;
      setAttr ($sh+".rmanShader") -type "string" $newname;
      rename $sh $newname;
    }
  }

  liquidFluidUpdateList;

  if(!`checkBoxGrp -q -v1 liquidSLDialogCheck`)
  {
    evalDeferred("deleteUI liquidSLEditorWindow");
  }
}

global proc liquidReloadFluidShader(string $shadername)
{
  string $shader_name = `getAttr ( $shadername + ".rmanShaderLong" ) `;
  liquidSlSetShader( $shader_name );
  string $type = liquidSlShaderType();
  if ( $type == "surface" ) liquidReAttachParams $shadername "surface";
  if ( $type == "light" ) liquidReAttachParams $shadername "light";
  if ( $type == "displacement" ) liquidReAttachParams $shadername "disp";
}

global proc liquidChangeShader(string $shadername, string $new_shaderpath, string $nodeType)
{
  if(`filetest -r $new_shaderpath`)
  {
    setAttr -type "string" ($shadername+".rmanShaderLong") $new_shaderpath;
    liquidReloadFluidShader($shadername);
    //liquidParamDialogWindow($shadername, $nodeType);
  }
  else
  {
    confirmDialog -t "Fluid message" -m (" \n"+$new_shaderpath+" couldn't be read. Please check the path and try again\n");
    print ($new_shaderpath+" couldn't be read. Please check the path and try again\n");
  }
}

global proc string[] liquidGetMultiListerSelection() {
  string $targets[];

  // Get the MultiLister panel.  There _should_ be only one
  // of these.
  string $scriptPanels[] = `getPanel -scriptType "multiListerPanel"`;

  // Just in case...
  if ( size( $scriptPanels ) > 1 )
  {
    warning ( "More than one active multiListerPanel!" );
  }

  string $nameRoot = $scriptPanels[0];

  // Get the control for the panel.
  // Append the Panel name to get the "topLayout"
  string $control = `scriptedPanel -q -control $nameRoot`;

  // If no control is present, MultiLister is not open
  if ( "" != $control )
  {
    string $topLayout = $control + "|" + $nameRoot;

    // And finally, the active MultiLister
    $theLister = `findActiveLister $topLayout $nameRoot`;

    if ( `listerEditor -exists $theLister` )
    {
      // Code unabashedly copy and paste from 'buildMultiListerEditMenu.mel'

      int $inSelectMode = `listerEditor -q -inSelectMode $theLister`;

      if($inSelectMode == 0)
      {
        // get highlight list
        $targets = `listerEditor -q -highlight $theLister`;
      }
      else
      {
        $targets = `ls -sl`;
      }
    }
  }

  return $targets;
}


global proc liquidFluidUpdateList()
{
  global string $liquidShaderSpec;
  if ( `textScrollList -exists liquidFluidShaderList` ) {
    textScrollList -e -ra liquidFluidShaderList;
    string $shadingNodes[] = `ls "*liquidSurface*" "*liquidLight*" "*liquidDisp*" "*liquidVolume*" "*liquidRibbox*" "*liquidContainer*"`;
    string $shadingNode;
    for ( $shadingNode in $shadingNodes ) {
      textScrollList -e -append $shadingNode liquidFluidShaderList;
    }
    $shadingNodes = `ls -type oldBlindDataBase -type blindDataTemplate`;
    string $shadingNode;
    for ( $shadingNode in $shadingNodes ) {
      int $typeId = `getAttr ( $shadingNode + ".typeId" )`;
      if ( ( $typeId == 303126790 ) || ( $typeId == 303126791 ) || ( $typeId == 303126792 ) || ( $typeId == 303126793 ) || ( $typeId == 303126794 ) || ( $typeId == 303126795 ) ) {
        if ( gmatch( $shadingNode, $liquidShaderSpec ) ) {
          textScrollList -e -append $shadingNode liquidFluidShaderList;
        }
      }
    }
  }
}

global proc liquidFluidReloadCMD ()
{
  // store current selection
  string $currentlySelected[] = `ls -sl`;

  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  string $node;
  for ( $node in $selectedNode ) {
    string $shaderName = `getAttr ( $node + ".rmanShaderLong" ) `;
    liquidSlInfoReset(); // force re-parsing the shader
    liquidSlSetShader( $shaderName );
    string $type = liquidSlShaderType();
    if ( $type == "surface" ) liquidReAttachParams $node "surface";
    if ( $type == "light" ) liquidReAttachParams $node "light";
    if ( $type == "displacement" ) liquidReAttachParams $node "disp";
    liquidFluidUpdateList();
  }

  // restore previous selection
  select $currentlySelected;
}

global proc liquidFluidDuplicateCMD ()
{
  string $currentlySelected[] = `ls -sl`;
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  string $node;
  for ( $node in $selectedNode ) {
    liquidDuplicateShaderNode $node;
  }
  select -r $currentlySelected;
  liquidFluidUpdateList();
}

global proc liquidFluidLoadCMD ( string $widget )
{
  global string $liquidCFD;
  string $currentlySelected[] = `ls -sl`;
  string $selectedFiles[] = `textScrollList -q -si $widget`;
  string $selected;
  for ( $selected in $selectedFiles ) {
    string $path = ( $liquidCFD + "/" + $selected );
    if ( `filetest -f $path`) {
      liquidNewShaderNode $path;
    }
  }
  select $currentlySelected;
  liquidFluidUpdateList();
}

global proc liquidFluidEditCMD ()
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    string $nodeType = `liquidGetShaderNodeType $selectedNode[0]`;
    if ( $nodeType == "Container" ) liquidContainerWindow( $selectedNode[0] );
    else liquidParamDialogWindow $selectedNode[0] $nodeType;
  }
}

global proc liquidFluidEditSelectedObjCMD( string $type )
{
  string $selectedNode[] = `ls -sl`;

  if ( !size( $selectedNode ) ) {
    warning ("Fluid -> No Transform Selected...");
    return;
  }

  for ( $tr in $selectedNode ) {

    string $attr = "";
    if ( size( match("[Ss]urface", $type ) ) ) $attr = ".liquidSurfaceShaderNode";
    else if ( size( match("[Dd]isplacement", $type ) ) ) $attr = ".liquidDispShaderNode";
    else if ( size( match("[Ll]ight", $type ) ) ) $attr = ".liquidLightShaderNode";

    if ( $attr == "" ) error ("liquidFluidEditShaderCMD: unknown shader type -> "+$type);

    string $tmp[] = `listRelatives -children -s $tr`;

    for ( $t in $tmp ) {

      if ( !objExists( ($t+$attr) ) ) continue;

      string $shader = `connectionInfo -sfd ($t+$attr)`;
      $shader = match( "[a-zA-Z0-9_]+", $shader );
      string $nodeType = `liquidGetShaderNodeType $shader`;
      liquidParamDialogWindow $shader $nodeType;
    }
  }
}

global proc liquidFluidEditNodeCMD( string $nodes[] )
{
  for ( $node in $nodes ) {
    if ( !objExists( $node ) ) {
      warning ("Fluid -> This node does not exist...");
      return;
    }
    string $nodeType = `liquidGetShaderNodeType $node`;
    liquidParamDialogWindow $node $nodeType;
  }
}


global proc liquidFluidAssignCMD ()
{
  string $selectedShader[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedShader[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    liquidFluidAssign( $selectedShader );
  }
}

global proc liquidFluidAssign( string $shaderList[] )
{
  string $currentSelected;
  for ( $currentSelected in $shaderList ) {
    string $type = `liquidGetShaderNodeType $currentSelected`;

    if( $type == "Surface" || $type == "Disp" || $type == "Volume" || $type == "Ribbox") {
      string $selectedNode[] = `ls -dag -long -shapes -mat -sl`;
      string $currentNode;
      for ( $currentNode in $selectedNode ) {
        liquidAssignShaderNode $currentNode $currentSelected;
      }
      $selectedNode = `liquidGetMultiListerSelection`;
      for ( $currentNode in $selectedNode ) {
        liquidAssignShaderNode $currentNode $currentSelected;
      }
    }

    if( $type == "Light" ) {
      string $selectedNode[] = `ls -dag -long -lights -sl`;
      string $currentNode;
      for ( $currentNode in $selectedNode ) {
        liquidAssignShaderNode $currentNode $currentSelected;
      }
    }

  }
}

global proc liquidFluidUnAssignCMD ()
{
  string $selectedShader[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedShader[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    liquidFluidUnAssign( $selectedShader[0] );
  }
}

global proc liquidFluidUnAssign( string $selectedShader )
{
  string $selectedNode[] = `ls -dag -set -shapes -sl`;
  if ( size( $selectedNode ) == 0 ) {
      $selectedNode = `liquidGetMultiListerSelection`;
  }

  string $type = `liquidGetShaderNodeType $selectedShader`;
  string $currentNode;

  for ( $currentNode in $selectedNode ) {

    string $transform = liquidGetTransform( $currentNode );
    if ( objExists( ( $transform + ".liqRIBBox" ) ) ) {
      string $connections[] = `listConnections ( $transform + ".liqRIBBox" )`;
      if ( $connections[0] == $selectedShader ) {
        if ( `isConnected ( $selectedShader + ".ribbox" ) ( $transform + ".liqRIBBox" )` ) {
          disconnectAttr ( $selectedShader + ".ribbox" ) ( $transform + ".liqRIBBox" );
          setAttr -type "string" ( $transform + ".liqRIBBox" ) "";
        }
      }
    }

    if ( objExists( ( $currentNode + ".liquid" + $type + "ShaderNode" ) ) ) {
      string $connections[] = `listConnections ( $currentNode + ".liquid" + $type + "ShaderNode" )`;
      if ( $connections[0] == $selectedShader ) {
        if ( `isConnected ( $selectedShader + ".assignedObjects" ) ( $currentNode + ".liquid" + $type + "ShaderNode" )` ) {
          deleteAttr ( $currentNode + ".liquid" + $type + "ShaderNode" );
        }
      }
    }

  }
}

global proc liquidFluidPickObjectsCMD()
{
  string $selectedNode[];
  $selectedNode = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    liquidFluidPickObjects($selectedNode[0]);
  }
}

global proc liquidFluidPickObjects( string $selectedNode )
{
  string $assignedObjects[];
  if ( objExists( ( $selectedNode + ".assignedObjects" ) ) ) $assignedObjects = `listConnections -sh on ( $selectedNode + ".assignedObjects" )`;
  if ( size($assignedObjects) != 0 ) {
    string $selectionList[];
    string $currentObject;
    int $selNum = 0;
    for ( $currentObject in $assignedObjects ) {
      string $type = `liquidGetShaderNodeType $selectedNode`;
      if ( `attributeQuery -node $currentObject -ex ( "liquid" + $type + "ShaderNode" )`) {
        $selectionList[ $selNum ] = $currentObject;
        $selNum++;
      }
    }
    select -r $selectionList;
  } else {
    select -cl;
    print "Fluid -> No objects assigned...\n";
  }
}



global proc liquidFluidPickAssignedCMD()
{
  string $selectedNode[];
  $selectedNode = `ls -dag -sl`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Object Selected...\n";
  } else {
    string $assignedObjects[];
    if ( `objExists ( $selectedNode[0] + ".liquidSurfaceShaderNode" )` ) {
      $assignedObjects = `listConnections ( $selectedNode[0] + ".liquidSurfaceShaderNode" )`;
    }
    if ( ( `objExists ( $selectedNode[0] + ".liquidDispShaderNode" )` ) && size($assignedObjects) == 0 ) {
      $assignedObjects = `listConnections ( $selectedNode[0] + ".liquidDispShaderNode" )`;
    }
    if ( ( `objExists ( $selectedNode[0] + ".liquidLightShaderNode" )` ) && size($assignedObjects) == 0 ) {
      $assignedObjects = `listConnections ( $selectedNode[0] + ".liquidLightShaderNode" )`;
    }
    if ( size( $assignedObjects ) > 0 ) {
      textScrollList -e -da liquidFluidShaderList;
      textScrollList -e -si $assignedObjects[0] liquidFluidShaderList;
    }
  }
}

global proc liquidFluidRemoveCMD ()
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    string $currentNode;
    int $yesAll;
    $yesAll = 0;
    for ( $currentNode in $selectedNode ) {
      string $yesno;
      if ( $yesAll == 0 )
      $yesno = `confirmDialog -title "Confirm" -message ( "Are you sure you want to delete " + $currentNode + "?" )
              -button "Yes" -button "Yes To All" -button "No" -defaultButton "Yes"
              -cancelButton "No" -dismissString "No"`;
      if ( $yesno == "Yes To All" ) {
        $yesAll = 1;
        $yesno = "Yes";
      }
      if ( $yesno == "Yes" ) {
        string $connections[];

        // Disconnect our shader node from the Liquid globals, so they don't
        // get destroyed when we delete the shader (which can happen).
        //
        if ( `attributeQuery -node $currentNode -ex "liquidShaderManager"`) {
          $connections = `listConnections -plugs on ( $currentNode + ".liquidShaderManager" )`;
          disconnectAttr $connections[0] ( $currentNode + ".liquidShaderManager" );
        }

        if ( `attributeQuery -node $currentNode -ex "assignedObjects"`) {
          $connections = `listConnections ( $currentNode + ".assignedObjects" )`;
        }
        string $type = `liquidGetShaderNodeType $currentNode`;
        delete $currentNode;
        string $nodeOn;
        for ( $nodeOn in $connections ) {
          if ( `attributeQuery -node $nodeOn -ex ( ".liquid" + $type + "ShaderNode" )`) {
            deleteAttr ( $nodeOn + ".liquid" + $type + "ShaderNode" );
          }
        }
      }
    }
  }
  liquidFluidUpdateList;
}

global proc liquidFluidRemoveUnusedCMD ()
{
  string $selectedNode[] = `textScrollList -q -ai liquidFluidShaderList`;
  if ( size( $selectedNode ) == 0 ) {
    print "Fluid -> No Shaders Loaded...\n";
  } else {
    string $yesno;
    $yesno = `confirmDialog -title "Confirm" -message ( "Are you sure you want to removed all unused?" )
              -button "Yes" -button "No" -defaultButton "Yes"
              -cancelButton "No" -dismissString "No"`;
    if ( $yesno == "Yes" ) {
      string $currentNode;
      for ( $currentNode in $selectedNode ) {
        string $connections[];
        if ( `attributeQuery -node $currentNode -ex "assignedObjects"`) {
          $connections = `listConnections ( $currentNode + ".assignedObjects" )`;
          if ( size( $connections ) == 0 ) {
            delete $currentNode;
          }
        } else {
          delete $currentNode;
        }
      }
    }
  }
  liquidFluidUpdateList;
}

global proc liquidFluidPreviewSelectedShader()
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    liquidFluidPreviewShader $selectedNode[0];
  }
}

global proc liquidFluidReloadPreviewSwatch( string $shaderNode )
{
  string $realShader = `getAttr ($shaderNode+".rmanShader")`;
  string $previewDir = liquidFluidGetPreviewDir();
  string $imageCtl   = ( "shaderPreview" + $realShader + $shaderNode);
  string $image      = ($previewDir+"/"+$shaderNode+".tif");


  // the preview command outputs a file finishing with ".done"
  // when the render is over. so you know when you can load the image.

  // wait 30 sec max to exit
  float $timeout = `timerX`;
  while ( !`filetest -r ($image+".done")` &&  `timerX -st $timeout` < 30.0 ) {
    // wait 30 seconds max before giving up
  }
  if ( `timerX -st $timeout` < 31.0 ) trace ("render took "+(`timerX -st $timeout`)+" seconds");
  else warning ("preview of \""+$shaderNode+"\" took more than 30 seconds !");

  if ( `filetest -w ($image+".done")` ) sysFile -del ($image+".done");

  // refresh the preview image
  if ( `control -q -ex $imageCtl` ) {
    image -e -image $image $imageCtl;
  }

  // refresh the palette swatch
  string $containerPreviewNode = liquidContainer_getPreviewNodeName( $shaderNode );
  if ( $containerPreviewNode != "" ) {
    trace ("refresh "+$containerPreviewNode+" with "+$image);
    eval `setAttr -type "string" ($containerPreviewNode+".fileTextureName") $image`;
  }

}

global proc liquidFluidPreviewShader( string $shaderNode )
{
  string $realShader = `getAttr ($shaderNode+".rmanShader")`;
  string $image;

  //
  // if we have a ribbox / light > dont render anything
  //
  if ( `getAttr ($shaderNode+".typeId")` == 303126794 ) {
    $image = (liquidGetHome()+"/icons/ribbox.jpg");
    string $imageCtl = ( "shaderPreview" + $realShader + $shaderNode);
    if ( `control -q -ex $imageCtl` ) image -e -image $image $imageCtl;
    return;
  } else if ( `getAttr ($shaderNode+".typeId")` == 303126792 ) {
    $image = (liquidGetHome()+"/icons/light.jpg");
    string $imageCtl = ( "shaderPreview" + $realShader + $shaderNode);
    if ( `control -q -ex $imageCtl` ) image -e -image $image $imageCtl;
    return;
  }

  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  string $previewDir = liquidFluidGetPreviewDir();
  $image = ($previewDir+"/"+$shaderNode+".tif");

  // if a a previous .done file exists remove it.
  if ( `filetest -r ($image+".done")` ) sysFile -del ($image+".done");

  string $args = ( "liquidPreviewShader -shader " + $shaderNode );
  int $previewType  = `getAttr liquidGlobals.previewType`;

  int $primitive;
  if ( !$previewType && `menu -q -ex ("paramMenuPrimitive"+$shaderNode)` ) {
    string $menuItems[] = `menu -q -itemArray ("paramMenuPrimitive"+$shaderNode)`;
    $primitive = 0;
    for ( $item in $menuItems ) {
      if ( `menuItem -q -rb $item` ) break;
      $primitive++;
    }
  } else {
    $primitive = `getAttr liquidGlobals.previewPrimitive`;
  }
  if( $primitive == 1 ) {
    $args += " -cube";
  } else if( $primitive == 2 ) {
    $args += " -cylinder";
  } else if( $primitive == 3 ) {
    $args += " -torus";
  } else if( $primitive == 4 ) {
    $args += " -plane";
  } else if( $primitive == 5 ) {
    $args += " -teapot";
  }

  string $driver = ($previewType)? `getAttr liquidGlobals.previewDisplayDriver`:"tiff";
  if( $driver != "" ) {
    $args += " -dd " + $driver;
  }

  $args += (" -dn \""+$image+"\"");

  int $type = ($previewType)? `getAttr liquidGlobals.previewConnectionType`:0;
  if( $type  == 1 ) {
    $args += " -pipe";
  }

  int $size = ($previewType)? `getAttr liquidGlobals.previewSize`:128;
  $args += " -ds " + $size;

  int $sshn = `getAttr liquidGlobals.shortShaderNames`;
  if( $sshn != 0 ) {
    $args = $args + ( " -sshn " + $sshn );
  }

  string $previewCommand = `getAttr liquidGlobals.previewRenderer`;
  if( $previewCommand != "" ) {
    $args = $args + ( " -renderer " + $previewCommand );
  }
  //print ($args+"\n");
  eval( $args );

  if ( !$previewType ) {
    refresh;
    liquidFluidReloadPreviewSwatch( $shaderNode );
  }

}

global proc liquidSelectNodeCMD()
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  if ( $selectedNode[0] == "" ) {
    print "Fluid -> No Shader Selected...\n";
  } else {
    select $selectedNode;
  }
}

global proc liquidChangeShaderSpec( string $fieldName )
{
  global string $liquidShaderSpec;
  $liquidShaderSpec = `textFieldGrp -q -tx $fieldName`;
  liquidFluidUpdateList;
}

global proc liquidSelectShader( string $nameField )
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  textFieldGrp -e -tx $selectedNode[0] $nameField;
}

global proc liquidRenameShader( string $nameField )
{
  string $selectedNode[] = `textScrollList -q -si liquidFluidShaderList`;
  string $newName = `textFieldGrp -q -tx $nameField`;
  rename $selectedNode[0] $newName;
  //rename the shortshadername as well
  setAttr ($newName+".rmanShader") -type "string" $newName;
  liquidFluidUpdateList();
  textScrollList -e -si $newName liquidFluidShaderList;

  // Containers too !
  liquidContainerWin_iconRename( $selectedNode[0], $newName );
}

global proc liquidShaderBrowserShaderMenu()
{
  string $menu[] = `textScrollList -q -pma liquidFluidShaderList`;
  if ( !size( $menu ) ) return;

  if ( `menuItem -q -ex liquidFluidContainersCreate` ) {
    string $items[] = `popupMenu -q -ia $menu[0]`;
    deleteUI $items;
  }

  if ( !`menuItem -q -ex liquidFluidAssignButton` ) {
    menuItem -parent $menu[0] -label "Assign" -command liquidFluidAssignCMD liquidFluidAssignButton;
    menuItem -parent $menu[0] -label "Unassign" -command liquidFluidUnAssignCMD liquidFluidUnassignButton;

    menuItem -parent $menu[0] -d true liquidFluidShaderSeparator1;
    menuItem -parent $menu[0] -label "Pick Objects" -command liquidFluidPickObjectsCMD liquidFluidPickButton;
    menuItem -parent $menu[0] -label "Pick Shader" -command liquidFluidPickAssignedCMD liquidFluidPickAssignButton;

    menuItem -parent $menu[0] -d true liquidFluidShaderSeparator2;
    menuItem -parent $menu[0] -label "Reload" -command liquidFluidReloadCMD liquidFluidReloadButton;
    menuItem -parent $menu[0] -label "Duplicate" -command liquidFluidDuplicateCMD liquidFluidDuplicateButton;

    menuItem -parent $menu[0] -d true liquidFluidShaderSeparator3;
    menuItem -parent $menu[0] -label "Remove" -command liquidFluidRemoveCMD liquidFluidRemoveButton;
    menuItem -parent $menu[0] -label "Remove Unused" -command liquidFluidRemoveUnusedCMD liquidFluidRemoveUnusedButton;

    menuItem -parent $menu[0] -d true liquidFluidShaderSeparator4;
    menuItem -parent $menu[0] -label "Render" -command "liquid -GL" liquidFluidRender;
    menuItem -parent $menu[0] -label "Select Shader Node" -command liquidSelectNodeCMD liquidFluidSelectNode;

    menuItem -parent $menu[0] -d true liquidFluidShaderSeparator5;
    menuItem -parent $menu[0] -label "Assign To Container" -subMenu true liquidFluidToContainer;

  }

  // refresh container list every time
  string $containers[] = liquidContainer_getContainerList();
  string $items[] = `menu -q -ia liquidFluidToContainer`;
  if ( size( $items ) ) deleteUI $items;
  for ( $c in $containers ) {
    menuItem -parent liquidFluidToContainer -label $c -command ("liquidContainer_fluidAssignToContainer(\""+$c+"\");") ("liquidFluidContainer"+$c);
  }

}

global proc liquidShaderBrowserContainerMenu()
{
  string $menu[] = `textScrollList -q -pma liquidFluidShaderList`;
  if ( !size( $menu ) ) return;

  if ( `menuItem -q -ex liquidFluidAssignButton` ) {
    string $items[] = `popupMenu -q -ia $menu[0]`;
    deleteUI $items;
  }
  if ( !`menuItem -q -ex liquidFluidContainersCreate` ) {
    menuItem -parent $menu[0] -label "Select Container" -command liquidContainer_selectContainer liquidFluidContainersSelect;
    menuItem -parent $menu[0] -d true liquidFluidContainerSeparator0;
    menuItem -parent $menu[0] -label "Create Container" -command liquidContainer_newNode liquidFluidContainersCreate;
    menuItem -parent $menu[0] -d true liquidFluidContainerSeparator1;
    menuItem -parent $menu[0] -label "Import Container" liquidContainer_import;
    menuItem -parent $menu[0] -label "Export Container" liquidContainer_export;
    menuItem -parent $menu[0] -label "Reload Container" liquidFluidContainersReload;
    menuItem -parent $menu[0] -d true liquidFluidContainerSeparator2;
    menuItem -parent $menu[0] -label "Remove Container" -command liquidFluidRemoveCMD liquidFluidContainersRemove;
    menuItem -parent $menu[0] -d true liquidFluidSeparator1;
    menuItem -parent $menu[0] -label "Render Globals..." -command liquidGlobalsWindow liquidFluidRendG;
  }
}


global proc liquidShaderBrowserContext()
{
  string $selection[] = `textScrollList -q -si liquidFluidShaderList`;
  string $types[];
  for ( $s in $selection ) {
    string $type = liquidGetShaderNodeType($s);
    $types[size( $types )] = ($type == "Surface" || $type == "Disp" || $type == "Light" || $type == "Volume")? "Shader":$type;
  }
  string $finalList[] = stringArrayRemoveDuplicates( $types );
  if ( size( $finalList ) == 1 ) {
    switch( $finalList[0] ) {
      case "Shader":
      case "Ribbox":
        liquidShaderBrowserShaderMenu();
        break;
      case "Container":
        liquidShaderBrowserContainerMenu();
        break;
    }
  } else {
    liquidShaderBrowserContainerMenu();
  }
}

global proc string liquidShaderBrowser()
{
  global string $liquidShaderSpec;
  $liquidShaderForm = `formLayout`;
    string $listSpec = `textFieldGrp -tx $liquidShaderSpec -l "Shader Spec"`;
    string $nameField = `textFieldGrp -tx "" -l "Name"`;
    textScrollList -sc ( "liquidSelectShader " + $nameField ) -allowMultiSelection true -dcc liquidFluidEditCMD -dkc liquidFluidRemoveCMD liquidFluidShaderList;
    setParent ..;

  string $shaderListPop = `popupMenu -p liquidFluidShaderList -postMenuCommand liquidShaderBrowserContext`;

  formLayout -e
    -attachForm     $listSpec   "top"   0
    -attachForm     $listSpec   "left"  0
    -attachForm     $listSpec   "right" 0

    -attachControl  $nameField  "top"   0   $listSpec
    -attachForm     $nameField  "left"  0
    -attachForm     $nameField  "right" 0

    -attachControl  liquidFluidShaderList   "top"     0   $nameField
    -attachForm     liquidFluidShaderList   "bottom"  0
    -attachForm     liquidFluidShaderList   "left"    0
    -attachForm     liquidFluidShaderList   "right"   0
    $liquidShaderForm;

  string $command = ( "liquidChangeShaderSpec " + $listSpec );
  textFieldGrp -e -cc $command $listSpec;
  string $command = ( "liquidRenameShader " + $nameField );
  textFieldGrp -e -cc $command $nameField;
  return $liquidShaderForm;
}



global proc liquidFluidBuildBookmarkMenu()
{
  if ( ! `menu -q -ex liquidFluidWindowBookmarkMenu` ) error ("liquidFluidBuildBookmarkMenu: the bookmark menu does not exist.");

  // delete menu items
  string $items[] = `menu -q -itemArray liquidFluidWindowBookmarkMenu`;
  deleteUI $items;

  // rebuild the top part
  menuItem -parent liquidFluidWindowBookmarkMenu -l "Add Bookmark..." -c "liquidFluidAddBookmark";
  menuItem -parent liquidFluidWindowBookmarkMenu -l "Clear Menu" -c "liquidFluidClearBookmarks";
  menuItem -parent liquidFluidWindowBookmarkMenu -divider true ;

  // error checking
  if ( ! `optionVar -exists liquidFluidBookmarks` ) return;

  // rebuild menu
  string $bkm[] = `optionVar -q liquidFluidBookmarks`;

  for ( $b in $bkm ) {
    string $data[] = stringToStringArray( $b, "|");
    string $cmd = ("textFieldGrp -e -tx \""+$data[1]+"\" liquidFileBrowserInDirTextWidget;liquidCurDirCC liquidFileBrowserInFileListWidget liquidFileBrowserInDirListWidget liquidFileBrowserInFileSpecWidget liquidFileBrowserInDirTextWidget;");
    menuItem -parent liquidFluidWindowBookmarkMenu -l $data[0] -ann $data[1] -c $cmd;
  }
}

global proc liquidFluidAddBookmark()
{
  global string $liquidCFD;
  if ( $liquidCFD == "" ) warning ("nothing to Bookmark !");

  string $bookmarkName;
  string $result = `promptDialog  -title "Name your Bookmark"
                                  -message "Enter Name:"
                                  -button "OK" -button "Cancel"
                                  -defaultButton "OK" -cancelButton "Cancel"
                                  -dismissString "Cancel"`;

  if ($result == "OK") {
    $bookmarkName = strip( promptDialog( "-query", "-text" ) );
    $bookmarkName = substituteAllString( $bookmarkName, "|", "_");
    $bookmarkName = ($bookmarkName+"|"+$liquidCFD);
    optionVar -stringValueAppend "liquidFluidBookmarks" $bookmarkName;
    liquidFluidBuildBookmarkMenu();
  }

}

global proc liquidFluidClearBookmarks()
{
  string $result = `confirmDialog -title "Delete All Bookmarks ?" -message "Are you sure?"
                                  -button "Yes" -button "Cancel" -defaultButton "Cancel"
                                  -cancelButton "Cancel" -dismissString "Cancel"`;

  if ( $result == "Cancel" ) return;

  if ( `menu -q -ex liquidFluidWindowBookmarkMenu` ) {

    string $items[] = `menu -q -itemArray liquidFluidWindowBookmarkMenu`;
    deleteUI $items;

    optionVar -remove liquidFluidBookmarks;

    menuItem -parent liquidFluidWindowBookmarkMenu -l "Add Bookmark..." -c "liquidFluidAddBookmark";
    menuItem -parent liquidFluidWindowBookmarkMenu -l "Clear Menu" -c "liquidFluidClearBookmarks";
    menuItem -parent liquidFluidWindowBookmarkMenu -divider true ;

  }
}

global proc liquidFluidSelectBookmark( int $i )
{

}

global proc liquidFluid ()
{
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  liquidCreateScriptNode();

  if ( `window -exists liquidFluidWindow` ) deleteUI liquidFluidWindow;
  if ( !`window -exists liquidFluidWindow` ) {

    window -mb 1 -widthHeight 800 270 -title "Fluid" liquidFluidWindow;

    menu -l "File";
    menuItem -subMenu true -label "RIB Box";
    menuItem -l "New  " -c "liquidNewRibboxNode \"\"";
    setParent -menu ..;
    menuItem -subMenu true -label "Container";
    menuItem -l "New  " -c "liquidContainer_newNode";
    menuItem -label "Import... " -c ("liquidContainer_fileBrowser \"import\" \"\"");
    menuItem -label "Export... " -c ("{;string $t[] = `textScrollList -q -si liquidFluidShaderList`;liquidContainer_fileBrowser \"export\" $t[0];}");
    setParent -menu ..;
    menuItem -d 1;
    menuItem -l "Close" -c "deleteUI liquidFluidWindow";
    setParent ..;
    menu -l "Edit";
    menuItem -l "Search/Replace..." -c "liquidSLEditor";
    menuItem -l "Delete Selected" -c liquidFluidRemoveCMD;
    menuItem -l "Delete Unused" -c liquidFluidRemoveUnusedCMD;
    setParent ..;
    menu -l "Bookmarks" liquidFluidWindowBookmarkMenu;
    menuItem -l "Add Bookmark..." -c "liquidFluidAddBookmark";
    menuItem -l "Clear Menu" -c "liquidFluidClearBookmarks";
    menuItem -divider true ;
    setParent ..;

    formLayout -nd 10 liquidFluidForm;

      string $listPaneLayout = `paneLayout -configuration "vertical2"`;
        string $shaderBrowser = `liquidShaderBrowser`;

        string $shaderExt = "*." + `getAttr liquidGlobals.shaderExt`;
        string $fileBrowser[] = `liquidFileBrowserIn $shaderExt "liquidFluidLoadCMD"`;
      setParent ..;

    // this let's you add the ability of turning the fluid buttons off and just using the popup menus
    string $getINI = `liquidINIGet fluid buttons`;
    if ( $getINI == "true" ) {
      button -label "Assign" -command liquidFluidAssignCMD liquidFluidAssignButton;
      button -label "Pick Objects" -command liquidFluidPickObjectsCMD liquidFluidPickButton;
      button -label "Pick Shader" -command liquidFluidPickAssignedCMD liquidFluidPickAssignButton;

      button -label "Load..." -command ( "liquidFluidLoadCMD " + $fileBrowser[1] ) liquidFluidImportButton;
      button -label "Reload" -command liquidFluidReloadCMD liquidFluidReloadButton;
      button -label "Duplicate" -command liquidFluidDuplicateCMD liquidFluidDuplicateButton;

      button -label "Unassign" -command liquidFluidUnAssignCMD liquidFluidUnassignButton;
      button -label "Remove" -command liquidFluidRemoveCMD liquidFluidRemoveButton;
      button -label "Remove Unused" -command liquidFluidRemoveUnusedCMD liquidFluidRemoveUnusedButton;

      button -label "Render" -command "liquid -GL" liquidFluidRender;
      button -label "Select Shader Node" -command liquidSelectNodeCMD liquidFluidSelectNode;

      setParent ..;

      formLayout -e
        -attachForm liquidFluidImportButton "top" 0
        -attachForm liquidFluidImportButton "left" 0

        -attachForm liquidFluidReloadButton "top" 0
        -attachControl liquidFluidReloadButton "left" 0 liquidFluidImportButton

        -attachForm liquidFluidRemoveButton "top" 0
        -attachControl liquidFluidRemoveButton "left" 0 liquidFluidReloadButton

        -attachForm liquidFluidRemoveUnusedButton "top" 0
        -attachControl liquidFluidRemoveUnusedButton "left" 0 liquidFluidRemoveButton

        -attachForm liquidFluidAssignButton "top" 0
        -attachControl liquidFluidAssignButton "left" 0 liquidFluidRemoveUnusedButton

        -attachForm liquidFluidUnassignButton "top" 0
        -attachControl liquidFluidUnassignButton "left" 0 liquidFluidAssignButton

        -attachForm liquidFluidPickButton "top" 0
        -attachControl liquidFluidPickButton "left" 0 liquidFluidUnassignButton

        -attachForm liquidFluidPickAssignButton "top" 0
        -attachControl liquidFluidPickAssignButton "left" 0 liquidFluidPickButton

        -attachForm liquidFluidRender "top" 0
        -attachControl liquidFluidRender "left" 0 liquidFluidPickAssignButton

        -attachForm liquidFluidSelectNode "top" 0
        -attachControl liquidFluidSelectNode "left" 0 liquidFluidRender

        -attachForm $listPaneLayout "left" 0
        -attachForm $listPaneLayout "bottom" 0
        -attachForm $listPaneLayout "right" 0
        -attachControl $listPaneLayout "top" 0 liquidFluidImportButton

        liquidFluidForm;
    } else {
      setParent ..;

      formLayout -e
        -attachForm $listPaneLayout "left" 0
        -attachForm $listPaneLayout "bottom" 0
        -attachForm $listPaneLayout "right" 0
        -attachForm $listPaneLayout "top" 0

        liquidFluidForm;
    }
  }
  liquidFluidUpdateList;
  liquidFluidBuildBookmarkMenu();
  showWindow liquidFluidWindow;
}

//print "Initialized Fluid...\n";
