//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:  May 12, 2000
//
//
//  Description:
//      Liquids main startup interface.
//
//  Input Arguments:
//
//  Returns:
//

// source all of the needed mel files
source liquidGlobals.mel;
source liquidHelpers.mel;
source liquidFluid.mel;
source liquidShaders.mel;
source liquidRibGen.mel;
source liquidMenuHelp.mel;
source liquidPrefAttribute.mel;
source liquidRibBox.mel;
source liquidReadArchive.mel;
source liquidDelayedReadArchive.mel;
source liquidFileBrowser.mel;
source liquidSubD.mel;
source liquidRenderCurve.mel;


global proc liquidShowAbout()
{
  if (`window -exists liquidAbout`) {
    deleteUI liquidAbout;
  }
  
  // find where the liquid MEL scripts are kept, which is where
  // the Liquid logo image is too
  string $liquidMelPath = match("/.*/", `whatIs liquidStartup`);
  
  window -wh 410 115 -sizeable false -title "About Liquid" liquidAbout;
  formLayout -numberOfDivisions 100 liquidAboutForm;
    rowLayout -nc 2 -cw2 130 220 liquidAboutContent;
      columnLayout;
        image -image ($liquidMelPath + "/liquid.jpg") -width 130 -height 67;
      setParent ..;
      columnLayout;
        text -width 220 -align "center" -l ("Liquid Version: " + `pluginInfo -q -v liquid`) -font "boldLabelFont" -height 25;
        text -width 220 -align "center" -l "Initial code by Colin Doncaster";
        text -width 220 -align "center" -l "http://liquidmaya.sourceforge.net/";
      setParent ..;
    setParent ..;
  setParent ..;
  formLayout -e -attachPosition liquidAbout|liquidAboutForm|liquidAboutContent "left" 0 10 liquidAbout|liquidAboutForm;
  formLayout -e -attachPosition liquidAbout|liquidAboutForm|liquidAboutContent "top"  0 20 liquidAbout|liquidAboutForm;
  
  showWindow liquidAbout;
}


// create the liquid menu interface
global proc liquidCreateMenus()
{
  global string $gMainWindow;

  // keep it nice and clean
  if ( `menu -exists liquidMainWindowMenu` ) deleteUI liquidMainWindowMenu;

  if ( $gMainWindow != "" )
  {
    setParent $gMainWindow;
    menu -label "Liquid" -tearOff true liquidMainWindowMenu;
      menuItem -label "Preview" -ann "Low Res/Detail Preview" -command "liquidPreview";
      menuItem -label "Preview Selected" -ann "Low Res/Detail Preview" -command "liquidPreviewSelected";
      menuItem -label "Render" -ann "Render" -command "liquidRender";
      menuItem -label "Render Globals" -ann "Render Globals" -command "liquidGlobalsWindow";
      menuItem -label "Fluid (Shader Editor)" -ann "Fluid: Shader Editor" -command "liquidFluid";
      menuItem -label "Helpers" -subMenu true -tearOff true;
        menuItem -label "View Last Generated Rib" -command liquidViewLastRib;
        menuItem -label "View Last Alfred Script" -command liquidViewLastAlfred;
        menuItem -d true;
        menuItem -label "Make Objects Matte" -command liquidMakeMatteObjects;
        menuItem -label "UnMake Objects Matte" -command liquidUnMakeMatteObjects;
        menuItem -d true;
        menuItem -label "Add Additional Coordinate System" -command liquidAddCoordSystem;
      setParent -menu ..;
      menuItem -label "External RIB" -subMenu true -tearOff true;
        menuItem -label "Add RibGen" -command liquidAssignRibGenCMD;
        menuItem -label "Remove RibGen" -command liquidRibGenDelete;
        menuItem -label "Add Rib" -command liquidAddRibBox -ann "Add Additional Rib Node";
        menuItem -label "Remove Rib" -command liquidDeleteRibBox -ann "Remove Additional Rib Node";
        menuItem -label "Add RiReadArchive" -command liquidReadArchive -ann "Add A RiReadArchive Node";
        menuItem -label "Remove RiReadArchive" -command liquidDeleteReadArchive -ann "Remove A RiReadArchive Node";
        menuItem -label "Add DelayedReadArchive" -command liquidDelayedReadArchive;
        menuItem -label "Remove DelayedReadArchive" -command liquidDeleteDelayedReadArchive;
        menuItem -divider true;
        menuItem -label "Export Selected as RibArchive" -ann "Write a RIB file for selected object only" -command "liquid -ra -sel";
        menuItem -label "Export Selected as RibArchive without Shaders" -enable false -ann "Write a RIB file for selected object only without shaders";
      setParent -menu ..;
      menuItem -label "Attributes" -subMenu true -tearOff true;
        menuItem -label "Freeze __Pref" -command liquidAddPrefAttribute -ann "Lock __Pref Attribute To Current Position";
        menuItem -label "Delete __Pref" -command liquidDeletePrefAttribute -ann "Delete __Pref Attribute";
        menuItem -d true;
        menuItem -label "Make Subdivision Surface" -command liquidMakeSubD -ann "Make Selected Mesh A Subdivision Surface";
        menuItem -label "Remove Subdivision Surface" -command liquidUnMakeSubD -ann "Remove Subdivision Surface From Selected Meshes";
        menuItem -d true;
        menuItem -label "Make RenderCurve" -command liquidMakeRenderCurve -ann "Make Selected Nurbs Curves renderable";
        menuItem -label "Remove RenderCurve" -command liquidUnMakeRenderCurve -ann "Remove rendering from Selected Nurbs Curves";
        menuItem -d true;
        menuItem -label "Add Transformation Blur Attribute" -command liquidMakeTBlur -ann "Attach a custom transformation blur attribute to the selected node";
        menuItem -label "Remove Transformation Blur Attribute" -command liquidUnMakeTBlur -ann "Remove a custom transformation blur attribute to the selected node";
        menuItem -label "Add Deformation Blur Attribute" -command liquidMakeDBlur -ann "Attach a custom deformation blur attribute to the selected node";
        menuItem -label "Remove Deformation Blur Attribute" -command liquidUnMakeDBlur -ann "Remove a custom deformation blur attribute to the selected node";
        menuItem -label "Add ZThreshold" -command liquidAddZThres -ann "Add a ZThreshold control to selected lights.";
        menuItem -label "Remove ZThreshold" -command liquidRemoveZThres -ann "Remove a ZThreshold control from selected lights.";
      setParent -menu ..;
      menuItem -label "Clear Liquid" -ann "Clean Up Liquid Nodes In Scene" -command liquidCleanup;
      menuItem -label "Help" -ann "HTML Help" -command "liquidMenuHelp";
      menuItem -label "About" -command "liquidShowAbout";
  }
}

// destroy the liquid menu interface
global proc liquidRemoveMenus()
{
  deleteUI liquidMainWindowMenu;
}

// command called when the preview menu item is picked
global proc liquidRender()
{
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  liquid -GL;
}

global proc liquidPreview()
{
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  liquid -GL -s 1 -sr 3;
}

global proc liquidRenderSelected()
{
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  liquid -GL -sel;
}

global proc liquidPreviewSelected()
{
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  liquid -GL -s 1 -sr 3 -sel;
}

global proc string liquidGetSceneName()
{
  string $fullName = `file -q -a`;
  string $choppedName[];
  tokenize $fullName "/" $choppedName;
  string $shortName = $choppedName[ size( $choppedName ) - 1 ];
  tokenize $shortName "." $choppedName;
  $shortName = $choppedName[0];
  return $shortName;
}

global proc liquidStartup()
{
  liquidCreateMenus();
}

global proc liquidMakeDBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "deformationBlur"`) {
      addAttr -ln deformationBlur -at bool $current;
    }
    if ( `attributeQuery -node $current -ex "deformationBlur"`) {
      setAttr ( $current + ".deformationBlur" ) true;
    }
  }
}

global proc liquidUnMakeDBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "deformationBlur"`) {
      deleteAttr ( $current + ".deformationBlur" );
    }
  }
}

global proc liquidMakeTBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "transformationBlur"`) {
      addAttr -ln transformationBlur -at bool $current;
    }
    if ( `attributeQuery -node $current -ex "transformationBlur"`) {
      setAttr ( $current + ".transformationBlur" ) true;
    }
  }
}

global proc liquidUnMakeTBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "transformationBlur"`) {
      deleteAttr ( $current + ".transformationBlur" );
    }
  }
}

global proc liquidAddZThres() {
  string $selected[] = `ls -dag -sl -lights`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "ribOptions"`) {
      addAttr -ln ribOptions -dt "string" $current;
    }
    if ( `attributeQuery -node $current -ex "ribOptions"`) {
      setAttr ( $current + ".ribOptions" ) -type "string" "Option \"limits\" \"zthreshold\" [ 1.0 1.0 1.0 ]";
    }
  }
}

global proc liquidRemoveZThres() {
  string $selected[] = `ls -dag -sl -lights`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "ribOptions"`) {
      deleteAttr ( $current + ".ribOptions" );
    }
  }
}
