//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:  June 20, 2000
//
//
//  Description:
//      Liquids Surface Shader Interface.
//
//  Input Arguments:
//
//  Returns:
//

global string $liquidShadersLastDirectory = "";

global proc string liquidGetShaderNodeType( string $node ) 
{
  string $returnValue;
  int $typeId = `getAttr ( $node + ".typeId" ) `;
  string $type = `substring $node 1 10`;
  if( ( $type == "liquidSurf" ) || ( $typeId == 303126790 ) ) {
    $returnValue = "Surface";
  }
  if( ( $type == "liquidDisp" ) || ( $typeId == 303126791 ) ) {
    $returnValue = "Disp";
  }
  if( ( $type == "liquidLigh" ) || ( $typeId == 303126792 ) ) {
    $returnValue = "Light";
  }
  if( ( $type == "liquidVolu" ) || ( $typeId == 303126793 ) ) {
    $returnValue = "Volume";
  }
  return $returnValue;	
}

global proc liquidAssignShaderNode( string $node, string $shaderNode ) 
{
  string $type = `liquidGetShaderNodeType $shaderNode`;

  if ( !`attributeQuery -node $node -ex ( "liquid" + $type + "ShaderNode" )`) {
    addAttr -ln ( "liquid" + $type + "ShaderNode" ) -at message $node;
  }
  if ( !`attributeQuery -node $shaderNode -ex "assignedObjects"`) {
    addAttr -m -ln "assignedObjects" -at message $shaderNode;
  }
  connectAttr -f ( $shaderNode + ".assignedObjects" ) ( $node + ".liquid" + $type + "ShaderNode" );
}

global proc string liquidNewShaderNode( string $filename )
{
  // Get the shortest usable project path.
  int $i;
  string $returnValue = "";

  string $shortName = $filename;  // this will end up as the shader file name without the path
  string $longName; // this will end up with the shader file name with the full path name
  string $subShaderName[];
  tokenize $shortName "." $subShaderName;
  $longName = $subShaderName[0];
  // this next test has to be performed incase path names have dots in them, like prman3.9 etc.
  for ($i = 1; $i < ( size($subShaderName) - 1 ); $i++)
  {
    $longName = ( $longName + "." + $subShaderName[$i] );
  }
  tokenize $longName "/" $subShaderName;  
  $shortName = $subShaderName[( size($subShaderName) - 1)];

  // get the correct name for the shader
  // get the correct shader type - possibilities are surface, light, displacement and volume
  string $shaderType = `liquidGetSloInfo -type $filename`;

  // work out the new shader nodes name an
  string $newNodeName = "" ;
  $newNodeName = $shortName;
  if ( `objExists( $newNodeName )` ) {
    string $testNodeName = $newNodeName;
    for( $i = 1;; $i++ ) {
      string $cNum = $i;
      $testNodeName = ( $newNodeName + $cNum );
      string $testList[] = `ls $testNodeName`;
      if ( !`objExists( $testNodeName )` ) break;
    }
    $newNodeName = $testNodeName;
  }

  createNode "oldBlindDataBase" -n $newNodeName;
  if ( $shaderType == "surface" ) {
    setAttr ( $newNodeName + ".typeId" ) 303126790;
  } else if ( $shaderType == "displacement" ) {
    setAttr ( $newNodeName + ".typeId" ) 303126791;
  } else if ( $shaderType == "light" ) {
    setAttr ( $newNodeName + ".typeId" ) 303126792;
  } else if ( $shaderType == "volume" ) {
    setAttr ( $newNodeName + ".typeId" ) 303126793;
  } else {
    delete $newNodeName;
    error "Unrecognized Shader Type";
  }

  addAttr -ln "rmanShaderLong" -dt "string" $newNodeName;
  addAttr -ln "rmanShader" -dt "string" $newNodeName;
  addAttr -ln "liquidShaderManager" -at message $newNodeName;
  setAttr ( $newNodeName + ".rmanShader" ) -type "string" $shortName;
  setAttr ( $newNodeName + ".rmanShaderLong" ) -type "string" $filename;

  liquidAttachParams $newNodeName;

  $returnValue = $newNodeName;

  // attach the new shader node to liquid globals so liquid can keep track of it.
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  if ( $shaderType == "surface" ) {
    if ( !`attributeQuery -node "liquidGlobals" -ex "liquidSurfaceShaders"`) {
      addAttr -ln "liquidSurfaceShaders" -at message liquidGlobals;
    }
    connectAttr -f "liquidGlobals.liquidSurfaceShaders" ( $newNodeName + ".liquidShaderManager" );
  }
  if ( $shaderType == "displacement" ) {
    if ( !`attributeQuery -node "liquidGlobals" -ex "liquidDisplacementShaders"`) {
      addAttr -ln "liquidDisplacementShaders" -at message liquidGlobals;
    }
    connectAttr -f "liquidGlobals.liquidDisplacementShaders" ( $newNodeName + ".liquidShaderManager" );
  }
  if ( $shaderType == "light" ) {
    if ( !`attributeQuery -node "liquidGlobals" -ex "liquidLightShaders"`) {
      addAttr -ln "liquidLightShaders" -at message liquidGlobals;
    }
    connectAttr -f "liquidGlobals.liquidLightShaders" ( $newNodeName + ".liquidShaderManager" );
  }
  if ( $shaderType == "volume" ) {
    if ( !`attributeQuery -node "liquidGlobals" -ex "liquidVolumeShaders"`) {
      addAttr -ln "liquidVolumeShaders" -at message liquidGlobals;
    }
    connectAttr -f "liquidGlobals.liquidVolumeShaders" ( $newNodeName + ".liquidShaderManager" );
  }
  return $returnValue;
}

global proc string liquidDuplicateShaderNode( string $nodename )
{
  string $shaderFileName = `getAttr ( $nodename + ".rmanShaderLong" )`;

  string $currentNodeName = `liquidNewShaderNode $shaderFileName`;

  string $newNodeName = ( $nodename + "Duplicate" );
  if ( `objExists( $newNodeName )` ) {
    string $testNodeName = $newNodeName;
    for( $i = 1;; $i++ ) {
      string $cNum = $i;
      $testNodeName = ( $newNodeName + $cNum );
      string $testList[] = `ls $testNodeName`;
      if ( !`objExists( $testNodeName )` ) break;
    }
    $newNodeName = $testNodeName;
  }

  $currentNodeName = `rename $currentNodeName $newNodeName`;

  string $nodeType = `liquidGetShaderNodeType $currentNodeName`;
  if ( $nodeType == "Surface" ) { 
    if (`attributeQuery -n $currentNodeName -ex ( "color" ) `) {
      float $redValue = `getAttr ( $nodename + ".red" )`;
      float $blueValue = `getAttr ( $nodename + ".blue" )`;
      float $greenValue = `getAttr ( $nodename + ".green" )`;
      setAttr ( $currentNodeName + ".color" ) -type double3 $redValue $greenValue $blueValue;
    }
    if (`attributeQuery -n $currentNodeName -ex ( "opacity" ) `) {
      float $opacValue = `getAttr ( $nodename + ".opacity" )`;
      setAttr ( $currentNodeName + ".opacity" ) $opacValue;
    }
  }

  if ( $nodeType == "Light" ) {
    if (`attributeQuery -n $currentNodeName -ex ( "shadowCamera" ) `) {
      string $shadowCamValue = `getAttr ( $nodename + ".shadowCamera" )`;
      setAttr ( $currentNodeName + ".shadowCamera" ) -type "string" $shadowCamValue;
    }
    if (`attributeQuery -n $currentNodeName -ex ( "deepShadows" ) `) {
      int $deepShadowsValue = `getAttr ( $nodename + ".deepShadows" )`;
      setAttr ( $currentNodeName + ".deepShadows" ) $deepShadowsValue;
    }
    if (`attributeQuery -n $currentNodeName -ex ( "pixelSamples" ) `) {
      int $pixelSamplesValue = `getAttr ( $nodename + ".pixelSamples" )`;
      setAttr ( $currentNodeName + ".pixelSamples" ) $pixelSamplesValue;
    }
    if (`attributeQuery -n $currentNodeName -ex ( "volumeInterpretation" ) `) {
      int $volumeInterpretation = `getAttr ( $nodename + ".volumeInterpretation" )`;
      setAttr ( $currentNodeName + ".volumeInterpretation" ) $volumeInterpretation;
    }
  }

  if ( $nodeType == "Disp" || $nodeType == "Surface" ) {
    if (`attributeQuery -n $currentNodeName -ex ( "displacementBound" ) `) {
      float $displaceValue = `getAttr ( $nodename + ".displacementBound" )`;
      setAttr ( $currentNodeName + ".displacementBound" ) $displaceValue;
    }
  }

  int $numOfArgs = `liquidGetSloInfo -numParam $shaderFileName`;
  for ( $i = 0; $i < $numOfArgs ; $i++ )
  {
    string $argName     = `liquidGetSloInfo -argName $i $shaderFileName`;
    string $argType     = `liquidGetSloInfo -argType $i $shaderFileName`;
    string $argDetail   = `liquidGetSloInfo -argDetail $i $shaderFileName`;
    int    $argArrayLen = `liquidGetSloInfo -argArraySize $i $shaderFileName`;
    if ( `attributeQuery -n $currentNodeName -ex $argName` )
    {
      if ( $argType == "float" ) {
        if ( $argArrayLen > 0 )
        {
          float $argDefault[] = `getAttr ( $nodename + "." + $argName )`;
          int $size = size($argDefault);
          string $fDefault = "";
          int $k;
          for ( $k = 0; $k < $size; $k++ ) {
            $fDefault = $fDefault + $argDefault[$k] + " ";
          }
          string $nodeName = $currentNodeName + "." + $argName;
          eval setAttr $nodeName -type doubleArray $size $fDefault;
        } else { 
          float $defaultVal = `getAttr ( $nodename + "." + $argName )`;
          setAttr ( $currentNodeName + "." + $argName ) $defaultVal;
        }
      }
      if ( $argType == "string" ) {
        string $argDefault = `getAttr ( $nodename + "." + $argName )`;
        setAttr ( $currentNodeName + "." + $argName ) -type "string" $argDefault;
      }
      if ( $argType == "color" || $argType == "point" || $argType == "vector" || $argType == "normal" ) {
        float $argDefault[] = `getAttr ( $nodename + "." + $argName )`;
        setAttr ( $currentNodeName + "." + $argName ) -type double3 $argDefault[0] $argDefault[1] $argDefault[2];
      }
    }
  }

  return $currentNodeName;
}

print "Initialized Liquid Shaders Interface...\n";
