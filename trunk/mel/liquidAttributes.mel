
// Shading group -----------------------------------------------

global proc liquidCreateShadingAttributes()
{
  liquidCreateShadingRateAttribute();
  liquidCreateRasterOrientedDicingAttribute( 1 );
  liquidCreateColorAttribute();
  liquidCreateOpacityAttribute();
  liquidCreateCameraHitModeAttribute();
  liquidCreateMatteAttribute();
}


global proc liquidDeleteShadingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $attr[] = {  "liqShadingRate",
                      "liqDiceRasterOrient", "liqColor", "liqOpacity",
                      "liqMatte", "liqHitModeCamera"
                    };
  string $currentNode;

  for ( $currentNode in $nodes ) {

    for ( $a in $attr ) {
      if ( `attributeQuery -node $currentNode -ex $a` ) {
        // philippe: this is a fix to deal with a bug with compound attributes
        renameAttr ( $currentNode + "."+$a ) "TO_BE_DELETED";
        deleteAttr ( $currentNode + ".TO_BE_DELETED" );
      }
    }

  }
}

global proc liquidCreateShadingRateAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqShadingRate"` ) {
      addAttr -k true -ln "liqShadingRate" -at "float" -dv 1.0 -min 0.001 $currentNode;
    }
  }
}


global proc liquidCreateRasterOrientedDicingAttribute( int $val )
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqDiceRasterOrient"` ) {
      addAttr -k true -ln "liqDiceRasterOrient" -at bool -dv $val $currentNode;
    }
  }
}


global proc liquidCreateColorAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqColor"` ) {
      addAttr -ln "liqColor" -uac -at "float3" -k true $currentNode;
      addAttr -ln "red" -at "float"  -dv 1 -k true -parent "liqColor";
      addAttr -ln "green" -at "float" -dv 1 -k true -parent "liqColor";
      addAttr -ln "blue" -at "float" -dv 1 -k true -parent "liqColor";
    }
  }
}


global proc liquidCreateOpacityAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqOpacity"` ) {
      addAttr -ln "liqOpacity" -uac -at "float3" $currentNode;
      addAttr -ln "red1" -at "float" -dv 1 -parent "liqOpacity";
      addAttr -ln "green1" -at "float" -dv 1 -parent "liqOpacity";
      addAttr -ln "blue1" -at "float" -dv 1 -parent "liqOpacity";
    }
  }
}


global proc liquidCreateMatteAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqMatte"` ) {
      addAttr -k true -ln "liqMatte" -at bool -dv 1 $currentNode;
    }
  }
}

// Ray Tracing group -----------------------------------------------

global proc liquidCreateObjectRayTracingAttributes()
{
  liquidCreateVisibilityTraceAttribute();
  liquidCreateSampleMotionAttribute;
  liquidCreateTraceDisplacementsAttribute;
  liquidCreateTraceBiasAttribute;
  liquidCreateTransmissionAttribute();
  liquidCreateMaxDiffuseDepthAttribute;
  liquidCreateMaxSpecularDepthAttribute;
  liquidCreateHitModeDiffuseAttribute();
  liquidCreateHitModeSpecularAttribute();
  liquidCreateHitModeTransmissionAttribute();
}


global proc liquidCreateLightRayTracingAttributes()
{
  liquidCreateSampleMotionAttribute;
  liquidCreateTraceDisplacementsAttribute;
  liquidCreateTraceBiasAttribute;
}


global proc liquidDeleteRayTracingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $attr[] = {  "liqVisibilityTrace",
                      "liqTraceSampleMotion", "liqTraceDisplacements", "liqTraceBias",
                      "liqMaxDiffuseDepth", "liqMaxSpecularDepth",
                      "liqVisibilityDiffuse", "liqVisibilitySpecular", "liqVisibilityTransmission", "liqVisibilityNewTransmission",
                      "liqHitModeDiffuse", "liqHitModeSpecular", "liqHitModeTransmission"
                    };
  string $currentNode;
  for ( $currentNode in $nodes ) {
    for ( $a in $attr ) {
      if ( `attributeQuery -node $currentNode -ex $a` ) {
        deleteAttr ( $currentNode + "."+$a );
      }
    }
  }
}

global proc liquidCreateSampleMotionAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqTraceSampleMotion"` ) {
      addAttr -ln "liqTraceSampleMotion" -at bool $currentNode;
    }
  }
}


global proc liquidCreateTraceDisplacementsAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqTraceDisplacements"` ) {
      addAttr -ln "liqTraceDisplacements" -at bool $currentNode;
    }
  }
}


global proc liquidCreateTraceBiasAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqTraceBias"` ) {
      addAttr -ln "liqTraceBias" -at "float" -dv 0.01 $currentNode;
    }
  }
}


global proc liquidCreateMaxDiffuseDepthAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqMaxDiffuseDepth"` ) {
      addAttr -ln "liqMaxDiffuseDepth" -at "short" -dv 1 $currentNode;
    }
  }
}

global proc liquidCreateMaxSpecularDepthAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqMaxSpecularDepth"` ) {
      addAttr -ln "liqMaxSpecularDepth" -at "short" -dv 3 $currentNode;
    }
  }
}

global proc liquidCreateTransmissionAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );
  if ( $newStyle ) return;
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqVisibilityTransmission"` ) {
      addAttr -ln "liqVisibilityTransmission" -at enum -enumName "Transparent=0:Opaque=1:Use Opacity=2:From Shader=3" -dv 1  $currentNode;
    }
  }
}

// Visibility group --------------------------------------- ###

global proc liquidCreateVisibilityAttributes()
{
  liquidCreateVisibilityCameraAttribute;
  liquidCreateVisibilityTraceAttribute;
  liquidCreateTransmissionAttribute;
}


global proc liquidDeleteVisibilityAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {

    if ( `attributeQuery -node $currentNode -ex "liqVisibilityCamera"` ) {
      deleteAttr ( $currentNode + ".liqVisibilityCamera" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqVisibilityTrace"` ) {
      deleteAttr ( $currentNode + ".liqVisibilityTrace" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqVisibilityTransmission"` ) {
      deleteAttr ( $currentNode + ".liqVisibilityTransmission" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqVisibilityDiffuse"` ) {
      deleteAttr ( $currentNode + ".liqVisibilityDiffuse" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqVisibilitySpecular"` ) {
      deleteAttr ( $currentNode + ".liqVisibilitySpecular" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqVisibilityNewTransmission"` ) {
      deleteAttr ( $currentNode + ".liqVisibilityNewTransmission" );
    }
  }
}

global proc liquidCreateVisibilityCameraAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqVisibilityCamera"` ) {
      addAttr -ln "liqVisibilityCamera" -at bool -k true -dv 1 $currentNode;
    }
  }
}

global proc liquidCreateVisibilityDiffuse()
{
  if ( !liquidGlobalsFeatureQuery( "AdvancedVisibility" ) ) return;

  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqVisibilityDiffuse"` ) {
      addAttr -ln "liqVisibilityDiffuse" -at bool -k true $currentNode;
    }
  }
}

global proc liquidCreateVisibilitySpecular()
{
  if ( !liquidGlobalsFeatureQuery( "AdvancedVisibility" ) ) return;

  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqVisibilitySpecular"` ) {
      addAttr -ln "liqVisibilitySpecular" -at bool -k true $currentNode;
    }
  }
}

global proc liquidCreateVisibilityTransmission()
{
  if ( !liquidGlobalsFeatureQuery( "AdvancedVisibility" ) ) liquidCreateTransmissionAttribute();
  else {
    string $nodes[] = `ls -tr -sl`;
    string $currentNode;
    for ( $currentNode in $nodes ) {
      if ( !`attributeQuery -node $currentNode -ex "liqVisibilityNewTransmission"` ) {
        addAttr -ln "liqVisibilityNewTransmission" -at bool -k true $currentNode;
      }
    }
  }
}

global proc liquidCreateVisibilityTraceAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );;

  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  if ( $newStyle ) {
    for ( $currentNode in $nodes ) {
      if ( !`attributeQuery -node $currentNode -ex "liqVisibilityDiffuse"` ) {
        addAttr -ln "liqVisibilityDiffuse" -at bool $currentNode;
      }
      if ( !`attributeQuery -node $currentNode -ex "liqVisibilitySpecular"` ) {
        addAttr -ln "liqVisibilitySpecular" -at bool $currentNode;
      }
       if ( !`attributeQuery -node $currentNode -ex "liqVisibilityNewTransmission"` ) {
        addAttr -ln "liqVisibilityNewTransmission" -at bool $currentNode;
      }
    }
  } else {
    for ( $currentNode in $nodes ) {
      if ( !`attributeQuery -node $currentNode -ex "liqVisibilityTrace"` ) {
        addAttr -ln "liqVisibilityTrace" -at bool -dv 1 $currentNode;
      }
    }
  }
}


// GI group -----------------------------------------------

global proc liquidCreateGlobalIlluminationAttributes()
{
  liquidCreateIrradianceShadingRateAttribute;
  liquidCreateIrradianceSamplesAttribute;
  liquidCreateIrradianceMaxErrorAttribute;
  liquidCreateIrradianceMaxPixelDistAttribute;
  liquidCreateIrradianceHandleAttribute;
  liquidCreateIrradianceFileModeAttribute;
}


global proc liquidDeleteGlobalIlluminationAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  string $attr[] = {"liqIrradianceShadingRate", "liqIrradianceNSamples", "liqIrradianceMaxError", "liqIrradianceMaxPixelDist"};
  for ( $currentNode in $nodes ) {
    for ( $a in $attr ) {
      if ( `attributeQuery -node $currentNode -ex $a` ) {
        deleteAttr ( $currentNode + "."+$a );
      }
    }
  }
}

global proc liquidCreateIrradianceShadingRateAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceShadingRate"` ) {
      addAttr -ln "liqIrradianceShadingRate" -at "float" -dv 1 $currentNode;
    }
  }
}


global proc liquidCreateIrradianceSamplesAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceNSamples"` ) {
      addAttr -ln "liqIrradianceNSamples" -at short -dv 64 -min 1 -smx 256 $currentNode;
    }
  }
}


global proc liquidCreateIrradianceMaxErrorAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceMaxError"` ) {
      addAttr -ln "liqIrradianceMaxError" -at "float" -dv 0.5 -min 0 -max 1 $currentNode;
    }
  }
}

global proc liquidCreateIrradianceMaxPixelDistAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceMaxPixelDist"` ) {
      addAttr -ln "liqIrradianceMaxPixelDist" -at "float" -dv 30 -min -1 -smx 100 $currentNode;
    }
  }
}

global proc liquidCreateIrradianceHandleAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceHandle"` ) {
      addAttr -ln "liqIrradianceHandle" -dt "string" $currentNode;
    }
  }
}

global proc liquidCreateIrradianceFileModeAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqIrradianceFileMode"` ) {
      addAttr -ln "liqIrradianceFileMode" -at enum -enumName "None=0:Read=1:Write=2:ReadWrite=3" $currentNode;
    }
  }
}

// Photon group -----------------------------------------------

global proc liquidCreatePhotonAttributes()
{
  liquidCreateGlobalMapAttribute;
  liquidCreateCausticMapAttribute;
  liquidCreatePhotonEstimatorAttribute;
  liquidCreatePhotonShadingModelAttribute;
}


global proc liquidDeletePhotonAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqPhotonGlobalMap"` ) {
      deleteAttr ( $currentNode + ".liqPhotonGlobalMap" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqPhotonCausticMap"` ) {
      deleteAttr ( $currentNode + ".liqPhotonCausticMap" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqPhotonEstimator"` ) {
      deleteAttr ( $currentNode + ".liqPhotonEstimator" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqPhotonShadingModel"` ) {
      deleteAttr ( $currentNode + ".liqPhotonShadingModel" );
    }
  }
}

global proc liquidCreateGlobalMapAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqPhotonGlobalMap"` ) {
      addAttr -ln "liqPhotonGlobalMap" -dt "string" $currentNode;
    }
  }
}


global proc liquidCreateCausticMapAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqPhotonCausticMap"` ) {
      addAttr -ln "liqPhotonCausticMap" -dt "string" $currentNode;
    }
  }
}


global proc liquidCreatePhotonEstimatorAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqPhotonEstimator"` ) {
      addAttr -ln "liqPhotonEstimator" -at "float" -dv 500 -min 0 $currentNode;
    }
  }
}

global proc liquidCreatePhotonShadingModelAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqPhotonShadingModel"` ) {
      addAttr -ln "liqPhotonShadingModel" -at enum -enumName "Matte=0:Glass=1:Water=2:Chrome=3:Transparent=4:Dielectric=5" $currentNode;
    }
  }
}


// Motion blur group -----------------------------------------------

global proc liquidCreateMotionBlurAttributes()
{
  liquidCreateTransformationBlurAttribute;
  liquidCreateDeformationBlurAttribute;
  liquidCreateMotionSamplesAttribute;
  liquidCreateMotionFactorAttribute;
}


global proc liquidDeleteMotionBlurAttributes()
{
    string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqTransformationBlur"` ) {
      deleteAttr ( $currentNode + ".liqTransformationBlur" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDeformationBlur"` ) {
      deleteAttr ( $currentNode + ".liqDeformationBlur" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqMotionSamples"` ) {
      deleteAttr ( $currentNode + ".liqMotionSamples" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqMotionFactor"` ) {
      deleteAttr ( $currentNode + ".liqMotionFactor" );
    }
  }
}

global proc liquidCreateTransformationBlurAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqTransformationBlur"` ) {
      addAttr -ln "liqTransformationBlur" -at bool -dv true $currentNode;
    }
  }
}


global proc liquidCreateDeformationBlurAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqDeformationBlur"` ) {
      addAttr -ln "liqDeformationBlur" -at bool -dv true $currentNode;
    }
  }
}


global proc liquidCreateMotionSamplesAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqMotionSamples"` ) {
      addAttr -ln "liqMotionSamples" -at byte -dv 2 -min 2 -max 16 $currentNode;
    }
  }
}

global proc liquidCreateMotionFactorAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqMotionFactor"` ) {
      addAttr -ln "liqMotionFactor" -at "float" -dv 1 -min 0 -smx 16 $currentNode;
    }
  }
}


// RIB group -----------------------------------------------

global proc liquidCreateRIBAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqRIBBox"` ) {
      addAttr -ln "liqRIBBox" -dt "string" $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqRIBGenerator"` ) {
      addAttr -ln "liqRIBGenerator" -dt "string" $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqRIBReadArchive"` ) {
      addAttr -ln "liqRIBReadArchive" -dt "string" $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqRIBDelayedReadArchive"` ) {
      addAttr -ln "liqRIBDelayedReadArchive" -dt "string" $currentNode;
    }
    if ( !`attributeQuery -node $currentNode -ex "liqRIBDelayedReadArchiveBBoxScale"` ) {
      addAttr -ln "liqRIBDelayedReadArchiveBBoxScale" -at "double" -dv 1.0 -smn 0.0 -smx 2.0 $currentNode;
    }
  }
}


global proc liquidDeleteRIBAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  string $attr[]=  {"liqRIBBox", "liqRIBGenerator", "liqRIBReadArchive", "liqRIBDelayedReadArchive", "liqRIBDelayedReadArchiveBBoxScale"};
  for ( $currentNode in $nodes ) {
    for ( $a in $attr ) {
      if ( `attributeQuery -node $currentNode -ex $a` ) {
        deleteAttr ( $currentNode + "."+$a );
      }
    }
  }
}

global proc liquidCreateRIBBoxAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqRIBBox"` ) {
      addAttr -ln "liqRIBBox" -dt "string" $currentNode;
    }
  }
}


global proc liquidCreateRIBGeneratorAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqRIBGenerator"` ) {
      addAttr -ln "liqRIBGenerator" -dt "string" $currentNode;
    }
  }
}


global proc liquidCreateReadArchiveAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqRIBReadArchive"` ) {
      addAttr -ln "liqRIBReadArchive" -dt "string" $currentNode;
    }
  }
}


global proc liquidCreateDelayedReadArchiveAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqRIBDelayedReadArchive"` ) {
      addAttr -ln "liqRIBDelayedReadArchive" -dt "string" $currentNode;
    }
    if ( !`attributeQuery -node $currentNode -ex "liqRIBDelayedReadArchiveBBoxScale"` ) {
      addAttr -ln "liqRIBDelayedReadArchiveBBoxScale" -at "double" -dv 1.0 -smn 0.0 -smx 2.0 $currentNode;
    }
  }
}


// Instancing group -----------------------------------------------

global proc liquidCreateInstancingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqInheritPPColor"` ) {
      addAttr -ln "liqInheritPPColor" -at bool $currentNode;
    }
  }
}


global proc liquidDeleteInstancingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqInheritPPColor"` ) {
      deleteAttr ( $currentNode + ".liqInheritPPColor" );
    }
  }
}


// 3DL SSS group -----------------------------------------------

global proc liquidCreate3DelightSubSurfaceScatteringAttributes()
{
  string $nodes[] = `ls -typ transform -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSGroupName"` ) {
      addAttr -ln "liqDelightSSGroupName" -dt "string"  $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSScattering"` ) {
      addAttr -ln "liqDelightSSScattering" -at "float3"  $currentNode;
      addAttr -ln "SSScattering1" -at "float" -parent "liqDelightSSScattering";
      addAttr -ln "SSScattering2" -at "float" -parent "liqDelightSSScattering";
      addAttr -ln "SSScattering3" -at "float" -parent "liqDelightSSScattering";
    }

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSAbsorption"` ) {
      addAttr -ln "liqDelightSSAbsorption" -at "float3"  $currentNode;
      addAttr -ln "SSAbsorption1" -at "float" -parent "liqDelightSSAbsorption";
      addAttr -ln "SSAbsorption2" -at "float" -parent "liqDelightSSAbsorption";
      addAttr -ln "SSAbsorption3" -at "float" -parent "liqDelightSSAbsorption";
    }

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSRefraction"` ) {
      addAttr -ln "liqDelightSSRefraction" -at "float" $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSScale"` ) {
      addAttr -ln "liqDelightSSScale" -at "float" -dv 1.0 $currentNode;
    }

    if ( !`attributeQuery -node $currentNode -ex "liqDelightSSShadingRate"` ) {
      addAttr -ln "liqDelightSSShadingRate" -at "float" -dv 1.0 -min 0.001 $currentNode;
    }

  }
}


global proc liquidDelete3DelightSubSurfaceScatteringAttributes()
{
  string $nodes[] = `ls -typ transform -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSGroupName"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSGroupName" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSScattering"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSScattering" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSAbsorption"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSAbsorption" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSRefraction"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSRefraction" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSScale"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSScale" );
    }

    if ( `attributeQuery -node $currentNode -ex "liqDelightSSShadingRate"` ) {
      deleteAttr ( $currentNode + ".liqDelightSSShadingRate" );
    }

  }
}


// Visibility group -----------------------------------------------

global proc liquidCreateLiquidInvisibleAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqInvisible"` ) {
      addAttr -ln "liqInvisible" -at bool -dv 1 $currentNode;
    }
  }
}


global proc liquidDeleteLiquidInvisibleAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqInvisible"` ) {
      deleteAttr ( $currentNode + ".liqInvisible" );
    }
  }
}


global proc liquidCreateMeshRenderingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqSubdiv"` ) {
      addAttr -ln "liqSubdiv" -at bool $currentNode;
    }
    if ( !`attributeQuery -node $currentNode -ex "liqSubdivInterpolateBoundary"` ) {
    addAttr -ln "liqSubdivInterpolateBoundary" -at bool $currentNode;
    }
  }
}


global proc liquidDeleteMeshRenderingAttributes()
 {
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqSubdiv"` ) {
      deleteAttr ( $currentNode + ".liqSubdiv" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqSubdivInterpolateBoundary"` ) {
      deleteAttr ( $currentNode + ".liqSubdivInterpolateBoundary" );
    }
  }
}


global proc liquidCreateSubdivRenderingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqSubdivMayaCrease"` ) {
      addAttr -ln "liqSubdivMayaCrease" -at "float" $currentNode;
    }
  }
}


global proc liquidDeleteSubdivRenderingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqSubdivMayaCrease"` ) {
      deleteAttr ( $currentNode + ".liqSubdivMayaCrease" );
    }
  }
}


global proc liquidCreateCurveRenderingAttributes()
 {
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqCurve"` ) {
      addAttr -ln "liqCurve" -at bool $currentNode;
    }
    if ( !`attributeQuery -node $currentNode -ex "liqCurveWidth"` ) {
      addAttr -ln "liqCurveWidth" -at "float" $currentNode;
    }
  }
}


global proc liquidDeleteCurveRenderingAttributes()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqCurve"` ) {
      deleteAttr ( $currentNode + ".liqCurve" );
    }
    if ( `attributeQuery -node $currentNode -ex "liqCurveWidth"` ) {
      deleteAttr ( $currentNode + ".liqCurveWidth" );
    }
  }
}


global proc liquidCreateSetAttributes()
{
  string $nodes[] = `ls -typ objectSet -sl`;
  string $currentNode;

  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqTraceSet"` ) {
      addAttr -ln "liqTraceSet" -at bool -dv true $currentNode;
    }
  }
}


global proc liquidDeleteSetAttributes()
{
  string $nodes[] = `ls -typ objectSet -sl`;
  string $currentNode;

  for ( $currentNode in $nodes ) {
    if ( `attributeQuery -node $currentNode -ex "liqTraceSet"` ) {
      deleteAttr ( $currentNode + ".liqTraceSet" );
    }
  }
}


global proc liquidMakeDBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "deformationBlur"`) {
      addAttr -h true -ln deformationBlur -at bool $current;
    }
    if ( `attributeQuery -node $current -ex "deformationBlur"`) {
      setAttr ( $current + ".deformationBlur" ) true;
    }
  }
}


global proc liquidUnMakeDBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "deformationBlur"`) {
      deleteAttr ( $current + ".deformationBlur" );
    }
  }
}


global proc liquidMakeTBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "transformationBlur"`) {
      addAttr -h true -ln transformationBlur -at bool $current;
    }
    if ( `attributeQuery -node $current -ex "transformationBlur"`) {
      setAttr ( $current + ".transformationBlur" ) true;
    }
  }
}


global proc liquidUnMakeTBlur() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "transformationBlur"`) {
      deleteAttr ( $current + ".transformationBlur" );
    }
  }
}


global proc liquidAddZThres() {
  string $selected[] = `ls -dag -sl -lights`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "ribOptions"`) {
      addAttr -ln ribOptions -dt "string" $current;
    }
    if ( `attributeQuery -node $current -ex "ribOptions"`) {
      setAttr ( $current + ".ribOptions" ) -type "string" "Option \"limits\" \"zthreshold\" [ 1.0 1.0 1.0 ]";
    }
  }
}


global proc liquidRemoveZThres() {
  string $selected[] = `ls -dag -sl -lights`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "ribOptions"`) {
      deleteAttr ( $current + ".ribOptions" );
    }
  }
}


global proc liquidAddLiquidInvisible() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( !`attributeQuery -node $current -ex "liquidInvisible"`) {
      addAttr -ln liquidInvisible -at bool $current;
    }
    if ( `attributeQuery -node $current -ex "liquidInvisible"`) {
      setAttr ( $current + ".liquidInvisible" ) true;
    }
  }
}


global proc liquidRemoveLiquidInvisible() {
  string $selected[] = `ls -dag -sl`;
  string $current;
  for ( $current in $selected ) {
    if ( `attributeQuery -node $current -ex "liquidInvisible"`) {
      deleteAttr ( $current + ".liquidInvisible" );
    }
  }
}


// Advanced Visibility Attributes ---------------------------------------

global proc liquidCreateCameraHitModeAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );;

  if ( !$newStyle ) {
    warning ("camera hit-mode is not supported by your renderer !");
    return;
  }

  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqHitModeCamera"` ) {
      addAttr -ln "liqHitModeCamera" -at enum -enumName "Primitive=0:Shader=1" $currentNode;
      setAttr ($currentNode+".liqHitModeCamera") 1;
    }
  }
}


global proc liquidCreateHitModeDiffuseAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );
  if ( !$newStyle ) return;
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqHitModeDiffuse"` ) {
      addAttr -ln "liqHitModeDiffuse" -at enum -enumName "Primitive=0:Shader=1"  $currentNode;
      setAttr ($currentNode+".liqHitModeDiffuse") 0;
    }
  }
}


global proc liquidCreateHitModeSpecularAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );;
  if ( !$newStyle ) return;
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqHitModeSpecular"` ) {
      addAttr -ln "liqHitModeSpecular" -at enum -enumName "Primitive=0:Shader=1"  $currentNode;
      setAttr ($currentNode+".liqHitModeSpecular") 1;
    }
  }
}


global proc liquidCreateHitModeTransmissionAttribute()
{
  int $newStyle = liquidGlobalsFeatureQuery( "AdvancedVisibility" );;
  if ( !$newStyle ) return;
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !`attributeQuery -node $currentNode -ex "liqHitModeTransmission"` ) {
      addAttr -ln "liqHitModeTransmission" -at enum -enumName "Primitive=0:Shader=1"  $currentNode;
      setAttr ($currentNode+".liqHitModeTransmission") 1;
    }
  }
}


global proc liquidCreateIgnoreShapesAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !objExists( ($currentNode+".liqIgnoreShapes") ) ) {
      addAttr -ln "liqIgnoreShapes" -at bool -dv 1 $currentNode;
    }
  }
}

global proc liquidDeleteIgnoreShapesAttribute()
{
  string $nodes[] = `ls -tr -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( objExists( ($currentNode+".liqIgnoreShapes") ) ) {
      deleteAttr ( $currentNode+".liqIgnoreShapes" );
    }
  }
}

global proc liquidCreateAreaLightAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !objExists( ($currentNode+".liqBothSidesEmit") ) ) {
      addAttr -ln "liqBothSidesEmit" -at bool -dv 0 $currentNode;
    }
  }
}

global proc liquidDeleteAreaLightAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( objExists( ($currentNode+".liqBothSidesEmit") ) ) {
      deleteAttr ( $currentNode+".liqBothSidesEmit" );
    }
  }
}

global proc liquidCreateLightShadowAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !( nodeType($currentNode) == "spotLight" || nodeType($currentNode) == "pointLight" || nodeType($currentNode) == "directionalLight" ) ) {
      warning ("These attributes can only be added to spotLights directionalLights or pointLights !");
      continue;
    }
    if ( !objExists( ($currentNode+".liqShadowMapSamples") ) ) {
      addAttr -ln "liqShadowMapSamples" -at "short" -dv 16 $currentNode;
    }
    if ( !objExists( ($currentNode+".deepShadows") ) ) {
      addAttr -ln "deepShadows" -sn "dsh" -at bool -dv 0 $currentNode;
    }
    if ( !objExists( ($currentNode+".pixelSamples") ) ) {
      addAttr -ln "pixelSamples" -sn "dps" -at "short" -dv 0 $currentNode;
    }
    if ( !objExists( ($currentNode+".volumeInterpretation") ) ) {
      addAttr -ln "volumeInterpretation" -sn "dvi" -at "enum" -enumName "Discreet:Continuous" $currentNode;
    }
    if ( !objExists( ($currentNode+".everyFrame") ) ) {
      addAttr -ln "everyFrame" -sn "ef" -at bool -dv 1 $currentNode;
    }
    if ( !objExists( ($currentNode+".renderAtFrame") ) ) {
      addAttr -ln "renderAtFrame" -sn "raf" -at "short" -dv 0 $currentNode;
    }
    if ( !objExists( ($currentNode+".geometrySet") ) ) {
      addAttr -ln "geometrySet" -sn "sgs" -dt "string" $currentNode;
    }
    if ( !objExists( ($currentNode+".shadingRateFactor") ) ) {
      addAttr -ln "shadingRateFactor" -sn "srf" -at "float" -dv 1.0 $currentNode;
    }
  }
}
global proc liquidDeleteLightShadowAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( objExists( ($currentNode+".liqShadowMapSamples") ) ) {
      deleteAttr ( $currentNode+".liqShadowMapSamples" );
    }
    if ( objExists( ($currentNode+".deepShadows") ) ) {
      deleteAttr ( $currentNode+".deepShadows" );
    }
    if ( objExists( ($currentNode+".pixelSamples") ) ) {
      deleteAttr ( $currentNode+".pixelSamples" );
    }
    if ( objExists( ($currentNode+".volumeInterpretation") ) ) {
      deleteAttr ( $currentNode+".volumeInterpretation" );
    }
    if ( objExists( ($currentNode+".everyFrame") ) ) {
      deleteAttr ( $currentNode+".everyFrame" );
    }
    if ( objExists( ($currentNode+".renderAtFrame") ) ) {
      deleteAttr ( $currentNode+".renderAtFrame" );
    }
    if ( objExists( ($currentNode+".geometrySet") ) ) {
      deleteAttr ( $currentNode+".geometrySet" );
    }
    if ( objExists( ($currentNode+".shadingRateFactor") ) ) {
      deleteAttr ( $currentNode+".shadingRateFactor" );
    }
  }
}

global proc liquidCreateLightOutputAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( !objExists( ($currentNode+".__category") ) ) {
      addAttr -ln "__category" -dt "string" $currentNode;
    }
    if ( !objExists( ($currentNode+".lightID") ) ) {
      addAttr -ln "lightID" -at byte $currentNode;
    }
  }
}

global proc liquidDeleteLightOutputAttributes()
{
  string $nodes[] = `ls -lights -dag -sl`;
  string $currentNode;
  for ( $currentNode in $nodes ) {
    if ( objExists( ($currentNode+".__category") ) ) {
      deleteAttr ( $currentNode+".__category" );
    }
    if ( objExists( ($currentNode+".lightID") ) ) {
      deleteAttr ( $currentNode+".lightID" );
    }
  }
}

