//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:  June 7th, 2000
//
//
//  Description:
//      Liquids main globals interface.
//
//  Input Arguments:
//
//  Returns:
//

//  set's up all the default liquid globals
global string $liquidGlobalsVals[];
global string $liqPixelFiltersList[];
global string $liqHidersList[];
global string $liqFeaturesList[];
global string $liqRequiredList[];
global string $liqRendererOptions[];
liquidInitGlobalVals();

// the code to initialise the globals needs to be within a function, otherwise
// it won't be updated in Maya if it is changed and the script re-sourced
global proc liquidInitGlobalVals()
{
  global string $liquidGlobalsVals[];
  $liquidGlobalsVals = {
     "launchRender",                "bool",   true

    ,"renderCamera",                "string", ""
    ,"rotateCamera",                "bool",   false
    ,"dd1imageName",                "string", ""
    ,"dd1imageType",                "string", "framebuffer"
    ,"dd1imageMode",                "string", "rgba"
    ,"dd1paramType",                "string", ""
    ,"dd1enable",                   "bool",   true
    ,"numDD",                       "long",   1
    ,"numDD1Param",                 "long",   0

    ,"createOutputDirectories",     "bool",   true
    ,"expandShaderArrays",          "bool",   false

    ,"shaderPath",                  "string", ""
    ,"texturePath",                 "string", ""
    ,"archivePath",                 "string", ""
    ,"proceduralPath",              "string", ""

    ,"ribName",                     "string", ""
    ,"beautyRibHasCameraName",       "bool",   true

    ,"pictureDirectory",            "string", ""
    ,"textureDirectory",            "string", ""
    ,"ribDirectory",                "string", ""
    ,"shaderDirectory",             "string", "liqshaders"
    ,"tempDirectory",               "string", ""

    ,"deferredGen",                 "bool",   false
    ,"deferredBlock",               "long",   1
    ,"preframeMel",                 "string", ""
    ,"postframeMel",                "string", ""
    ,"useRenderScript",             "bool",   false
    ,"remoteRender",                "bool",   false
    ,"netRManRender",               "bool",   false
    ,"minCPU",                      "long",   1
    ,"maxCPU",                      "long",   1
    ,"ignoreShadows",               "bool",   false
    ,"fullShadowRibs",              "bool",   false
    ,"binaryOutput",                "bool",   false
    ,"compressedOutput",            "bool",   false
    ,"renderAllCurves",             "bool",   false
    ,"outputMeshUVs",               "bool",   false
    ,"ignoreSurfaces",              "bool",   false
    ,"ignoreDisplacements",         "bool",   false
    ,"ignoreLights",                "bool",   false
    ,"ignoreVolumes",               "bool",   false
    ,"outputShadersInShadows",      "bool",   false
    ,"outputShadersInDeepShadows",  "bool",   false

    ,"outputLightsInDeepShadows",   "bool",   false
    ,"outputShadowPass",            "bool",   false
    ,"outputHeroPass",              "bool",   true
    ,"outputComments",              "bool",   false
    ,"shaderDebug",                 "bool",   false
    ,"showProgress",                "bool",   false
    ,"doAnimation",                 "bool",   false
    ,"startFrame",                  "long",   1
    ,"endFrame",                    "long",   "100"
    ,"frameStep",                   "long",   1
    ,"doPadding",                   "bool",   false
    ,"padding",                     "long",   0
    ,"numProcs",                    "long",   0
    ,"gain",                        "float",  1.0
    ,"gamma",                       "float",  1.0
    ,"xResolution",                 "long",   640
    ,"yResolution",                 "long",   480
    ,"pixelAspectRatio",            "float",  1.0
    ,"imageDriver",                 "string", ""

    ,"cameraBlur",                  "bool",   false
    ,"transformationBlur",          "bool",   false
    ,"deformationBlur",             "bool",   false
    ,"shutterConfig",               "long",   0
    ,"motionBlurSamples",           "long",   2
    ,"motionFactor",                "float",  2.0
    ,"depthOfField",                "bool",   false

    ,"pixelSamples",                "long",   3
    ,"shadingRate",                 "float",  1.0

    ,"limitsOThreshold",            "float",  0.996
    ,"limitsZThreshold",            "float",  1.0
    ,"limitsBucketXSize",           "long",   16
    ,"limitsBucketYSize",           "long",   16
    ,"limitsGridSize",              "long",   256
    ,"limitsTextureMemory",         "long",   65536
    ,"limitsEyeSplits",             "long",   10
    ,"limitsGPrimSplits",           "long",   4

    ,"imageDepth",                  "long",   8
    ,"pixelFilter",                 "long",   2
    ,"pixelFilterX",                "float",  3.0
    ,"pixelFilterY",                "float",  3.0
    ,"cleanRib",                    "bool",   false
    ,"cleanTex",                    "bool",   false
    ,"cleanShad",                   "bool",   false
    ,"cleanRenderScript",           "bool",   false
    ,"justRib",                     "bool",   false
    ,"alfredTags",                  "string", "prman"
    ,"alfredServices",              "string", "pixarRender"
    ,"renderCommand",               "string", "renderdl"
    ,"ribgenCommand",               "string", ""

    ,"previewer",                   "string", "renderdl"
    ,"preCommand",                  "string", ""
    ,"postFrameCommand",            "string", ""
    ,"preFrameCommand",             "string", ""
    ,"preJobCommand",               "string", ""
    ,"postJobCommand",              "string", ""
    ,"key",                         "string", "maya"
    ,"service",                     "string", "liquid"
    ,"lastRenderScript",            "string", ""
    ,"lastRibFile",                 "string", ""
    ,"simpleGlobalsWindow",         "bool",   true
    ,"lazyCompute",                 "bool",   false
    ,"cropX1",                      "float",  0.0
    ,"cropX2",                      "float",  1.0
    ,"cropY1",                      "float",  0.0
    ,"cropY2",                      "float",  1.0
    ,"exportReadArchive",           "bool",   false
    ,"renderJobName",               "string", ""
    ,"shortShaderNames",            "bool",   false

    ,"relativeFileNames",           "bool",   false

    ,"expandAlfred",                "bool",   false

    ,"preWorld",                    "string", ""
    ,"postWorld",                   "string", ""

    ,"preGeom",                     "string", ""
    ,"renderScriptFormat",          "long",   2
    ,"renderScriptCommand",         "string", "%LIQUIDHOME%/scripts/dojob.py"

    ,"fluidShaderBrowserDefaultPath", "string", ""

    ,"previewType",                 "long",   0
    ,"previewRenderer",             "string", ""
    ,"previewSize",                 "long",   128
    ,"previewPrimitive",            "long",   0
    ,"previewDisplayDriver",        "string", "idisplay"
    ,"previewConnectionType",       "long",   0

    ,"useRayTracing",               "bool",   false
    ,"traceBreadthFactor",          "float",  1.0
    ,"traceDepthFactor",            "float",  1.0
    ,"traceMaxDepth",               "long",   10
    ,"traceSpecularThreshold",      "float",  10
    ,"traceRayContinuation",        "bool",   true
    ,"traceCacheMemory",            "long",   30720
    ,"traceDisplacements",          "bool",   false
    ,"traceBias",                   "float",  0.05
    ,"traceSampleMotion",           "bool",   false
    ,"traceMaxSpecularDepth",       "long",   2
    ,"traceMaxDiffuseDepth",        "long",   2

    ,"irradianceMaxError",          "float",  -1.0
    ,"irradianceMaxPixelDist",      "float",  -1.0
    ,"irradianceHandle",            "string", ""
    ,"irradianceFileMode",          "long",   0

    ,"useMtorSubdiv",               "bool",   "false"
    ,"hider",                       "long",   "0"
    ,"jitter",                      "long",   "1"
    ,"renderCmdFlags",              "string", ""            // Render Command line flags e.g. -radio 5 for BMRT

    ,"shaderInfo",                  "string", "shaderinfo"  // shader info utility
    ,"shaderComp",                  "string", "shader"      // shader compiler
    ,"shaderExt",                   "string", "sdl"         // shader extension
    ,"makeTexture",                 "string", "tdlmake"     // texture make utilite
    ,"viewTexture",                 "string", "i-display"    // texture viewer utilite
    ,"bits_hiders",                 "string", "Hidden"      // -Photon -ZBuffer -Raytrace -OpenGL

    // This is the list of filters supported by the renderer
    ,"bits_filters",                "string", "Box Triangle CatmullRom Bessel Gaussian Sinc BlackmanHarris Mitchell" // -SeparableCatmullRom -Lanczos -Disk
    ,"bits_features",               "string", "Blobbies Points Eyesplits Raytrace DepthOfField AdvancedVisibility"
    ,"bits_required",               "string", "Swap_UV __Pref "   // -MakeShadow
    ,"dshDisplayName",              "string", "dsm"               // Deep Shadow Display name
    ,"dshImageMode",                "string", "rgbaz"             // Deep Shadow Display image mode

    ,"shotName",                    "string", ""
    ,"shotVersion",                 "string", ""
  };


  // This is the list of filters as it shows up in the UI
  global string $liqPixelFiltersList[11];
  $liqPixelFiltersList = {
    "Box",
    "Triangle",
    "Catmull-Rom",
    "Gaussian",
    "Sinc",
    "Blackman-Harris",
    "Mitchell",
    "Separable Catmull-Rom",
    "Lanczos",
    "Bessel",
    "Disk"
  };

  global string $liqHidersList[5];
  $liqHidersList = {
    "Hidden",
    "Photon",
    "Raytrace",
    "OpenGL",
    "ZBuffer"
  };

  global string $liqFeaturesList[6];
  $liqFeaturesList = {
    "Blobbies",
    "Points",
    "Eyesplits",
    "Raytrace",
    "DepthOfField",
    "AdvancedVisibility"
  };

  global string $liqRequiredList[5];
  $liqRequiredList = {
    "Swap_UV",
    "__Pref",
    "MakeShadow"
  };

  global string $liqRendererOptions[11];
  $liqRendererOptions = {
    "renderCommand",
    "previewer",
    "shaderInfo",
    "shaderComp",
    "shaderExt",
    "makeTexture",
    "viewTexture",
    "bits_hiders",
    "bits_filters",
    "bits_features",
    "bits_required",
    "dshDisplayName",
    "dshImageMode"
  };
}



global proc validatePixelFilterMenu() {
  global string $liqPixelFiltersList[];
  string $f, $supported_filters[], $supported_filters_str = `getAttr liquidGlobals.bits_filters`;
  tokenize( $supported_filters_str, $supported_filters );
  for ( $f in $liqPixelFiltersList )  {
    string $comp = `liquidSubstituteAll "[^a-zA-Z]" $f ""`;
    int $is_enabled = ( stringArrayCount( $comp, $supported_filters ) ) ? true : false;
    menuItem -e -en $is_enabled ( "pixelFilter_" + $comp );
  }
}

global proc validateHidersMenu() {
  global string $liqHidersList[];
  string $f, $supported_hiders[], $supported_hiders_str = `getAttr liquidGlobals.bits_hiders`;
  tokenize( $supported_hiders_str, $supported_hiders );
  for ( $f in $liqHidersList )  {
    int $is_enabled = ( stringArrayCount( $f, $supported_hiders ) )? true : false;
    menuItem -e -en $is_enabled ( "hider_" + $f );
  }
}


/**
 *  Updates the $liqFeaturesList array with all the current features
 */
global proc liquidGlobalsUpdateFeatures()
{
  global string $liqFeaturesList[];
  if ( liquidGlobalsExists() )
    $liqFeaturesList = stringToStringArray( (`getAttr "liquidGlobals.bits_features"`), " ");
}



/**
 *  Checks the visibility style
 *  Returns 1 for prman 12.5+ style, 0 otherwise.
 */
global proc int liquidGlobalVisibilityStyle()
{
  global string $liqFeaturesList[];

  if ( liquidGlobalsExists() ) {
    string $f;
    for ( $f in $liqFeaturesList ) {
      if ( $f == "AdvancedVisibility" ) return 1;
    }
    return 0;
  }

  return -1;
}



// WETA SPECIFIC: Start
global proc liquidAddNimbusLightParam()
{
  global string $liquidGlobalsVals[];
  string $selected[] = `ls -sl -dag -lights`;
  string $current;
  for( $current in $selected ) {
    int $liquidNumber = size( $liquidGlobalsVals ) / 3;
    int $i;
    for ( $i = 0; $i < $liquidNumber; $i++ ) {
      string $name = $liquidGlobalsVals[ $i * 3 ];
      string $shortname = `substring $name 1 6`;
      if ( !`attributeQuery -node ( $current ) -ex ( $name ) ` && ( $shortname == "nimbus" ) ) {
        string $type = $liquidGlobalsVals[ $i * 3 + 1 ];
        string $val = $liquidGlobalsVals[ $i * 3 + 2 ];
        if ( $type == "string" ) {
          addAttr -ln $name -dt "string" ( $current );
          setAttr ( $current +"."+$name ) -type "string" $val;
        }
        if ( $type == "bool" ) {
          addAttr -ln $name -at bool ( $current );
          eval ( "setAttr " + $current + "." + $name + " " + $val );
        }
        if ( $type == "long" ) {
          eval ( "addAttr -ln " + $name + " -at long -dv " + $val + " " + $current );
        }
        if ( $type == "float" ) {
          eval ( "addAttr -ln " + $name + " -at \"float\" -dv " + $val + " " + $current );
        }
      }
    }
  }
}
// WETA SPECIFIC: End

global proc liquidChangeTextAttr ( string $selectedObj, string $argName, string $fieldName )
{
  string $fieldValue = `textFieldGrp -q -text $fieldName`;
  setAttr ( $selectedObj + "." + $argName ) -type "string" $fieldValue;
}


global proc liquidChangeScrollAttr ( string $selectedObj, string $argName, string $fieldName )
{
    string $fieldValue = `scrollField -q -text $fieldName`;
    setAttr ( $selectedObj + "." + $argName ) -type "string" $fieldValue;
}

global proc int liquidGlobalsExists()
{
  int $returnVal;
  $returnVal = `objExists liquidGlobals`;
  return $returnVal;
}


// Create the Liquid Render Globals node
global proc liquidCreateGlobals()
{
  eval "liquidRegistration();";
  if ( `liquidGlobalsExists` ) {
    delete liquidGlobals;
  }
  if ( `window -exists liquidGlobalsWindow` ) {
    deleteUI liquidGlobalsWindow;
  }
  if ( !`liquidGlobalsExists` ) {
    createNode "oldBlindDataBase" -n "liquidGlobals";
    print "Liquid Globals Created!\n";
  }
  liquidAddGlobals;
  liquidLoadGlobals( "default", "global" );
  select -cl;
}


// Check and add the default render globals attributes to the Liquid Render Globals node
global proc liquidAddGlobals()
{
  global string $liquidGlobalsVals[];
  int $liquidGlobalsNumber = size( $liquidGlobalsVals ) / 3;
  int $i;

  for ( $i = 0; $i < $liquidGlobalsNumber; $i++ ) {
    string $name = $liquidGlobalsVals[ $i * 3 ];
    if ( !`attributeQuery -node liquidGlobals -ex ( $name ) ` ) {
      string $type = $liquidGlobalsVals[ $i * 3 + 1 ];
      string $val;
      if ( `liquidINIGet "globals" $name` == "" ) {
        $val = $liquidGlobalsVals[ $i * 3 + 2 ];
      } else {
        $val = `liquidINIGet "globals" $name`;
      }
      if ( $type == "string" ) {
        addAttr -ln $name -dt "string" liquidGlobals;
        setAttr ( "liquidGlobals."+$name ) -type "string" $val;
      }
      if ( $type == "bool" ) {
        addAttr -ln $name -at bool liquidGlobals;
        eval ( "setAttr liquidGlobals." + $name + " " + $val );
      }
      if ( $type == "long" ) {
        eval ( "addAttr -ln " + $name + " -at long -dv " + $val + " liquidGlobals" );
      }
      if ( $type == "float" ) {
        eval ( "addAttr -ln " + $name + " -at \"float\" -dv " + $val + " liquidGlobals" );
        if ( gmatch( $name, "crop??") ) {
          addAttr -e -min 0 -max 1 ("liquidGlobals."+$name);
        }
      }
    }
  }

}

global proc liquidAddPresets()
{
  string $liquidDirectory = liquidGetHome() + "/";

  string $liquidRenderersDir = $liquidDirectory + "renderers/";

  string $renderersList[] = `getFileList -fld $liquidRenderersDir -fs "*.lg"`;
  menuItem -label "Renderers" -sm true -p liquidGlobalsPresetMenu;

  for ( $currentPreset in $renderersList ) {
    string $preset = substring( $currentPreset, 1, size( $currentPreset ) - 3 );
    menuItem -label $preset -c ( "liquidLoadPreset \"" + $preset + "\"" + " renderer" )  ( "liquidGlobalsPresetMenu" + $preset );
  }

  setParent -menu ..;

  string $presetsList[] = `getFileList -fld $liquidDirectory -fs "*.lg"`;
  for ( $currentPreset in $presetsList ) {
    string $preset = substring( $currentPreset, 1, size( $currentPreset ) - 3 );
    menuItem -label $preset -c ( "liquidLoadPreset \"" + $preset + "\"" + " \"global\"" ) -p liquidGlobalsPresetMenu ( "liquidGlobalsPresetMenu" + $preset );
  }

  // add home dir presets
  menuItem -divider true;

  $liquidDirectory = ( liquidGetUserHomeDir() + "/" );
  $presetsList = `getFileList -fld $liquidDirectory -fs "*.lg"`;
  for ( $currentPreset in $presetsList ) {
    string $preset = substring( $currentPreset, 1, size( $currentPreset ) - 3 );
    menuItem -label $preset -c ( "liquidLoadPreset \"" + $preset + "\"" + " \"global\"" ) -p liquidGlobalsPresetMenu ( "liquidGlobalsPresetMenu" + $preset );
  }
}

global proc int liquidSaveGlobals( string $name, string $presetType )
{
  global string $liquidGlobalsVals[];
  global string $liqRendererOptions[];
  int $ret = false;
  string $liquidDirectory = liquidGetUserHomeDir();

  switch ( $presetType ) {
    case "":
    case "global":
      if ( !liquidCreateUserHomeDir() ) return false;
      break;
    case "renderer":
      if ( !liquidCreateUserHomeDir() ) return false;
      $liquidDirectory += "/renderers";
      if ( !`sysFile -makeDir $liquidDirectory` ) {
        error ( "Can not create dir: " + $liquidDirectory);
        return false;
      }
      break;
    case "local":
      $liquidDirectory = `workspace -q -rootDirectory`;
      break;
  }
  string $globalName = ( $liquidDirectory + "/" + $name + ".lg" );
  string $confirm = "Yes";

  if ( `file -q -ex $globalName` ) {
    $confirm = `confirmDialog -title "Confirm overwrite" -message "Preset name already exist.\n Do you want overwrite it?"
      -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No"
      -dismissString "No"`;
  }
  if ( $confirm == "Yes" ) {
    $fileId = `fopen $globalName "w"`;
    int $liquidGlobalsNumber = size($liquidGlobalsVals)/3;
    int $i;
    for ( $i = 0; $i < $liquidGlobalsNumber; $i++ ) {
      string $name = $liquidGlobalsVals[ $i * 3 ];
      string $type = $liquidGlobalsVals[ $i * 3 + 1 ];
      string $val = `getAttr ( "liquidGlobals." + $name )`;

      if ( $presetType == "renderer" ) {
          if ( !stringArrayCount( $name, $liqRendererOptions ) ) {
          print ("skipped : " + $name + "\n");
          continue; // write only items listed in $liqRendererOptions array
        }
      }
      if ( $type == "string" ) {
        fprint $fileId ( "setAttr \"liquidGlobals."+$name+"\" -type \"string\"\"" + $val + "\"\n" );
      } else {
        fprint $fileId ( "setAttr \"liquidGlobals." + $name + "\" " + $val + "\n" );
      }
    }
    fclose $fileId;
    $ret = true;
  }

  return $ret;
}

/**
 * loads a preset file
 * if there is an environment variable called LIQUID_GLOBALS_OVERRIDE, it will use it,
 * otherwise it will look for the user's home directory.
 */
global proc liquidLoadGlobals( string $name, string $presetType ) {

  global string $liquidGlobalsVals[];
  global int $useLocalSettings;

  string $liquidDirectory = getenv( "LIQUID_GLOBALS_OVERRIDE" );
  if ( $liquidDirectory == "" ) $liquidDirectory = liquidGetUserHomeDir();

  if ( $presetType == "renderer") {
    $liquidDirectory = liquidGetHome();
    $liquidDirectory += "/renderers";
  }

  // allow the user to pass a qualified path
  string $globalName = (`filetest -r $name`)? $name : ( $liquidDirectory + "/" + $name + ".lg" );

  if  ( `filetest -r $globalName` ) {

    $fileId = `fopen $globalName "r"`;

    while ( !`feof $fileId` ) {
      $line = `fgetline $fileId`;
      catch( `eval ( $line )` );
    }

    fclose $fileId;
    liquidGlobalsUpdateFeatures();

  } else {
    // check it is not in the user's home dir

    $globalName = ( liquidGetUserHomeDir() + "/" + $name + ".lg" );

    if  ( `filetest -r $globalName` ) {

      $fileId = `fopen $globalName "r"`;

      while ( !`feof $fileId` ) {
        $line = `fgetline $fileId`;
        catch( `eval ( $line )` );
      }

      fclose $fileId;
      liquidGlobalsUpdateFeatures();
    } else
      warning ("Preset file " + $name + " not found!");
  }
}

/**
 * loads a preset file and rebuilds the render global window
 */
global proc liquidLoadPreset(string $preset, string $presetType ) {
  deleteUI liquidGlobalsWindow;
  liquidLoadGlobals $preset $presetType;
  liquidGlobalsWindow;
}

global proc liquidSavePresetOk() {
  string $presetName = `textFieldGrp -q -tx liquidSavePresetTxFld`;
  string $presetType = "global";
  if ( $presetName != "" ) {

    int $rendererOnly = `checkBoxGrp -q -v1 liquidSavePresetChkFld`;
    if ( $rendererOnly ) {
      print ("Renderer preset " + $presetName + "saved.\n");
      $presetType = "renderer";
    }
    if ( liquidSaveGlobals( $presetName, $presetType ) ) {
      deleteUI liquidSavePresetWin;
      string $presetName_lower = tolower( $presetName );
      string $i,$ia[] = `menu -q -ia liquidGlobalsPresetMenu`;
      for ( $i in $ia ) {
        string $label = ( !`menuItem -q -divider  $i` )? `menuItem -q -label $i` : "";
        print ("New name = " + $presetName + " $label = " + $label + "\n");
        if ( $presetName_lower == tolower( $label ) )
          return; // same preset menu item already exists
      }
      menuItem -label $presetName -c ("liquidLoadPreset " + $presetName  + (( $rendererOnly )? " renderer" : " global" ) ) -p liquidGlobalsPresetMenu ( "liquidGlobalsPresetMenu" + $presetName );
    }
  }
}


global proc liquidSavePreset() {
  window -widthHeight 100 30 -rtf true -title "Save Preset" liquidSavePresetWin;
    string $form = `formLayout -numberOfDivisions 100`;
      string $column = `columnLayout -adjustableColumn true`;
        textFieldGrp -cw 1 70 -cal 1 "right" -adj 2 -label "Name" liquidSavePresetTxFld;
        checkBoxGrp  -cw 1 70 -cw 2 200 -l "" -l1 "Save Renderer Settings Only" liquidSavePresetChkFld;
      setParent ..;
      string $ok_btn = `button -label "Ok" -c liquidSavePresetOk`;
      string $cancel_btn = `button -label "Cancel" -c ( "deleteUI liquidSavePresetWin" )`;
    setParent ..;
    formLayout -edit
      -attachForm $column "top" 2
      -attachForm $column "left" 2
      -attachForm $column "right" 2
      -attachForm $ok_btn "bottom" 2
      -attachForm $cancel_btn "bottom" 2
      -attachForm $cancel_btn "right" 2
      -attachForm $ok_btn "left" 2
      -attachControl $column "bottom" 2 $ok_btn
      -attachControl $cancel_btn "left" 2 $ok_btn
      -attachPosition $ok_btn "right" 1 50
    $form;
  showWindow liquidSavePresetWin;
}

global proc liquidShowBoolGlobal( string $name, string $label )
{
  liquidShowBoolGlobalPlus( $name, $label, "" );
}

global proc liquidShowBoolGlobalPlus( string $name, string $label, string $info )
{
  string $onCommand  = ("setAttr liquidGlobals." + $name + " true; ");
  string $offCommand = ("setAttr liquidGlobals." + $name + " false; ");
  if ( $name == "netRManRender" ) {
    $onCommand += ( "textFieldGrp -e -tx \"pixarNRM\" liquidGlobalsalfredServicesField; liquidChangeTextAttr liquidGlobals alfredServices liquidGlobalsalfredServicesField;" );
    $offCommand += ( "textFieldGrp -e -tx \"pixarRender\" liquidGlobalsalfredServicesField; liquidChangeTextAttr liquidGlobals alfredServices liquidGlobalsalfredServicesField;" );
  }
  if ( `attributeQuery -node liquidGlobals -ex $name` ) {
    // Only use an empty secondary label if not on Windows (looks nicer there w/o)
    if ( `about -win` == true ) {
      checkBoxGrp -label $label -ann $info -value1 `getAttr ("liquidGlobals." + $name)` -on1 $onCommand -of1 $offCommand ( "liquidGlobals" + $name + "Check" );
    } else {
      checkBoxGrp -label $label -ann $info -l1 " " -value1 `getAttr ("liquidGlobals." + $name)` -on1 $onCommand -of1 $offCommand ( "liquidGlobals" + $name + "Check" );
    }
  } else {
    warning ( "global attribute " + $name + " does not exist\n" );
  }
}


global proc liquidShowBitFieldGlobal( string $name, string $labels[], string $validateProc )
{
  int $idx = 0;
  string $chk_group[], $bitFields[], $s = `getAttr ("liquidGlobals." + $name)`;
  tokenize( $s, $bitFields );
  for ( $s in $labels ) {
    $comp = `liquidSubstituteAll "[^a-zA-Z]" $s ""`;
    $chk_group[$idx++] = `checkBoxGrp -label $s -v1 ( (stringArrayCount( $comp, $bitFields ))? true : false ) -cc ( "liquidCheckBitField " + $name + " " + $comp + " #1;" + $validateProc )`;
  }
}



global proc liquidCheckBitField( string $name, string $field, int $value )
{
  string $globalsVal = `getAttr ("liquidGlobals." + $name)`;

  if ( $value ) {
    $globalsVal += (" " + $field ); // add field
  } else {
    string $s, $globalsValues[];
    int $idx = 0, $numitems = tokenize( $globalsVal, $globalsValues );
    $globalsVal = "";
    for ($s in $globalsValues) {
      if ( $s != $field )
        $globalsVal += (" " + $s); // remove field
    }
  }
  //textFieldGrp -e -tx $globalsVal ( "liquidGlobals" + $name + "Field" );
  //liquidChangeTextAttr( "liquidGlobals",  $name,  ( "liquidGlobals" + $name + "Field" ) );
  setAttr ("liquidGlobals." + $name) -type "string" $globalsVal;
}


global proc liquidShowStringGlobal( string $name, string $label )
{
  liquidShowStringGlobalPlus( $name, $label, "" );
}

global proc liquidShowStringGlobalPlus( string $name, string $label, string $info )
{
  if ( `attributeQuery -node liquidGlobals -ex $name` ) {
    string $cmd;
    string $currentVal;
    $cmd = ( "liquidChangeTextAttr liquidGlobals " + $name + " liquidGlobals" + $name + "Field" );
    $currentVal = `getAttr ( "liquidGlobals." + $name )`;

    $spacedlabel = $label;
    textFieldGrp -label $spacedlabel -text ( $currentVal ) -ann $info -cc $cmd ( "liquidGlobals" + $name + "Field" );
  } else {
    print ( "Warning : global attribute " + $name + " does not exist\n" );
  }
}


global proc string liquidShowScrollGlobal( string $name, int $hi )
{
  string $ret;

  if ( `attributeQuery -node liquidGlobals -ex $name` ) {
    string $cmd;
    string $currentVal;
    $cmd = ( "liquidChangeScrollAttr liquidGlobals " + $name + " liquidGlobals" + $name + "Field" );
    $currentVal = `getAttr ( "liquidGlobals." + $name )`;
    $ret = `scrollField -text ( $currentVal ) -h $hi
      -cc $cmd ( "liquidGlobals" + $name + "Field" )`;
  } else
    warning ( "global attribute " + $name + " does not exist\n" );
  return $ret;
}

global proc liquidShowIntGlobalPlus( string $name, string $label, string $info )
{
  if ( `attributeQuery -node liquidGlobals -ex $name` ) {
    $spacedlabel = $label + " ";
    attrFieldSliderGrp -label $spacedlabel -ann $info -attribute ( "liquidGlobals." + $name ) ( "liquidGlobals" + $name + "Field" );
  } else {
    warning( "global attribute " + $name + " does not exist\n" );
  }
}

global proc liquidShowIntGlobal( string $name, string $label )
{
  liquidShowIntGlobalPlus( $name, $label, "" );
}

global proc liquidShowFloatGlobal( string $name, string $label )
{
  if ( `attributeQuery -node liquidGlobals -ex $name` ) {

    $spacedlabel = $label + " ";
    attrFieldSliderGrp -label $spacedlabel -attribute ( "liquidGlobals." + $name ) ( "liquidGlobals" + $name + "Field" );
  } else {
    warning( "global attribute " + $name + " does not exist\n" );
  }
}

global proc liquidShowIntGlobalMenu( string $name, string $label, string $items[] )
{
  if (size($items) == 0) {
    warning( "empty list specified in liquidShowIntGlobalMenu() for attribute " + $name + "\n");
    return;
  }
  if ( `attributeQuery -node liquidGlobals -ex $name` ) {
    string $menu = `optionMenuGrp -cal 1 "right" -label $label`;
    int $i;
    for( $i = 0; $i < size( $items ); ++$i ) {
      menuItem -data $i -label $items[ $i ] ( $name + "_" + `liquidSubstituteAll "[^a-zA-Z]" $items[ $i ] ""` );
    }
    connectControl -index 2 $menu ("liquidGlobals." + $name);
  } else {
    warning ( "global attribute " + $name + " does not exist\n" );
  }
}

global proc liquidShowCropWindowViewer()
{
  string $cb = `checkBoxGrp -ncb 1
                            -cw2 140 100
                            -l "View Crop Window"
                            -cc1 ("liquidCropWindowViewer();")`;
  if ( objExists( "liqCropWindowViewer" ) ) checkBoxGrp -e -v1 1 $cb;
}


global proc liquidDrawDisplayDrivers()
{
  int $numDD = `getAttr liquidGlobals.numDD`;
  setParent liquidGlobalsDDSet;
  int $i;
  for ( $i = 1; $i <= $numDD; $i++ ) {
    int $numDDParam = `getAttr ( "liquidGlobals.numDD" + $i + "Param" )`;
    if ( !`frameLayout -ex ( "DD" + $i + "frameLayoutDD" )` ){
      frameLayout -mh 5 -mw 5 -bs "etchedIn" -l ( "Display Driver " + $i ) -cll false ( "DD" + $i + "frameLayoutDD" );
    } else {
      setParent ( "DD" + $i + "frameLayoutDD"  );
      deleteUI  ( "DD" + $i + "columnLayoutDD" );
    }
    columnLayout -adj true ( "DD" + $i + "columnLayoutDD" );
      liquidShowStringGlobal ( "dd" + $i + "imageName" ) "Image Name";
      liquidShowStringGlobal ( "dd" + $i + "imageType" ) "Display Driver";
      liquidShowStringGlobal ( "dd" + $i + "imageMode" ) "Channel(s)";
      liquidShowStringGlobal ( "dd" + $i + "paramType" ) "Param Type";
      if ($i != 1) {
        liquidShowBoolGlobal   ( "dd" + $i + "enable" )    "Enable Output";
      }
      gridLayout -numberOfColumns 2 -cellWidthHeight 100 20 ( "DD" + $i + "buttonGridLayoutDD" );
        button -command ( "liquidGlobalsAddDDParam " + $i )    -label "Add Param"    ( "DD" + $i + "DDaddButton" );
        button -command ( "liquidGlobalsDeleteDDParam " + $i ) -label "Remove Param" ( "DD" + $i + "DDremoveButton" );
      setParent ( "DD" + $i + "columnLayoutDD" );
      int $j;
      for ( $j = 1; $j <= $numDDParam; $j++ ) {
        paneLayout -cn "vertical3" -height 24 -st 1 ( "DD" + $i + "Paran" + $j + "paneLayoutDD" );
        string $paramName = `getAttr ( "liquidGlobals.dd" + $i + "Param" + $j + "Name" )`;
        textField -ann "Parameter Name" -tx $paramName -cc ( "liquidGlobalsChangeDDParam " + $i + " " + $j + " 1" ) ( "dd" + $i + "Param" + $j + "NameField" );
        string $paramData = `getAttr ( "liquidGlobals.dd" + $i + "Param" + $j + "Data" )`;
        textField -ann "Parameter Data" -tx $paramData -cc ( "liquidGlobalsChangeDDParam " + $i + " " + $j + " 2" ) ( "dd" + $i + "Param" + $j + "DataField" );
        int $paramType = `getAttr ( "liquidGlobals.dd" + $i + "Param" + $j + "Type" )`;
        optionMenu -cc
            ( "setAttr liquidGlobals.dd" + $i + "Param" + $j + "Type `optionMenu -q -sl dd" + $i + "Param" + $j + "TypeOption`" )
            -label "Type" ( "dd" + $i + "Param" + $j + "TypeOption" );
          menuItem -label "String";
          menuItem -label "Float";
          setParent ..;
        optionMenu -e -sl $paramType ( "dd" + $i + "Param" + $j + "TypeOption" );
        setParent ( "DD" + $i + "columnLayoutDD" );
      }
    setParent liquidGlobalsDDSet;
  }
  setParent liquidGlobalsDDSet;
  if (`gridLayout -q -exists DDbuttonGridLayoutDD`) {
    deleteUI DDbuttonGridLayoutDD;
  }
  gridLayout -numberOfColumns 2 -cellWidthHeight 100 30 ( "DDbuttonGridLayoutDD" );
    button -command liquidGlobalsAddDD -label "Add Display" ( "DDaddButton" );
    button -command liquidGlobalsDeleteDD -label "Remove Display" ( "DDremoveButton" );
  setParent ..;
}

global proc liquidGlobalsAddDD ()
{
  int $numDD = `getAttr liquidGlobals.numDD`;
  $numDD += 1;
  addAttr -ln ( "dd" + $numDD + "imageName" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $numDD + "imageType" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $numDD + "imageMode" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $numDD + "paramType" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $numDD + "enable" ) -dv 1 -at "bool" liquidGlobals;
  addAttr -ln ( "numDD" + $numDD + "Param" ) -dv 0 -at "long" liquidGlobals;
  setAttr liquidGlobals.numDD $numDD;
  liquidDrawDisplayDrivers;
}

// add an additional display driver parameter, type string = 0 and float = 1
global proc liquidGlobalsAddDDParam ( int $DDnum )
{
  if ( !`attributeQuery -node liquidGlobals -ex ( "numDD" + $DDnum + "Param" )` ) {
    addAttr -ln ( "numDD" + $DDnum + "Param" ) -at "long" liquidGlobals;
  }
  int $numDDParam = `getAttr ( "liquidGlobals.numDD" + $DDnum + "Param" )`;
  $numDDParam += 1;
  addAttr -ln ( "dd" + $DDnum + "Param" + $numDDParam + "Name" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $DDnum + "Param" + $numDDParam + "Data" ) -dt "string" liquidGlobals;
  addAttr -ln ( "dd" + $DDnum + "Param" + $numDDParam + "Type" ) -dv 1 -at "long" liquidGlobals;
  setAttr ( "liquidGlobals.numDD" + $DDnum + "Param" ) $numDDParam;
  liquidDrawDisplayDrivers;
}

global proc liquidGlobalsDeleteDDParam ( int $DDnum )
{
  int $numDDParam = `getAttr ( "liquidGlobals.numDD" + $DDnum + "Param" )`;
  deleteAttr ( "liquidGlobals.dd" + $DDnum + "Param" + $numDDParam + "Name" );
  deleteAttr ( "liquidGlobals.dd" + $DDnum + "Param" + $numDDParam + "Data" );
  deleteAttr ( "liquidGlobals.dd" + $DDnum + "Param" + $numDDParam + "Type" );
  $numDDParam -= 1;
  setAttr ( "liquidGlobals.numDD" + $DDnum + "Param" ) $numDDParam;
  liquidDrawDisplayDrivers;
}

global proc liquidGlobalsChangeDDParam( int $row, int $column, int $val )
{
  if ( $val == 1 ) {
    string $value = `textField -q -tx ( "dd" + $row + "Param" + $column + "NameField" )`;
    setAttr ( "liquidGlobals.dd" + $row + "Param" + $column + "Name" ) -type "string" $value;
  } else if ( $val == 2 ) {
    string $value = `textField -q -tx ( "dd" + $row + "Param" + $column + "DataField" )`;
    setAttr ( "liquidGlobals.dd" + $row + "Param" + $column + "Data" ) -type "string" $value;
  }
}

global proc liquidGlobalsDeleteDD()
{
  int $numDD = `getAttr liquidGlobals.numDD`;
  if ( $numDD != 1 ) {
    deleteAttr ( "liquidGlobals.dd" + $numDD + "imageName" );
    deleteAttr ( "liquidGlobals.dd" + $numDD + "imageType" );
    deleteAttr ( "liquidGlobals.dd" + $numDD + "imageMode" );
    deleteAttr ( "liquidGlobals.dd" + $numDD + "paramType" );
    deleteAttr ( "liquidGlobals.dd" + $numDD + "enable"    );
    deleteAttr ( "liquidGlobals.numDD" + $numDD + "Param" );
    deleteUI ( "DD" + $numDD + "frameLayoutDD" );
    $numDD--;
    setAttr liquidGlobals.numDD $numDD;
  } else {
    warning("Can't delete the first display driver!");
  }
}


global proc liquidGlobalsFrameTab()
{
  setUITemplate -pushTemplate attributeEditorTemplate;

  columnLayout -adj true liquidGlobalsFrameSet;
    frameLayout -bs "etchedIn" -l "Output Passes" -cll true -cl false;
      columnLayout -adj true ;
        liquidShowBoolGlobal "outputHeroPass" "Hero";
        liquidShowBoolGlobal "outputShadowPass" "Shadow";
      setParent ..;
    setParent ..;

    frameLayout -bs "etchedIn" -l "Camera" -cll true -cl false;
      columnLayout -adj true ;
        if ( `attributeQuery -node liquidGlobals -ex renderCamera` ) {
          string $ccmd;
          string $ccurrentVal;
          $ccmd = ( "liquidChangeTextAttr liquidGlobals renderCamera liquidGlobalsCameraSelect" );
          $ccurrentVal = `getAttr liquidGlobals.renderCamera`;
          textFieldGrp -label "Render Camera" -text ( $ccurrentVal ) -ann "right-click to get access\nto the camera list." -cc $ccmd liquidGlobalsCameraSelect;
          popupMenu -button 3 cameraListMenu;
          string $cameraList[] = `ls -cameras`;
          string $camera;
          for ( $camera in $cameraList ) {
            menuItem -l $camera -c ( "textFieldGrp -e -tx " + $camera + " liquidGlobalsCameraSelect; liquidChangeTextAttr liquidGlobals renderCamera liquidGlobalsCameraSelect" ) ( $camera + "Selection" );
          }
          setParent -menu ..;
        }
        if ( objExists( "liquidGlobals.rotateCamera" ) ) {
          liquidShowBoolGlobalPlus "rotateCamera" "Rotate Camera" "This will rotate your final render by 90 degrees.";
        }
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Resolution" -cll true -cl false;
      columnLayout -adj true ;
        liquidShowIntGlobal "xResolution" "Width";
        liquidShowIntGlobal "yResolution" "Height";
        separator;
        liquidShowFloatGlobal "pixelAspectRatio" "Pixel Aspect Ratio";
      setParent ..;
    setParent ..;

    frameLayout -bs "etchedIn" -l "Animation" -cll true -cl false;
      columnLayout -adj true ;
        liquidShowBoolGlobal "doAnimation" "Animation";
        liquidShowIntGlobal  "startFrame"  "Start Frame";
        liquidShowIntGlobal  "endFrame"    "End Frame";
        liquidShowIntGlobal  "frameStep"   "Frame Step";
      setParent ..;
    setParent ..;

    frameLayout -bs "etchedIn" -l "Motion Blur & Depth of Field" -cll true -cl false;
      columnLayout -adj true ;
        liquidShowBoolGlobal "transformationBlur" "Transformation Blur";
        liquidShowBoolGlobal "deformationBlur"    "Deformation Blur";
        liquidShowIntGlobal  "motionBlurSamples"  "Motion Samples";
        liquidShowIntGlobal  "motionFactor"       "Motion Factor";
        separator;
        liquidShowBoolGlobalPlus "cameraBlur"     "Camera Blur" "This is a potentially expensive switch...";
        liquidShowIntGlobalMenu "shutterConfig"   "Shutter Configuration" {"Open on Frame","Center on Frame","Center Between Frames","Close on Next Frame"};
        separator;
        liquidShowBoolGlobal "depthOfField"       "Depth of Field";
      setParent ..;
    setParent ..;
  setParent ..;

  setUITemplate -popTemplate;
}

global proc liquidGlobalsFileTab()
{
  columnLayout -adj true liquidGlobalsFileSet;

  frameLayout -bs "etchedIn" -l "RIB Name" -cll true -cl false;
    columnLayout -adj true;
      liquidShowStringGlobal "ribName"   "RIB Basename";
      liquidShowBoolGlobal   "beautyRibHasCameraName" "Camera in Beauty RIB name";
      separator;
      liquidShowBoolGlobal   "doPadding" "RIB Extension Padding";
      liquidShowIntGlobal    "padding"   "Padding";
    setParent ..;
  setParent ..;

  frameLayout -bs "etchedIn" -l "Shot Infos" -cll true -cl false;
    columnLayout -adj true;
      liquidShowStringGlobal "shotName"     "Shot Name";
      liquidShowStringGlobal "shotVersion"  "Shot Version";
    setParent ..;
  setParent ..;

  frameLayout -bs "etchedIn" -l "Directories" -cll true -cl false;
    columnLayout -adj true;
      liquidShowStringGlobal "pictureDirectory" "Rendered Pictures";
      liquidShowStringGlobal "textureDirectory" "Textures/Generated Maps";
      liquidShowStringGlobal "ribDirectory"     "RIBs";
      liquidShowStringGlobal "shaderDirectory"  "Generated Shaders";
      liquidShowStringGlobal "tempDirectory"    "Temporary Files";

      liquidShowBoolGlobal   "createOutputDirectories" "Create Missing Directories";

    setParent ..;
  setParent ..;

  frameLayout -bs "etchedIn" -l "Search Paths" -cll true -cl false;
    columnLayout -adj true;
      string $pathInfo = ("When this field is empty, it will be inited to 'sensible' defaults.\n"+
                          "If you fill it, it will replace the defaults.\n"+
                          "If your replacement end with ':', it will be added before the defaults.\n"+
                          "If your replacement starts with ':', it will be added after the defaults.");
      liquidShowStringGlobalPlus "shaderPath"       "Shaders"     $pathInfo;
      liquidShowStringGlobalPlus "texturePath"      "Textures"    $pathInfo;
      liquidShowStringGlobalPlus "archivePath"      "Archives"    $pathInfo;
      liquidShowStringGlobalPlus "proceduralPath"   "Procedurals" $pathInfo;
    setParent ..;
  setParent ..;
  frameLayout -bs "etchedIn" -l "Before & After" -cll true -cl false;
    columnLayout -adj true;
      liquidShowStringGlobal "preframeMel"  "Pre Frame MEL";
      liquidShowStringGlobal "postframeMel" "Post Frame MEL";
    setParent ..;
  setParent ..;
  setParent ..;
}

global proc liquidGlobalsImageTab()
{
  global string $liqHidersList[];
  global string $liqPixelFiltersList[];

  columnLayout -adj true liquidGlobalsQualitySet;
    frameLayout -bs "etchedIn" -l "Sampling & Shading" -cll true -cl false;
      columnLayout -adj true;

        liquidShowFloatGlobal   "shadingRate"  "Shading Rate";
        liquidShowIntGlobal     "pixelSamples" "Pixel Samples";

        separator;

        liquidShowIntGlobalMenu "hider"        "Hider" $liqHidersList;
        liquidShowBoolGlobal    "jitter"       "Jitter";

        validateHidersMenu();
      setParent ..;
    setParent ..;

    frameLayout -bs "etchedIn" -l "Filtering" -cll true -cl false;
      columnLayout -adj true;

        liquidShowIntGlobalMenu "pixelFilter" "Pixel Filter" $liqPixelFiltersList;

        validatePixelFilterMenu();
        liquidShowIntGlobal     "pixelFilterX" "Filter Width";
        liquidShowIntGlobal     "pixelFilterY" "Filter Height";
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Reyes" -cll true -cl false;
      columnLayout -adj true;
        liquidShowIntGlobal   "limitsEyeSplits"     "Eye Splits";
        liquidShowIntGlobal   "limitsGPrimSplits"   "Geometry Splits";
        separator;
        liquidShowIntGlobal   "limitsBucketXSize"   "Bucket Width";
        liquidShowIntGlobal   "limitsBucketYSize"   "Bucket Height";
        liquidShowIntGlobal   "limitsGridSize"      "Grid Size";
        liquidShowIntGlobal   "limitsTextureMemory" "Texture Memory (Kb)";
        separator;
        liquidShowFloatGlobal "limitsOThreshold"    "Opacity Threshold";
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Image" -cll true -cl false;
      columnLayout -adj true;
        liquidShowIntGlobal   "imageDepth" "Bit Depth";

        separator;
        liquidShowFloatGlobal "gain" "Gain";
        liquidShowFloatGlobal "gamma" "Gamma";

        frameLayout -bs "etchedIn" -l "Crop Window" -cll true -cl false;
          columnLayout -adj true;
            liquidShowCropWindowViewer();
            liquidShowFloatGlobal "cropX1" "Left";
            liquidShowFloatGlobal "cropY1" "Top";
            liquidShowFloatGlobal "cropX2" "Right";
            liquidShowFloatGlobal "cropY2" "Bottom";

          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;
  setParent ..;
}

global proc liquidGlobalsDisplaysTab()
{
  columnLayout -adj true liquidGlobalsDDSet;
    // Build Display Driver List
    liquidDrawDisplayDrivers;
  setParent ..;
}

global proc liquidGlobalsRaysTab()
{
  columnLayout -adj true liquidGlobalsRaysSet;
    frameLayout -bs "etchedIn" -l "Ray Tracing" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal "useRayTracing" "Enable";
        separator;
        liquidShowFloatGlobal "traceBreadthFactor"     "Trace Breadth Factor";
        liquidShowFloatGlobal "traceDepthFactor"       "Trace Depth Factor";
        separator;
        liquidShowIntGlobal   "traceMaxDepth"          "Max. Ray Depth";
        liquidShowFloatGlobal "traceSpecularThreshold" "Specular Threshold";
        separator;
        liquidShowBoolGlobal  "traceRayContinuation"   "Ray Continuation";
        liquidShowIntGlobal   "traceCacheMemory"       "Geo Cache Size";
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "General" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal  "traceDisplacements"   "Trace Displacements";
        liquidShowBoolGlobal  "traceSampleMotion"    "Sample Motion";
        separator;
        liquidShowFloatGlobal "traceBias"            "Trace Bias";
        separator;
        liquidShowIntGlobal   "traceMaxSpecularDepth" "Max. Specular Depth";
        liquidShowIntGlobal   "traceMaxDiffuseDepth"  "Max. Diffuse Depth";
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Global Illumination" -cll true -cl false;
      columnLayout -adj true;
        liquidShowFloatGlobal  "irradianceMaxError"     "Max. Error";
        liquidShowFloatGlobal  "irradianceMaxPixelDist" "Max. Pixel Distance";
        separator;
        frameLayout -bs "etchedIn" -l "Irradiance Cache" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal  "irradianceHandle"   "File";
            liquidShowIntGlobalMenu "irradianceFileMode" "Mode" {"Ignore", "Read", "Write"};
          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;
  setParent ..;
}

global proc liquidGlobalsOptionsTab()
{
  columnLayout -adj true liquidGlobalsOptionSet;
    frameLayout -bs "etchedIn" -l "Shadow Maps" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal  "ignoreShadows"  "Omit Shadow RIBs";
        separator;
        liquidShowBoolGlobal  "fullShadowRibs" "Write Full Shadow RIBs";
        liquidShowBoolGlobal  "lazyCompute"    "Lazy Compute";
        frameLayout -bs "etchedIn" -l "Depth Shadows" -cll true -cl false;
          columnLayout -adj true;
            liquidShowFloatGlobal "limitsZThreshold"       "Opacity Threshold";
            separator;
            liquidShowBoolGlobal  "outputShadersInShadows" "Output All Shaders";
          setParent ..;
        setParent ..;
        frameLayout -bs "etchedIn" -l "Deep Shadows" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "outputShadersInDeepShadows" "Output All Shaders";
            liquidShowBoolGlobal "outputLightsInDeepShadows"  "Output Lightsources";
          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "RIB" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal "exportReadArchive" "Read Archivable RIB";
        liquidShowBoolGlobal "renderAllCurves"   "Render All NURB Curves";
        liquidShowBoolGlobal "outputMeshUVs"     "Output Mesh UVs";
        frameLayout -bs "etchedIn" -l "Omit Shaders" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "ignoreSurfaces"      "No Surfaces";
            liquidShowBoolGlobal "ignoreDisplacements" "No Displacements";
            liquidShowBoolGlobal "ignoreLights"        "No Lightsources";
            liquidShowBoolGlobal "ignoreVolumes"       "No Volumes";
          setParent ..;
        setParent ..;
        frameLayout -bs "etchedIn" -l "Resource Paths" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "relativeFileNames" "Project Relative Paths";
            liquidShowBoolGlobalPlus "shortShaderNames"  "No Shader Paths" "Don't output path names with shaders";
          setParent ..;
        setParent ..;
        frameLayout -bs "etchedIn" -l "Shaders" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "expandShaderArrays" "Expand Shader Arrays";
          setParent ..;
        setParent ..;
        frameLayout -bs "etchedIn" -l "Before & After RIB Requests" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal "preWorld"  "Before WorldBegin";
            separator;
            liquidShowStringGlobal "postWorld" "After WorldBegin";
            liquidShowStringGlobal "preGeom"   "Before Primitives";
          setParent ..;
        setParent ..;
        frameLayout -bs "etchedIn" -l "RIB Format" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "binaryOutput"     "Binary";
            liquidShowBoolGlobal "compressedOutput" "GZip Compressed";
          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Clean Up" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal "cleanRib"  "Clean RIBs";
        liquidShowBoolGlobal "cleanTex"  "Clean Texture Maps";
        liquidShowBoolGlobal "cleanShad" "Clean Shadow Maps";
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Feedback" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal "showProgress"   "Show Progress";
        liquidShowBoolGlobal "outputComments" "Output Detailed Comments";
        separator;
        liquidShowBoolGlobal "shaderDebug" "Shader Debugging";
      setParent ..;
    setParent ..;
  setParent ..;
}

global proc liquidGlobalsJobTab()
{
  columnLayout -adj true liquidGlobalsJobSet;
    frameLayout -bs "etchedIn" -l "Global" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBoolGlobal    "launchRender" "Launch Render";
        liquidShowBoolGlobal    "justRib" "Only Generate RIBs";
        separator;
        liquidShowBoolGlobal    "useRenderScript" "Use Render Job Script";
        liquidShowIntGlobalMenu "renderScriptFormat" "Job Script Format" {"None","Alfred","XML"};
      setParent ..;
    setParent ..;

    frameLayout -bs "etchedIn" -l "Job Script Options" -cll true -cl false;
      columnLayout -adj true;
        liquidShowStringGlobal "renderJobName" "Job Name";

        separator;
        liquidShowBoolGlobal   "deferredGen"   "Deferred RIB Generation";
        liquidShowIntGlobal    "deferredBlock" "Deferred Block Size";
        liquidShowBoolGlobal   "remoteRender"  "Remote Render";
        liquidShowBoolGlobal   "netRManRender" "Net RenderMan";

        separator;
        liquidShowIntGlobal    "minCPU" "Min CPU";
        liquidShowIntGlobal    "maxCPU" "Max CPU";

        frameLayout -bs "etchedIn" -l "Commands" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal "renderScriptCommand" "Job Script Interpreter";
            liquidShowStringGlobal "ribgenCommand"       "RIB Generator";
          setParent ..;
        setParent ..;

        frameLayout -bs "etchedIn" -l "Before" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal "preCommand"      "Pre Command";
            liquidShowStringGlobal "preJobCommand"   "Pre Job Command";
            liquidShowStringGlobal "preFrameCommand" "Pre Frame Command";
          setParent ..;
        setParent ..;

        frameLayout -bs "etchedIn" -l "After" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal "postFrameCommand" "Post Frame Command";
            liquidShowStringGlobal "postJobCommand"   "Post Job Command";
          setParent ..;
        setParent ..;

        frameLayout -bs "etchedIn" -l "Deferred" -cll true -cl false;
          columnLayout -adj true;
            liquidShowStringGlobal "key"     "Deferred Tag";
            liquidShowStringGlobal "service" "Deferred Service";
          setParent ..;
        setParent ..;

        frameLayout -bs "etchedIn" -l "Clean Up" -cll true -cl false;
          columnLayout -adj true;
            liquidShowBoolGlobal "cleanRenderScript" "Clean Job Script";
          setParent ..;
        setParent ..;
      setParent ..;
    setParent ..;

      frameLayout -bs "etchedIn" -label "Alfred Specific" -cll true -cl false;
        columnLayout -adj true;
          liquidShowStringGlobal "alfredTags"     "Alfred Tags";
          liquidShowStringGlobal "alfredServices" "Alfred Services";
          liquidShowBoolGlobal   "expandAlfred"   "Alfred Expand Support";
        setParent ..;
      setParent ..;

  setParent ..;
}

global proc liquidGlobalsRendererTab()
{
  global string $liqHidersList[];
  global string $liqPixelFiltersList[];
  global string $liqFeaturesList[];
  global string $liqRequiredList[];

  columnLayout -cat left 0 -adj true liquidGlobalsRendererSet;
    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Commands" -cll true -cl false;
      columnLayout -adj true;
        liquidShowStringGlobal "renderCommand" "Renderer";
        liquidShowStringGlobal "renderCmdFlags" "Flags";

        separator;
        liquidShowStringGlobal "previewer" "Previewer";
        liquidShowStringGlobal "shaderInfo" "Shader Info";
        liquidShowStringGlobal "shaderComp" "Shader Compiler";
        liquidShowStringGlobal "makeTexture" "Make Texture";
        liquidShowStringGlobal "viewTexture" "Texture Viewer";

        separator;
        liquidShowStringGlobal "shaderExt" "Shader Extension";
      setParent..;
    setParent..;

    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Hiders" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBitFieldGlobal( "bits_hiders", $liqHidersList, "validateHidersMenu" );
      setParent..;
    setParent..;
    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Pixel Filters" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBitFieldGlobal( "bits_filters", $liqPixelFiltersList, "validatePixelFilterMenu" );
      setParent..;
    setParent..;

    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Features" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBitFieldGlobal( "bits_features", $liqFeaturesList, "" );
      setParent..;
    setParent..;

    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Requirements" -cll true -cl false;
      columnLayout -adj true;
        liquidShowBitFieldGlobal( "bits_required", $liqRequiredList, "" );
      setParent..;
    setParent..;

    frameLayout -mh 5 -mw 5 -bs "etchedIn" -l "Deep Shadow Display Driver" -cll true -cl false;
      columnLayout -adj true;
        liquidShowStringGlobal "dshDisplayName" "Display Name";
        liquidShowStringGlobal "dshImageMode" "Image Mode";
      setParent..;
    setParent..;
  setParent..;
}

global proc liquidGlobalsFluidTab()
{
  columnLayout -adj true liquidGlobalsFluidSet;
    frameLayout -bs "etchedIn" -l "Shader Preview" -cll true -cl false;
      columnLayout -adj true;
        liquidShowIntGlobalMenu "previewType" "Preview Type" {"Fluid Window", "External Window"};
        separator;
        columnLayout -adj true liquidGlobalsFluidPreviewSet;
          liquidShowIntGlobal     "previewSize"           "Size";
          liquidShowIntGlobalMenu "previewPrimitive"      "Primitive" {"Sphere", "Cube", "Cylinder", "Torus", "Plane", "Teapot"};
          liquidShowStringGlobal  "previewDisplayDriver"  "Display Driver";
          liquidShowIntGlobalMenu "previewConnectionType" "Connection Type" {"RIB", "Pipe"};
          separator;
          liquidShowStringGlobal "previewRenderer" "Render Command";
        setParent ..;
      setParent ..;
    setParent ..;
    frameLayout -bs "etchedIn" -l "Shader Browser" -cll true -cl false;
      columnLayout -adj true;
        liquidShowStringGlobal "fluidShaderBrowserDefaultPath" "Default Path";
      setParent ..;
    setParent ..;
  setParent ..;

}

global proc liquidGlobalsForm() {
  global string $defTextViewerName;
  global string $liqHidersList[];
  global string $liqPixelFiltersList[];
  global string $liqFeaturesList[];
  global string $liqRequiredList[];

  if ( !`renderer -q -ex liquid` ) setParent liquidGlobalsWindow;

  formLayout -numberOfDivisions 5 liquidGlobalsForm;
    tabLayout -scr true -cr true liquidGlobalsTab;
      liquidGlobalsFrameTab();
      liquidGlobalsFileTab();
      liquidGlobalsDisplaysTab();
      liquidGlobalsImageTab();
      liquidGlobalsRaysTab();
      liquidGlobalsOptionsTab();
      liquidGlobalsJobTab();
      liquidGlobalsRendererTab();
      liquidGlobalsFluidTab();

      tabLayout -e
        -tabLabel "liquidGlobalsFileSet"     "File"
        -tabLabel "liquidGlobalsFrameSet"    "Frame"
        -tabLabel "liquidGlobalsDDSet"       "Displays"
        -tabLabel "liquidGlobalsQualitySet"  "Image"
        -tabLabel "liquidGlobalsRaysSet"     "Rays"
        -tabLabel "liquidGlobalsOptionSet"   "Options"
        -tabLabel "liquidGlobalsJobSet"      "Job"

        -tabLabel "liquidGlobalsRendererSet" "Renderer"
        -tabLabel "liquidGlobalsFluidSet"    "Fluid"
        liquidGlobalsTab;
    setParent ..;

    button -label "Close" -h 26 -command "window -e -vis false liquidGlobalsWindow" liquidGlobalscloseButton;

    formLayout -edit
      -attachForm liquidGlobalscloseButton "bottom" 0
      -attachForm liquidGlobalscloseButton "left"   0
      -attachForm liquidGlobalscloseButton "right"  0

      -attachForm liquidGlobalsTab "left"  0
      -attachForm liquidGlobalsTab "right" 0
      -attachForm liquidGlobalsTab "top"   0
      -attachControl liquidGlobalsTab "bottom" 0 liquidGlobalscloseButton
      liquidGlobalsForm;
}

global proc liquidGlobalsWindow()
{

  string $layoutType = "tab";
  string $layoutCommand;
  string $layoutOptions;
  string $cmd;
  string $currentVal;

  if ( `whatIs liquid` != "Command" ) {
    error("Liquid plugin is not loaded");
    return;
  }
  if ( !`liquidGlobalsExists` ) {
    liquidCreateGlobals;
  }
  if ( `window -exists liquidGlobalsWindow` ) {
    deleteUI liquidGlobalsWindow;
  }
  if ( !`window -exists liquidGlobalsWindow` ) {
    liquidAddGlobals;
    window -mb true -title "Liquid Render Globals" -iconName "liquidGlobals" -rtf true liquidGlobalsWindow;
    menu -label "Presets" -p liquidGlobalsWindow liquidGlobalsPresetMenu;
      menuItem -label "Save..." -c liquidSavePreset -p liquidGlobalsPresetMenu liquidGlobalsPresetMenuSave;
      menuItem -label "Save as Default" -enable false;
      menuItem -label "Reset to Default" -enable false;
      menuItem -divider true;
    liquidAddPresets;
    setParent liquidGlobalsWindow;
    liquidGlobalsForm;
  }
  showWindow liquidGlobalsWindow;
}

