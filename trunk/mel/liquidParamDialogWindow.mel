//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are: // Copyright 1988, 1989, Pixar // All Rights Reserved////// RenderMan (R) is a registered trademark of Pixar
//
//  Creation Date:    May 11, 2000
//
//  Procedure Name:
//  liquidParamDialogWindow
//
//  Description:
//  creates a pretty window for editing the rman shader parameters 	
//

global proc liquidChangeColAttr ( string $selectedObj, string $argName, string $fieldName )
{
  float $value[] = `colorSliderGrp -q -rgbValue $fieldName`;
  setAttr ( $selectedObj + "." + $argName ) -type "double3" $value[0] $value[1] $value[2];
  liquidParamAU $selectedObj;
}

global proc liquidChangeTextAttr ( string $selectedObj, string $argName, string $fieldName )
{
  string $fieldValue = `textFieldGrp -q -text $fieldName`;
  setAttr ( $selectedObj + "." + $argName ) -type "string" $fieldValue;
  liquidParamAU $selectedObj;
}

global proc liquidChangeTextDoubleAttr ( string $selectedObj, string $argName, string $fieldName )
{
  string $fieldValue = `textFieldGrp -q -text $fieldName`;
  string $tokenized[];
  tokenize $fieldValue " " $tokenized;
  int $size = size($tokenized);
  eval setAttr ( $selectedObj + "." + $argName ) -type doubleArray $size $fieldValue;
  liquidParamAU $selectedObj;
}

global proc liquidAssignTextDoubleAttr ( string $selectedObj, string $argName, string $fieldName )
{
  string $fieldValue;
  float $doubleVals[] = `liquidGetAttr -node $selectedObj -attr $argName`;
  int $size = size($doubleVals);
  int $i;
  for ( $i = 0; $i < $size; $i ++ )
  {
    $fieldValue = $fieldValue + $doubleVals[$i] + " ";
  }
  textFieldGrp -e -text $fieldValue $fieldName;
  liquidParamAU $selectedObj;
}

global proc liquidParamAU( string $selectedObj ) 
{
  if ( `checkBox -exists ( "auButton" + $selectedObj )`) {
    if ( `checkBox -q -v ( "auButton" + $selectedObj )` ) {
      liquidPreviewShader -sphere -shader $selectedObj;
    }
  }
}

global proc string liquidReadString( int $fileID )
{
  string $returnValue = "";
  int $inString = 0;
  int $continue = 1;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "\"\"" ) {
    } else if ( gmatch( $token, "\"*\";" ) ) {
      $inString = 0;
      $returnValue = substring( $token, 2, size( $token ) - 2 );
      $continue = 0;
    } else if ( $token == "\"" ) {
      $inString = 1;
    } else if ( gmatch( $token, "\"*" ) ) {
      $inString = 1;
      $returnValue += substring( $token, 2, size( $token ) );
    } else if ( gmatch( $token, "*\";" ) && $inString ) {
      $inString = 0;
      $returnValue += ( " " + substring( $token, 1, size( $token ) - 2 ) );
      $continue = 0;
    } else {
      $returnValue += ( " " + $token );
    }
  }
  return $returnValue;
}

global proc string[] liquidReadArray( int $fileID )
{
  string $returnValue[];
  int $inString = 0;
  int $continue = 1;
  int $arrayOn = 0;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "[]" ) {
    } else if ( gmatch( $token, "[*];" ) ) {
      $inString = 0;
      $returnValue[$arrayOn] = substring( $token, 2, size( $token ) - 2 );
      $continue = 0;
    } else if ( $token == "[" ) {
      $inString = 1;
    } else if ( gmatch( $token, "[*" ) ) {
      $inString = 1;
      string $arrayVal = substring( $token, 2, size( $token ) );
      if ( gmatch( $arrayVal, "\"*\"" ) ) {
        $returnValue[$arrayOn] = substring( $arrayVal, 2, size( $arrayVal ) - 1 );
      } else {
        $returnValue[$arrayOn] = $arrayVal;
      }
      $arrayOn++;
    } else if ( gmatch( $token, "*];" ) && $inString ) {
      $inString = 0;
      if ( size( $token ) > 2 ) {
        string $arrayVal = substring( $token, 1, size( $token ) - 2 );
        if ( gmatch( $arrayVal, "\"*\"" ) ) {
          $returnValue[$arrayOn] = substring( $arrayVal, 2, size( $arrayVal ) - 1 );
        } else {
          $returnValue[$arrayOn] = $arrayVal;
        }
        $arrayOn++;
      }
      $continue = 0;
    } else {
      if ( gmatch( $token, "\"*\"" ) ) {
        $returnValue[$arrayOn] = substring( $token, 2, size( $token ) - 1 );
      } else {
        $returnValue[$arrayOn] = $token;
      }
      $arrayOn++;
    }
  }
  return $returnValue;
}

global proc string liquidGetDescLIF( int $fileID, string $argName ) 
{
  string $returnValue = "";
  int $inParam = 0;
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "param" ) {
      string $paramName = `liquidReadString( $fileID )`;
      if( ( $paramName == $argName ) && !$inParam ) {
        $inParam = 1;
      } else {
        $inParam = 0;
      }
    }
    if ( $token == "desc" && $inParam ) {
      $returnValue = `liquidReadString( $fileID )`;
      $continue = 0;
    }
  }
  return $returnValue;
}

global proc string liquidGetNameLIF( int $fileID, string $argName ) 
{
  string $returnValue = "";
  int $inParam = 0;
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "param" ) {
      string $paramName = `liquidReadString( $fileID )`;
      if( ( $paramName == $argName ) && !$inParam ) {
        $inParam = 1;
      } else {
        $inParam = 0;
      }
    }
    if ( $token == "name" && $inParam ) {
      $returnValue = `liquidReadString( $fileID )`;
      $continue = 0;
    }
  }
  return $returnValue;
}

global proc string liquidGetTypeLIF( int $fileID, string $argName ) 
{
  string $returnValue = "";
  int $inParam = 0;
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "param" ) {
      string $paramName = `liquidReadString( $fileID )`;
      if( ( $paramName == $argName ) && !$inParam ) {
        $inParam = 1;
      } else {
        $inParam = 0;
      }
    }
    if ( $token == "type" && $inParam ) {
      $returnValue = `liquidReadString( $fileID )`;
      $continue = 0;
    }
  }
  return $returnValue;
}

global proc string[] liquidGetRangeLIF( int $fileID, string $argName ) 
{
  string $returnValue[];
  int $inParam = 0;
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "param" ) {
      string $paramName = `liquidReadString( $fileID )`;
      if( ( $paramName == $argName ) && !$inParam ) {
        $inParam = 1;
      } else {
        $inParam = 0;
      }
    }
    if ( $token == "range" && $inParam ) {
      $returnValue = `liquidReadArray( $fileID )`;
      $continue = 0;
    }
  }
  return $returnValue;
}

global proc int liquidCheckParamLIF( int $fileID, string $argName ) 
{
  int $returnValue = 0;
  int $inParam = 0;
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "param" ) {
      string $paramName = `liquidReadString( $fileID )`;
      if( ( $paramName == $argName ) && !$inParam ) {
        $returnValue = 1;
        $continue = 0;
      }
    }
  }
  return $returnValue;
}

global proc int liquidHandleLIF( int $argNum, string $shaderName, string $selectedObj ) 
{
  int $returnValue = 0;
  string $truncatedShaderName = substring( $shaderName, 1, size( $shaderName ) - 4 );
  if ( `filetest -r ( $truncatedShaderName + ".lif" )` ) {
    string $range[];
    $range[0] = "-100";
    $range[1] = "100";
    string $argName = `liquidGetSloInfo -argName $argNum $shaderName`; 
    string $argType = `liquidGetSloInfo -argType $argNum $shaderName`; 
    int $argArrayLen = `liquidGetSloInfo -argArraySize $argNum $shaderName`;
    $fileID = `fopen ( $shaderName + ".lif" ) "r"`;
    if ( !`liquidCheckParamLIF $fileID $argName` ) return 1;
    string $description = `liquidGetDescLIF $fileID $argName`;
    string $name = `liquidGetNameLIF $fileID $argName`;
    string $type = `liquidGetTypeLIF $fileID $argName`;
    $range = `liquidGetRangeLIF $fileID $argName`;
    if ( $name == "" ) $name = $argName;
    fclose $fileID; 
    if ( $argType == "float" && `attributeQuery -node $selectedObj -ex $argName` ) {
      if ( $argArrayLen > 0 ) {
        string $myCommand = ( "liquidChangeTextDoubleAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
        textFieldGrp -ann $description -label $name -adj 2 -cc $myCommand ( $argName + $selectedObj + "WindowParam" );
        liquidAssignTextDoubleAttr $selectedObj $argName ( $argName + $selectedObj + "WindowParam" ) ;
      } else if ( $type == "slider" ) {
        float $minValue = $range[0];
        float $maxValue = $range[1];
        attrFieldSliderGrp -adj 3 -label $name -cc ( "liquidParamAU " + $selectedObj) 
            -ann $description
            -minValue $minValue -maxValue $maxValue
            -sliderMinValue $minValue -sliderMaxValue $maxValue
            -fieldMinValue $minValue -fieldMaxValue $maxValue
            -at ( $selectedObj + "." + $argName )
            ( $argName + $selectedObj + "WindowParam" );
      } else if ( $type == "selector" ) {
        rowLayout -numberOfColumns 2 -adjustableColumn 2;
        text -align "right" -label $name; 
        button -label $range[0] ( $argName + $selectedObj + "WindowParam" );
        popupMenu -button 1 ( $argName + $selectedObj + "WindowParamMenu" );
        int $numSize = size( $range );
        float $currentVal = `getAttr ( $selectedObj + "." + $argName )`;
        int $k;
        for ( $k = 0; $k < $numSize; $k = $k + 2 ) 
        {
          string $myCommand = ( "setAttr " + $selectedObj + "." + $argName + " " + $range[ $k + 1 ] + "; button -e -l \"" + $range[ $k ] + "\" " + $argName + $selectedObj + "WindowParam") ;
          menuItem -c $myCommand -l $range[ $k ];
        }
        int $setButton = 0;
        for ( $k = 0; $k < $numSize; $k = $k + 2 ) 
        {
          float $selectionVal = $range[ $k + 1 ];
          if ( $selectionVal == $currentVal ) {
            button -e -l $range[ $k ] ( $argName + $selectedObj + "WindowParam");
            $setButton = 1;
          }
        }
        if ( !$setButton ) { 
          float $selectionVal = $range[ 1 ];
          setAttr ( $selectedObj + "." + $argName )  $selectionVal;
          button -e -l $range[ 0 ] ( $argName + $selectedObj + "WindowParam"); 
        }
        setParent ..;
      } else {
        attrFieldSliderGrp -adj 3 -label $name -cc ( "liquidParamAU " + $selectedObj) 
            -ann $description
            -minValue -10.0 -maxValue 10.0
            -sliderMinValue 0.0 -sliderMaxValue 2.0
            -fieldMinValue -10000000.0 -fieldMaxValue 10000000.0
            -at ( $selectedObj + "." + $argName )
            ( $argName + $selectedObj + "WindowParam" );
      }
    }
    if ( $argType == "string" && `attributeQuery -node $selectedObj -ex $argName` ) {
      string $currentValue = `getAttr ( $selectedObj + "." + $argName )`;
      string $myCommand = ( "liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
      textFieldGrp -ann $description -label $name -adj 2 -text  $currentValue -cc $myCommand ( $argName + $selectedObj + "WindowParam" );
    }
    if ( $argType == "color" && `attributeQuery -node $selectedObj -ex $argName` ) {
      string $myCommand = ( "liquidChangeColAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
      float $cV[] = `getAttr ( $selectedObj + "." + $argName )`;
      colorSliderGrp -ann $description -label $name -rgbValue $cV[0] $cV[1] $cV[2] -cc $myCommand ( $argName + $selectedObj + "WindowParam" ) ;
    }
    if ( $argType == "point" || $argType == "vector" || $argType == "normal" ) {
      if ( `attributeQuery -node $selectedObj -ex $argName` ) {
        attrFieldGrp -ann $description -label $name -cc ( "liquidParamAU " + $selectedObj) -attribute ( $selectedObj + "." + $argName );
      }
    }
    $returnValue = 1;
  } else {
    $returnValue = 0;
  }
  return $returnValue;
}

global proc liquidParamDialogWindow ( string $selectedObj, string $nodeType ) 
{
  int $i;
  string $longShaderName = `getAttr ( $selectedObj + ".rmanShaderLong" )`;
  string $shortShaderName = `getAttr ( $selectedObj + ".rmanShader" )`;

  if ( `window -q -exists ( "ParamWindow" + $shortShaderName + $selectedObj )` )
  {
    deleteUI ( "ParamWindow" + $shortShaderName + $selectedObj );
  }
  if ( $shortShaderName != "" ) {
    int $numShaderArgs = `liquidGetSloInfo -numParam $longShaderName`;
    window -title ( $selectedObj + " Parameters" ) 
      -sizeable true
      -widthHeight 500 300
      -iconName $shortShaderName 
      ( "ParamWindow" + $shortShaderName + $selectedObj );
      string $buttonCmd = "liquid -p";
      formLayout -numberOfDivisions 5 ( "paramForm" + $shortShaderName + $selectedObj );
      scrollLayout -cr true ( "paramScroll" + $shortShaderName + $selectedObj ); 
        columnLayout -adjustableColumn true;
        if ( $nodeType == "Surface" ) {
          text -label "Warning: Color and Opacity set Cs and";
          text -label "Os - these may not be what you want!";
          string $myCommand = ( "liquidChangeColAttr " + $selectedObj + " color color" + $selectedObj + "WindowParam" ) ;
          float $cV[] = `getAttr ( $selectedObj + ".color" )`;
          colorSliderGrp -adj 3 -label "Color" -rgbValue $cV[0] $cV[1] $cV[2] -cc $myCommand ( "color" + $selectedObj + "WindowParam" ) ;
          attrFieldSliderGrp -adj 3 -label "Opacity" 
            -cc ( "liquidParamAU " + $selectedObj)
            -minValue -1000.0 -maxValue 1000.0
            -sliderMinValue 0.0 -sliderMaxValue 1.0
            -fieldMinValue -1000.0 -fieldMaxValue 1000.0
            -at ( $selectedObj + ".opacity" )
            ( "opacity" + $selectedObj + "WindowParam" );
        }
        if ( $nodeType == "Light" ) {
          string $currentValue = `getAttr ( $selectedObj + ".shadowCamera" )`;
          string $myCommand = ( "liquidChangeTextAttr " + $selectedObj + " " + "shadowCamera" + " " + "shadowCamera" + $selectedObj + "WindowParam" ) ;
          textFieldGrp -adj 2
            -label "shadowCamera" 
            -text  $currentValue  
            -changeCommand $myCommand
            ( "shadowCamera" + $selectedObj + "WindowParam" );
          popupMenu -button 3 cameraListMenu;
          string $cameraList[] = `ls -cameras`;
          string $camera;
          for ( $camera in $cameraList ) {
            menuItem -l $camera -c ( "textFieldGrp -e -tx " + $camera + " shadowCamera" + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + "shadowCamera" + " " + "shadowCamera" + $selectedObj + "WindowParam" )
                      ( $camera + $selectedObj +"Selection" );
          }
          setParent -menu ..;
        }
        if ( $nodeType == "Disp" || $nodeType == "Surface" ) {
          if ( `attributeQuery -node $selectedObj -ex "displacementBound"` ) {
          attrFieldSliderGrp -adj 3 -label "Displacement Bound" -cc ( "liquidParamAU " + $selectedObj) 
            -minValue -1000.0 -maxValue 1000.0
            -sliderMinValue 0.0 -sliderMaxValue 5.0
            -fieldMinValue -1000.0 -fieldMaxValue 1000.0
            -at ( $selectedObj + ".displacementBound" )
            ( "displacementBound" + $selectedObj + "WindowParam" );
          }
        }
        for ( $i = 0; $i < $numShaderArgs; $i++ ) {
          if ( liquidHandleLIF( $i, $longShaderName, $selectedObj ) ) continue;
          string $argName = `liquidGetSloInfo -argName $i $longShaderName`; 
          string $argType = `liquidGetSloInfo -argType $i $longShaderName`;
          int $argArrayLen = `liquidGetSloInfo -argArraySize $i $longShaderName`;
          if ( $argType == "float" && `attributeQuery -node $selectedObj -ex $argName` ) {
            if ( $argArrayLen > 0 ) {
              string $myCommand = ( "liquidChangeTextDoubleAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
              textFieldGrp -label $argName -adj 2 -cc $myCommand ( $argName + $selectedObj + "WindowParam" );
              liquidAssignTextDoubleAttr $selectedObj $argName ( $argName + $selectedObj + "WindowParam" ) ;
            } else {
              attrFieldSliderGrp -adj 3 -label $argName -cc ( "liquidParamAU " + $selectedObj) 
                -minValue -10.0 -maxValue 10.0
                -sliderMinValue 0.0 -sliderMaxValue 2.0
                -fieldMinValue -10000000.0 -fieldMaxValue 10000000.0
                -at ( $selectedObj + "." + $argName )
                ( $argName + $selectedObj + "WindowParam" );
            }
          }
          if ( $argType == "string" && `attributeQuery -node $selectedObj -ex $argName` ) {
            string $currentValue = `getAttr ( $selectedObj + "." + $argName )`;
            string $myCommand = ( "liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
            textFieldGrp -label $argName -adj 2 -text  $currentValue -cc $myCommand ( $argName + $selectedObj + "WindowParam" );
            if ( $nodeType == "Light" ) {
              popupMenu -button 3 ( "shadowListMenu"+$selectedObj+$argName );
              menuItem -l "autoShadow" -c ( "textFieldGrp -e -tx autoShadow " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowPX" -c ( "textFieldGrp -e -tx autoShadowPX " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowPY" -c ( "textFieldGrp -e -tx autoShadowPY " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowPZ" -c ( "textFieldGrp -e -tx autoShadowPZ " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowNX" -c ( "textFieldGrp -e -tx autoShadowNX " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowNY" -c ( "textFieldGrp -e -tx autoShadowNY " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              menuItem -l "autoShadowNZ" -c ( "textFieldGrp -e -tx autoShadowNZ " + $argName + $selectedObj + "WindowParam; liquidChangeTextAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" );
              setParent -menu ..;
            }
          }
          if ( $argType == "color" && `attributeQuery -node $selectedObj -ex $argName` ) {
            string $myCommand = ( "liquidChangeColAttr " + $selectedObj + " " + $argName + " " + $argName + $selectedObj + "WindowParam" ) ;
            float $cV[] = `getAttr ( $selectedObj + "." + $argName )`;
            colorSliderGrp -adj 3 -label $argName -rgbValue $cV[0] $cV[1] $cV[2] -cc $myCommand ( $argName + $selectedObj + "WindowParam" ) ;
          }
          if ( $argType == "point" || $argType == "vector" || $argType == "normal" ) {
            if ( `attributeQuery -node $selectedObj -ex $argName` ) {
              attrFieldGrp -label $argName -cc ( "liquidParamAU " + $selectedObj) -attribute ( $selectedObj + "." + $argName );
            }
          }
        }
        setParent ( "paramForm" + $shortShaderName + $selectedObj );
        button -label "Preview Shader" -w 110 -h 22 -command ( "liquidFluidPreviewShader " + $selectedObj ) ( "previewButton" + $shortShaderName + $selectedObj );
        string $auCheck = `checkBox -label "Auto-Update" ( "auButton" + $selectedObj )`;
        button -label "Close" -command ( "deleteUI ParamWindow" + $shortShaderName + $selectedObj ) ( "paramButton" + $shortShaderName + $selectedObj ); 
        formLayout -edit 
                -attachForm ( "previewButton" + $shortShaderName + $selectedObj ) "top" 0
                -attachForm ( "previewButton" + $shortShaderName + $selectedObj ) "left" 0

                -attachForm $auCheck "top" 0
                -attachControl $auCheck "left" 0 ( "previewButton" + $shortShaderName + $selectedObj )

                -attachForm ( "paramButton" + $shortShaderName + $selectedObj ) "bottom" 0
                -attachForm ( "paramButton" + $shortShaderName + $selectedObj ) "left" 0
                -attachForm ( "paramButton" + $shortShaderName + $selectedObj ) "right" 0

                -attachControl ( "paramScroll" + $shortShaderName + $selectedObj ) "top" 0 ( "previewButton" + $shortShaderName + $selectedObj )
                -attachForm ( "paramScroll" + $shortShaderName + $selectedObj ) "left" 0
                -attachForm ( "paramScroll" + $shortShaderName + $selectedObj ) "right" 0
                -attachControl ( "paramScroll" + $shortShaderName + $selectedObj ) "bottom" 0 ( "paramButton" + $shortShaderName + $selectedObj )
                ( "paramForm" + $shortShaderName + $selectedObj );

        showWindow ( "ParamWindow" + $shortShaderName + $selectedObj );
    }
}
