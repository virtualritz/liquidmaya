//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the
// "License"); you may not use this file except in compliance with the License. You may
// obtain a copy of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific
// language governing rights and limitations under the License.
//
// The Original Code is the Liquid Rendering Toolkit.
//
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved.
//
// Contributor(s): Berj Bannayan.
//
//
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//

// liquid's file browser interface

global string $liquidCFD; // Liquid Current File Directory
global string $liquidFileMatch; // Current search criteria in fluid


global proc string[] liquidGetFileList( string $dir, string $fileMatch )
{
  string $returnValue[];

  string $dirList[] = `getFileList -fld ( $dir + "/" ) -fs $fileMatch`;
  return $dirList;
}



/***********  PREVIEWS  ***************/

proc lfbw_displayInfo( string $filePath )
{
  string $shaderExt  = `getAttr liquidGlobals.shaderExt`;

  // info for shaders
  if ( gmatch( $filePath, ("*."+$shaderExt) ) ) {
    if ( `filetest -r $filePath` ) {
      liquidSlSetShader( $filePath );
      text -e -l (liquidSlShaderType()) lfb_infoType;
    }
  } else text -e -l "-" lfb_infoType;
}

proc lfbw_displayPreview( string $filePath )
{
  string $previewPath = ( dirname($filePath) + "/." + basenameEx($filePath) + ".tif" );
  if ( `filetest -r $previewPath` ) image -e -i $previewPath lfb_preview;
  else image -e -i (liquidGetHome()+"/icons/noPreview.iff") lfb_preview;
}

proc lfbw_makeShaderPreview()
{
  string $shaderExt  = `getAttr liquidGlobals.shaderExt`;
  string $renderer   = `getAttr liquidGlobals.renderCommand`;
  string $shaderLong = `finder -q -filePath lfb_finder`;

  // not a shader ? exit !
  if ( !gmatch( $shaderLong, ("*."+$shaderExt) ) ) {
    warning ("[liquid] this is not a shader !");
    return;
  }

  // check shaderType
  liquidSlSetShader( $shaderLong );
  string $shaderType = liquidSlShaderType();
  if ( $shaderType == "light" || $shaderType == "volume" ) {
    warning ("[liquid] preview does not support "+$shaderType+" shader !");
    return;
  }
  
  string  $primitive = `getAttr liquidGlobals.previewPrimitive`;
  string  $primArg = "-sphere";

  if( $primitive == 1 ) {
    $primArg = " -cube";
  } else if( $primitive == 2 ) {
    $primArg = " -cylinder";
  } else if( $primitive == 3 ) {
    $primArg = " -torus";
  } else if( $primitive == 4 ) {
    $primArg = " -plane";
  } else if( $primitive == 5 ) {
    $primArg = " -teapot";
  }

  string $displayName = ( dirname($shaderLong) + "/." + basenameEx($shaderLong) + ".tif" );
  string $args = ( "liquidPreviewShader -shader \"" + $shaderLong + "\" " + $primArg + " -dd tiff -dn \"" + $displayName + "\" -ds 128 -renderer \"" + $renderer + "\" -type " + $shaderType + ";");
  eval $args;
  lfbw_displayPreview( $shaderLong );
}

global proc liquidFileBrowserWindow_makePreview()
{
  string $mask = `textFieldGrp -q -text lfb_fileMask`;
  string $shaderExt = `getAttr liquidGlobals.shaderExt`;

  /*** shader preview ***/
  if ( gmatch( $mask, ("*."+$shaderExt) )  ) lfbw_makeShaderPreview();
  else {
    warning ("[liquid] previewing "+$mask+" files is not supported !");
    return;
  }

}


/***********  BOOKMARKS  ***************/

global proc liquidFileBrowserBuildBookmarkMenu( string $parentMenu, string $finder, string $refreshCallback )
{
  if ( ! `menu -q -ex $parentMenu` ) error ("liquidFileBrowserBuildBookmarkMenu: the bookmark menu "+$parentMenu+" does not exist.");

  // delete menu items
  string $items[] = `menu -q -itemArray $parentMenu`;
  if ( size( $items ) ) deleteUI $items;

  // rebuild the top part
  menuItem -parent $parentMenu -l "Add Bookmark..." -c ("liquidFileBrowserAddBookmark \""+$finder+"\"");
  menuItem -parent $parentMenu -l "Clear Menu" -c "liquidFileBrowserClearBookmarks";
  menuItem -parent $parentMenu -divider true ;

  // error checking
  if ( ! `optionVar -exists liquidFileBrowserBookmarks` ) return;

  // rebuild menu
  string $bkm[] = `optionVar -q liquidFileBrowserBookmarks`;

  for ( $b in $bkm ) {
    string $data[] = stringToStringArray( $b, "|");
    string $cmd = ("finder -e -fp \""+$data[1]+"\" "+$finder+";"+$refreshCallback+";");
    menuItem -parent $parentMenu -l $data[0] -ann $data[1] -c $cmd;
  }
}

global proc liquidFileBrowserAddBookmark( string $finder )
{
  $liquidCFD = `finder -q -fp $finder`;

  if ( $liquidCFD == "" ) warning ("nothing to Bookmark !");


  string $bookmarkName;
  string $result = `promptDialog  -title "Name your Bookmark"
                                  -message "Enter Name:"
                                  -button "OK" -button "Cancel"
                                  -defaultButton "OK" -cancelButton "Cancel"
                                  -dismissString "Cancel"`;

  if ($result == "OK") {
    $bookmarkName = strip( promptDialog( "-query", "-text" ) );
    $bookmarkName = substituteAllString( $bookmarkName, "|", "_");
    $bookmarkName = ($bookmarkName+"|"+$liquidCFD);
    optionVar -stringValueAppend "liquidFileBrowserBookmarks" $bookmarkName;
  }

}

global proc liquidFileBrowserClearBookmarks()
{
  string $result = `confirmDialog -title "Delete All Bookmarks ?" -message "Are you sure?"
                                  -button "Yes" -button "Cancel" -defaultButton "Cancel"
                                  -cancelButton "Cancel" -dismissString "Cancel"`;

  if ( $result == "Cancel" ) return;

  optionVar -remove liquidFileBrowserBookmarks;

}




/**
  fill the file list
*/
global proc liquidFileBrowserWindow_updateList( string $filemask )
{
  global string $gLiquidFileBrowserWindowDirectory;

  if ( !`window -q -ex liquidFileBrowserWindow` ) return;

  // retrieve the current path
  string $finder = `finder -q -fp lfb_finder`;
  // resolve environment variables, etc.
  $finder = `file -q -exn $finder`;
  if ( $finder != "/" ) $finder = substitute("/$", $finder, "");

  // clear the list
  textScrollList -e -removeAll lfb_fileListC;

  // get the file list
  string $thePath = (`filetest -f $finder`)? substitute( "/[A-Za-z0-9_\\.-]*$", $finder, "" ) : $finder;
  string $list[] = liquidGetFileList( $thePath, "*" );

  // fill the list
  for ( $l in $list ) {
  	print ("> " + $l + "\n");
    if ( $l != "." && $l != ".." && gmatch( $l, ".*") ) continue;
    string $fl = ($thePath+"/"+$l);
    if ( `filetest -f $fl` && gmatch( $l, $filemask ) ) textScrollList -e -append $l lfb_fileListC;
    else if ( `filetest -d $fl` ) textScrollList -e -append ( $l + "/" ) lfb_fileListC;
  }

  // update globals and finder
  $gLiquidFileBrowserWindowDirectory = $thePath;
  finder -e -fp $thePath lfb_finder;
}


/*
  update the finder when something is selected in the list
*/
global proc liquidFileBrowserWindow_updateFinder( int $doLoad, string $filemask, string $callback )
{
  global string $gLiquidFileBrowserWindowDirectory;

  string $fileInList[] = `textScrollList -q -si lfb_fileListC`;
  $fileInList[0] = substitute("/$", $fileInList[0], "");
  string $finder = `finder -q -fp lfb_finder`;
  string $newPath = $finder;

  //trace $gLiquidFileBrowserWindowDirectory;

  if ( `filetest -f $newPath` ) {

    /*** file selection ***/
    //trace "file:";
    $newPath = $gLiquidFileBrowserWindowDirectory + "/" + $fileInList[0] ;
    finder -e -fp $newPath lfb_finder;
    if ( $doLoad ) liquidFileBrowserWindow_load( $filemask, $callback );

  } else if ( `filetest -d $newPath` ) {

    /*** directory selection ***/
    //trace ( "dir: " + $gLiquidFileBrowserWindowDirectory );
    $newPath = substitute("[^/]*$", $newPath, "");
    $newPath = ( $gLiquidFileBrowserWindowDirectory + "/" + substitute("/$", $fileInList[0], "" ) );
    finder -e -fp $newPath lfb_finder;

  } //else trace ( "all failed ! > " + $newPath );

  string $path = dirname( $newPath );

  // if the directory is not writable, do not allow preview creation
  if ( `filetest -w $path` ) control -e -en 1 lfb_makePreview;
  else control -e -en 0 lfb_makePreview;

  lfbw_displayPreview( $newPath );
  lfbw_displayInfo( $newPath );

  //$gLiquidFileBrowserWindowDirectory = $newPath;
}


/**
  this proc will destroy the window and launch the callback
*/
global proc liquidFileBrowserWindow_load( string $filemask, string $callback )
{
  // get the full file path
  string $finder = `finder -q -fp lfb_finder`;

  // if it is a directory just update the list
  if ( `filetest -d $finder` ) {
    liquidFileBrowserWindow_updateList($filemask);
    return;
  }

  // if the file is readable, delete the window and launch the callback.
  if ( `filetest -r $finder` ) {
    deleteUI liquidFileBrowserWindow;
    if ( $callback !=  "" ) eval ( $callback + " \"" + $finder + "\" \"" + $finder + "\"" );
  } else error( "This file is not readable." );
}


/*
  liquid file browser to load stuff
  the callback should be : callback string selectedfile string filetype
*/
global proc liquidFileBrowserWindow( string $path, string $filemask, string $callback )
{
	if (`about -nt` || `about -mac`) {
		string $workspace = `workspace -q -fn`;
		// note globals do NOT get set

		//	On Windows, fileBrowserDialog will return
		//	false if a system dialog cannot be created
		//	due to lack of sufficient resources.  In 
		//	that case, we will go through the standard
		//	MEL-based code.
		//
		int $dialogSuccess = `fileBrowserDialog 
									-fc $callback 
									-m 0 
									-fl $filemask
									-an "Choose File"
									`;

		if( $dialogSuccess )
		{
			// previous call blocks
			return;
		}
	}
	
  if ( `window -q -ex liquidFileBrowserWindow` ) deleteUI liquidFileBrowserWindow;
  window -title "Liquid Browser" -menuBar true -width 400 -height 300 liquidFileBrowserWindow;

  global string $gLiquidFileBrowserWindowDirectory;
  global string $gLiquidFileBrowserWindowFileMask;
  $gLiquidFileBrowserWindowDirectory = substitute("/$", $path, "");
  $gLiquidFileBrowserWindowFileMask = $filemask;

  // add the bookmarks menu
  menu -p liquidFileBrowserWindow -l "Bookmarks" -pmc ("liquidFileBrowserBuildBookmarkMenu \"liquidFileBrowserWindowBookmarkMenu\" \"lfb_finder\" \"liquidFileBrowserWindow_updateList \\\""+$filemask+"\\\"\"") liquidFileBrowserWindowBookmarkMenu;

  // create the widgets
  formLayout -nd 100 lfb_mainLayout;
    textFieldGrp -label "file type" -text  $filemask -cw2 120 60
                 -cc ("$gLiquidFileBrowserWindowFileMask = `textFieldGrp -q -tx lfb_fileMask`;liquidFileBrowserWindow_updateList $gLiquidFileBrowserWindowFileMask") lfb_fileMask;
    textScrollList -numberOfRows 8 -allowMultiSelection false
                   -sc ("liquidFileBrowserWindow_updateFinder(0, $gLiquidFileBrowserWindowFileMask, \""+$callback+"\");")
                   -dcc ("liquidFileBrowserWindow_updateFinder(1, $gLiquidFileBrowserWindowFileMask, \""+$callback+"\");liquidFileBrowserWindow_updateList($gLiquidFileBrowserWindowFileMask);")
                   lfb_fileListC;
    formLayout -nd 100 lfb_previewLayout;
      image -w 128 -h 128 -i (liquidGetHome()+"/icons/noPreview.iff") lfb_preview;
      button -l "Create Preview" -c "liquidFileBrowserWindow_makePreview();" lfb_makePreview;
      text -l "Type:" -align "left" -font "tinyBoldLabelFont" lfb_infoTypeLabel;
      text -l "" -align "left" -font "smallPlainLabelFont" lfb_infoType;
      formLayout  -e
                  -af lfb_preview       top   0
                  -af lfb_preview       left  4
                  -af lfb_preview       right 4
                  -af lfb_makePreview   left  0
                  -ac lfb_makePreview   top   0   lfb_preview
                  -af lfb_makePreview   right 0
                  -af lfb_infoTypeLabel left  0
                  -ac lfb_infoTypeLabel top   5   lfb_makePreview
                  -ac lfb_infoType      left  0   lfb_infoTypeLabel
                  -ac lfb_infoType      top   5   lfb_makePreview
                  -af lfb_infoType      right 4
                  lfb_previewLayout;
    setParent ..;
    finder -c ("liquidFileBrowserWindow_updateList($gLiquidFileBrowserWindowFileMask);") lfb_finder;
    button -label "Load" -c ("liquidFileBrowserWindow_load $gLiquidFileBrowserWindowFileMask \""+$callback+"\";") lfb_ok;
    button -label "Cancel" -c "deleteUI liquidFileBrowserWindow" lfb_cancel;
    setParent ..;
	
  // setup the layout
  formLayout  -e
              -af  lfb_fileMask       top     5
              -af  lfb_fileMask       right   5

              -ac  lfb_previewLayout  top     5   lfb_fileMask
              -af  lfb_previewLayout  right   5

              -ac  lfb_fileListC      top     5   lfb_fileMask
              -af  lfb_fileListC      left    5
              -ac  lfb_fileListC      right   5   lfb_previewLayout
              -af  lfb_fileListC      bottom  75

              -ac  lfb_finder         top     5   lfb_fileListC
              -af  lfb_finder         bottom  35
              -af  lfb_finder         left    5
              -af  lfb_finder         right   5

              -af  lfb_ok  left    5
              -ap  lfb_ok  right   5  50
              -af  lfb_ok  bottom  5

              -af  lfb_cancel  right    5
              -ap  lfb_cancel  left    5  50
              -af  lfb_cancel  bottom  5

              lfb_mainLayout;

  // refresh the list
  finder -e -fp $gLiquidFileBrowserWindowDirectory lfb_finder;
  liquidFileBrowserWindow_updateList($gLiquidFileBrowserWindowFileMask);

  showWindow liquidFileBrowserWindow;
}


//liquidInitCFD;
