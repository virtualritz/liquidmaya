//
//
// The contents of this file are subject to the Mozilla Public License Version 1.1 (the 
// "License"); you may not use this file except in compliance with the License. You may 
// obtain a copy of the License at http://www.mozilla.org/MPL/ 
// 
// Software distributed under the License is distributed on an "AS IS" basis, WITHOUT 
// WARRANTY OF ANY KIND, either express or implied. See the License for the specific 
// language governing rights and limitations under the License. 
//
// The Original Code is the Liquid Rendering Toolkit. 
// 
// The Initial Developer of the Original Code is Colin Doncaster. Portions created by 
// Colin Doncaster are Copyright (C) 2002. All Rights Reserved. 
// 
// Contributor(s): Berj Bannayan. 
//
// 
// The RenderMan (R) Interface Procedures and Protocol are:
// Copyright 1988, 1989, Pixar
// All Rights Reserved
//
//
// RenderMan (R) is a registered trademark of Pixar
//

//  Procedure Name:
//  liquidAttachParams
//
//  Description:
//  adds the appropriate attributes to the shading node for rman shader control
//

global proc string liquidReadString( int $fileID )
{
  string $returnValue = "";
  int $inString = 0;
  int $continue = 1;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "\"\"" ) {
    } else if ( gmatch( $token, "\"*\";" ) ) {
      $inString = 0;
      $returnValue = substring( $token, 2, size( $token ) - 2 );
      $continue = 0;
    } else if ( $token == "\"" ) {
      $inString = 1;
    } else if ( gmatch( $token, "\"*" ) ) {
      $inString = 1;
      $returnValue += substring( $token, 2, size( $token ) );
    } else if ( gmatch( $token, "*\";" ) && $inString ) {
      $inString = 0;
      $returnValue += ( " " + substring( $token, 1, size( $token ) - 2 ) );
      $continue = 0;
    } else {
      $returnValue += ( " " + $token );
    }
  }
  return $returnValue;
}

global proc string[] liquidReadArray( int $fileID )
{
  string $returnValue[];
  int $inString = 0;
  int $continue = 1;
  int $arrayOn = 0;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "[]" ) {
    } else if ( gmatch( $token, "[*];" ) ) {
      $inString = 0;
      $returnValue[$arrayOn] = substring( $token, 2, size( $token ) - 2 );
      $continue = 0;
    } else if ( $token == "[" ) {
      $inString = 1;
    } else if ( gmatch( $token, "[*" ) ) {
      $inString = 1;
      string $arrayVal = substring( $token, 2, size( $token ) );
      if ( gmatch( $arrayVal, "\"*\"" ) ) {
        $returnValue[$arrayOn] = substring( $arrayVal, 2, size( $arrayVal ) - 1 );
      } else {
        $returnValue[$arrayOn] = $arrayVal;
      }
      $arrayOn++;
    } else if ( gmatch( $token, "*];" ) && $inString ) {
      $inString = 0;
      if ( size( $token ) > 2 ) {
        string $arrayVal = substring( $token, 1, size( $token ) - 2 );
        if ( gmatch( $arrayVal, "\"*\"" ) ) {
          $returnValue[$arrayOn] = substring( $arrayVal, 2, size( $arrayVal ) - 1 );
        } else {
          $returnValue[$arrayOn] = $arrayVal;
        }
        $arrayOn++;
      }
      $continue = 0;
    } else {
      if ( gmatch( $token, "\"*\"" ) ) {
        $returnValue[$arrayOn] = substring( $token, 2, size( $token ) - 1 );
      } else {
        $returnValue[$arrayOn] = $token;
      }
      $arrayOn++;
    }
  }
  return $returnValue;
}

global proc liquidGetDispBoundLIF( int $fileID, string $nodeName ) 
{
  int $continue = 1;
  frewind $fileID;
  while ( !`feof $fileID` && $continue ) {
    $token = `fgetword $fileID`;
    if ( $token == "displacementBound" ) {
      string $returnValue[] = `liquidReadArray( $fileID )`;;
      string $nodeType = `liquidGetShaderNodeType $nodeName`;
      float $dispBound = $returnValue[0];
      if ( $nodeType == "Disp" || $nodeType == "Surface" ) {
        if (`attributeQuery -n $nodeName -ex ( "displacementBound" ) `) {
          setAttr ( $nodeName + ".displacementBound" ) $dispBound;
        }
      }
      $continue = 0;
    }
  }
}

global proc liquidHandleLIFA( string $nodeName ) 
{
  string $shaderName = `getAttr ( $nodeName + ".rmanShaderLong" )`;
  if ( `filetest -r ( $shaderName + ".lif" )` ) {
    $fileID = `fopen ( $shaderName + ".lif" ) "r"`;
    liquidGetDispBoundLIF $fileID $nodeName;
    $returnValue = 1;
  } else {
    $returnValue = 0;
  }
}

global proc liquidAttachParams ( string $currentNodeName )
{     
  int $i;
  string $shaderFileName = `getAttr ( $currentNodeName + ".rmanShaderLong" )`;

  string $nodeType = `liquidGetShaderNodeType $currentNodeName`;
  if ( $nodeType == "Surface" ) { 
    if (!`attributeQuery -n $currentNodeName -ex ( "color" ) `) {
      addAttr -longName "color" -at double3 $currentNodeName;
      addAttr -defaultValue 0.5 -longName "red" -at double -parent "color" $currentNodeName;
      addAttr -defaultValue 0.5 -longName "green" -at double -parent "color" $currentNodeName;
      addAttr -defaultValue 0.5 -longName "blue" -at double -parent "color" $currentNodeName;
      setAttr ( $currentNodeName + ".color" ) -type double3 1.0 1.0 1.0 ;
    } else {
      setAttr ( $currentNodeName + ".color" ) -type double3 1.0 1.0 1.0 ;
    }
    if (!`attributeQuery -n $currentNodeName -ex ( "opacity" ) `) {
      addAttr -longName "opacity" -at "float" -defaultValue 1.0 $currentNodeName;
    } else {
      setAttr ( $currentNodeName + ".opacity" ) 1.0;
    }
  }

  if ( $nodeType == "Light" ) {
    if (!`attributeQuery -n $currentNodeName -ex ( "shadowCamera" ) `) {
      addAttr -longName "shadowCamera" -dt "string" $currentNodeName;
    }
  }

  if ( $nodeType == "Disp" || $nodeType == "Surface" ) {
    if (!`attributeQuery -n $currentNodeName -ex ( "displacementBound" ) `) {
      addAttr -ln displacementBound -at "float" -dv 0.0 $currentNodeName;
    }
  }

  liquidHandleLIFA $currentNodeName;

  int $numOfArgs = `liquidGetSloInfo -numParam $shaderFileName`;
  for ( $i = 0; $i < $numOfArgs ; $i++ )
  {
    string $argName = `liquidGetSloInfo -argName $i $shaderFileName`;
    string $argType = `liquidGetSloInfo -argType $i $shaderFileName`;
    string $argDetail = `liquidGetSloInfo -argDetail $i $shaderFileName`;
    string $argDefault[] = `liquidGetSloInfo -argDefault $i $shaderFileName`;
    int    $argArrayLen = `liquidGetSloInfo -argArraySize $i $shaderFileName`;
    if ( !`attributeQuery -n $currentNodeName -ex $argName` )
    {
      if ( $argType == "float" ) {
        int $size = size($argDefault);
        if ( $argArrayLen > 0 )
        {
          addAttr -longName $argName -dt "doubleArray" $currentNodeName;
          string $fDefault = "";
          int $k;
          for ( $k = 0; $k < $size; $k++ ) {
            $fDefault = $fDefault + $argDefault[$k] + " ";
          }
          string $nodeName = $currentNodeName + "." + $argName;
          eval setAttr $nodeName -type doubleArray $size $fDefault;
        } else { 
          float $defaultVal = $argDefault[0];
          addAttr -longName $argName -at double -dv $defaultVal $currentNodeName;
        }
      }
      if ( $argType == "string" ) {
        string $defaultVal = $argDefault[0];
        addAttr -longName $argName -dt "string" $currentNodeName;
        setAttr ( $currentNodeName + "." + $argName ) -type "string" $defaultVal;
      }
      if ( $argType == "color" || $argType == "point" || $argType == "vector" || $argType == "normal" ) {
        float $defaultValA = $argDefault[0];
        float $defaultValB = $argDefault[1];
        float $defaultValC = $argDefault[2];
        addAttr -longName $argName -at double3 $currentNodeName;
        addAttr -longName ( $argName + "a" ) -at double -parent $argName $currentNodeName;
        addAttr -longName ( $argName + "b" ) -at double -parent $argName $currentNodeName;
        addAttr -longName ( $argName + "c" ) -at double -parent $argName $currentNodeName;
        setAttr ( $currentNodeName + "." + $argName ) -type double3 $defaultValA $defaultValB $defaultValC;
      }
    }
  }
}
