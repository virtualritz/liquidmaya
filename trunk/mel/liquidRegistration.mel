

global proc liquidRegistration()
{
  eval "source createMayaSoftwareCommonGlobalsTab.mel";

  if ( !`renderer -q -ex liquid` ) {
    //registerUpdateRendererUIProc( "liquidFixMayaRenderCommand" );

    renderer  -rendererUIName                       "Liquid"
              -renderProcedure                      "liquidmayaRender"
              -commandRenderProcedure               "liquidmayaCmdlineRender"
              -batchRenderProcedure                 "liquidmayaBatchRender"
              -renderRegionProcedure                "liquidmayaRenderRegion"
              //-textureBakingProcedure             "mrBakeToTexture"
              //-polyPrelightProcedure              "mrBakeToVertices"
              //-renderingEditorsSubMenuProcedure   "mentalRayRenderingEditorsSubMenu"
              -hasCommonGlobalValueProcedure        "liquidmayaHasCommonGlobalValue"
              -getCommonGlobalValueProcedure        "liquidmayaGetCommonGlobalValue"
              -setCommonGlobalValueProcedure        "liquidmayaSetCommonGlobalValue"

              liquid;


      evalDeferred liquidAddTabs;

      renderer -edit -addGlobalsNode "liquidGlobals" liquid;
  }
}

global proc liquidAddTabs()
{

  renderer  -edit
            -addGlobalsTab        "Common"
                                  "createMayaSoftwareCommonGlobalsTab"
                                  "updateMayaSoftwareCommonGlobalsTab"
            liquid;
  renderer  -edit
            -addGlobalsTab        "Liquid"
                                  "liquidCreateMainGlobalsTab"
                                  "liquidUpdateMayaGlobals"
            liquid;

}

global proc int liquidTabInUnifiedRenderGlobals()
{
  string $parentForm = `setParent -query`;
  return (gmatch( $parentForm, "unifiedRenderGlobalsWindow*"));
}

global proc liquidCreateMayaGlobalsTab( string $name )
{
  if ( !liquidGlobalsExists() ) liquidCreateGlobals();

  //setUITemplate -pushTemplate attributeEditorTemplate;

  setParent liquidUnifiedRenderGlobalsMainTabLayout;
  eval ("liquidGlobals"+$name+"Tab");
  string $newlayout = ("liquidGlobals"+$name+"Set");
  if ( `layout -q -ex $newlayout` ) tabLayout -e -tabLabel $newlayout $name liquidUnifiedRenderGlobalsMainTabLayout;

  //setUITemplate -popTemplate;
}

global proc liquidCreateMayaGlobalsFrame( string $name )
{
  if ( !liquidGlobalsExists() ) liquidCreateGlobals();

  setParent liquidUnifiedRenderGlobalsMainColumnLayout;
  frameLayout -label $name -pec ("liquidExpandGlobalsLayout liquidRenderGlobals"+$name+"Frame;") ("liquidRenderGlobals"+$name+"Frame");
    eval ("liquidGlobals"+$name+"Tab");
  setParent ..;
}


global proc liquidCreateMainGlobalsTab()
{
  if ( !liquidGlobalsExists() ) liquidCreateGlobals();

  if ( `layout -q -ex liquidTabLayout` ) layout -e -m true liquidTabLayout;

  setUITemplate -pushTemplate renderGlobalsTemplate;
  setUITemplate -pushTemplate attributeEditorTemplate;

  // create the main tab layout
  columnLayout -adjustableColumn true liquidTabColumn;
  string $cmd = ("tabLayout -e -w (`window -q -w unifiedRenderGlobalsWindow`) -h (`window -q -h unifiedRenderGlobalsWindow`-130) liquidUnifiedRenderGlobalsMainTabLayout;");

  tabLayout -scrollable true -minChildWidth 200
            -cc $cmd
            -sc $cmd
            liquidUnifiedRenderGlobalsMainTabLayout;

  if ( `layout -q -ex liquidTabLayout` ) layout -e -m true liquidTabLayout;

  liquidCreateMayaGlobalsTab( "Frame" );
  liquidCreateMayaGlobalsTab( "File" );
  liquidCreateMayaGlobalsTab( "Image" );
  liquidCreateMayaGlobalsTab( "Displays" );
  liquidCreateMayaGlobalsTab( "Rays" );
  liquidCreateMayaGlobalsTab( "Options" );
  liquidCreateMayaGlobalsTab( "Job" );
  liquidCreateMayaGlobalsTab( "Renderer" );
  liquidCreateMayaGlobalsTab( "Fluid" );


  if ( `layout -q -ex liquidTabLayout` ) tabLayout -e -cc $cmd -sc $cmd liquidTabLayout;

  if ( `layout -q -ex liquidTabLayout` ) layout -e -m false liquidTabLayout;

  setUITemplate -popTemplate;
  setUITemplate -popTemplate;
}


global proc liquidUpdateMayaGlobals()
{
  //print ("+++  liquidUpdateMayaGlobals  +++\n");

  if ( `layout -q -ex liquidCommonTab` ) layout -e -m false -vis false liquidCommonTab;

  float $resx = `getAttr liquidGlobals.xResolution`;
  float $resy = `getAttr liquidGlobals.yResolution`;
  setAttr defaultResolution.width $resx;
  setAttr defaultResolution.height $resy;
  setAttr defaultResolution.deviceAspectRatio ($resx/$resy);
}

global proc int liquidNoCommonStuff( string $param )
{
  print ("liquidNoCommonStuff "+$param+"\n");
  return false;
}

global proc int liquidmayaHasCommonGlobalValue( string $global )
{

	int 	$isSupported = true;

  switch ($global)
  {
    case "width":
    case "height":
    case "pixelAspectRatio":
    case "preRenderMel":
    case "postRenderMel":
      $isSupported = true;
      break;
    default:
      $isSupported = false;
      break;
  }

  return $isSupported;
}

global proc string liquidmayaGetCommonGlobalValue( string $global)
{
  //
  // Description:
  //	This procedure is called when the current renderer has changed from the
  //	Maya Software renderer to something else.
  //	This procedure returns the value of the common global specified by
  //	$global.
  //	For a complete list of valid values for the $global argument, and to
  //	see how this procedure is used, see copyCommonRenderGlobals.mel.
  //
  // Returns:
  //	The value of the specified common global, as a string.
  //

  string 	$value;

  switch ($global)
  {
    case "width":
      $value = `getAttr liquidGlobals.xResolution`;
      break;
    case "height":
      $value = `getAttr liquidGlobals.yResolution`;
      break;
    case "pixelAspectRatio":
      $value = `getAttr liquidGlobals.pixelAspectRatio`;
      break;
    case "preRenderMel":
      $value = "";
      break;
    case "postRenderMel":
      $value = "";
      break;
    default:
      warning(
        "liquidGetCommonGlobalValue() was asked for the value "
        + "of a global ("
        + $global
        + ") it does not support. "
        + "Modify liquidGetCommonGlobalValue() to fix the problem\n");
      break;
  }

  return $value;
}

global proc liquidmayaSetCommonGlobalValue( string $global, string $value )
{
  print ("liquidSetCommonGlobalValue "+$global+"\n");

  int $intValue;
	float $floatValue;

	switch ($global) {
		case "width":
			$intValue = $value;
			setAttr liquidGlobals.xResolution $intValue;
			break;
		case "height":
			$intValue = $value;
			setAttr liquidGlobals.yResolution $intValue;
			break;
		case "pixelAspectRatio":
            //
		    // We do not store pixel aspect ratio.  Only device aspect
            // ratio is stored.
            //
			break;
		case "preRenderMel":
			if(!`about -evalVersion`)
				setAttr -type "string" defaultRenderGlobals.preRenderMel $value;
			break;
		case "postRenderMel":
			if(!`about -evalVersion`)
				setAttr -type "string" defaultRenderGlobals.postRenderMel $value;
			break;
	}
}

global proc liquidUnregister()
{
  if ( `renderer -q -ex liquid` ) renderer -unregisterRenderer liquid;
}


global proc string liqGetRVPanel()
{
  string $thePanel;
  string $renderPanels[] = `getPanel -scriptType "renderWindowPanel"`;
  if ( !size( $renderPanels ) ) {
    $thePanel = `scriptedPanel -type "renderWindowPanel" -unParent`;
    scriptedPanel -e -label `interToUI $thePanel` $thePanel;
  } else $thePanel = $renderPanels[0];
  return $thePanel;
}

proc liqShowRV()
{
  string $editor = `liqGetRVPanel`;

  {
    // window already exists ? open it.
    string $wins[] = `lsUI -windows`;
    for ( $w in $wins ) {
      if ($w == "renderViewWindow") {
        showWindow $w;
        return;
      }
    }
  }

  {
    // maybe it is in a docked panel ?
    string $panels[] = `getPanel -vis`;
    for ( $p in $panels ) {
      if ($p == $editor) return;
    }
  }

  // let's tear it off, then !
  scriptedPanel -edit -tearOff $editor;

}

global proc liqRVExposure( float $val )
{
  global int $gLiqLastRenderIsRenderRegion;
  if ( $gLiqLastRenderIsRenderRegion ) {
    warning "Liquid cannot change the exposure of render regions. make a full render first.";
    return;
  }
  global string $gLiqLastExposed;
  global float $gLiqLastExposure;
  string $cam = `getAttr liquidGlobals.renderCamera`;

  string $lastRenders[] = `liquidRenderView -lr`;
  string $last = $lastRenders[ size( $lastRenders ) - 1 ];
  if ( $gLiqLastExposed != $last || $val == 0 ) $gLiqLastExposure = 0;

  float $newExp = $gLiqLastExposure + $val;
  float $exposure = exp( $newExp ) * 255;
  //print ("$exposure = "+$exposure+"\n");

  if ( $exposure > 1 ) {
    if ( `filetest -r $last` ) liquidRenderView -camera $cam -renderFromFile 1 -bucketFile $last -quantize 0 $exposure 0 255 -timeout 10;
    $gLiqLastExposed = $last;
    $gLiqLastExposure = $newExp;
  }

}

global proc liquidRVOptions()
{
  // coming soon
}

global proc liqRenderViewMenu( string $editor)
{
  if ( `menu -q -ex ($editor + "LiquidRVMenu")` ) deleteUI ($editor + "LiquidRVMenu");

  nameCommand -default true -ann "exposure +0.25 f-stop" -c "liqRVExposure 0.25"  liqExposureUpCmd;
  nameCommand -default true -ann "exposure -0.25 f-stop" -c "liqRVExposure -0.25" liqExposureDownCmd;
  nameCommand -default true -ann "exposure reset"        -c "liqRVExposure 0"     liqExposureResetCmd;

  menu  -label              "Liquid"
        -tearOff            true
        -allowOptionBoxes   true
        ($editor + "LiquidRVMenu");

  menuItem  -label    "+ 0.5 f-stop"
            -command  "liqRVExposure 0.25"
            ($editor + "RVexposureUp");
  menuItem  -label    "- 0.5 f-stop"
            -command  "liqRVExposure -0.25"
            ($editor + "RVexposureDown");
  menuItem  -label    "original exposure"
            -command  "liqRVExposure 0"
            ($editor + "RVexposureReset");
  menuItem  -divider true;
  menuItem  -label    "Lazy Compute"
            -checkBox (`getAttr liquidGlobals.lazyCompute`)
            -postMenuCommand  ("if ( `getAttr liquidGlobals.lazyCompute` ) ) menuItem -e -cb true "+$editor+"RVLazyCompute;"+
                               "else menuItem -e -cb false "+$editor+"RVLazyCompute;")
            -command  ("if ( `menuItem -q -cb "+$editor+"RVLazyCompute` && objExists( \"liquidGlobals\" ) ) setAttr liquidGlobals.lazyCompute 1;"+
                       "else setAttr liquidGlobals.lazyCompute 0;")
            ($editor + "RVLazyCompute");
  //menuItem  -label    "RenderView Options..."
  //          -command  "liquidRVOptions"
  //          ($editor + "RVoptions");



  if ( `hotkeyCheck -keyString "+" -ctl` == "" ) hotkey -k "+" -ctl -name liqExposureUpCmd;
  if ( `hotkeyCheck -keyString "-" -ctl` == "" ) hotkey -k "-" -ctl -name liqExposureDownCmd;
  if ( `hotkeyCheck -keyString "0" -ctl` == "" ) hotkey -k "0" -ctl -name liqExposureResetCmd;

}

global proc string liquidmayaRender(int $resolution0, int $resolution1, int $doShadows, int $doGlowPass, string $camera, string $option)
{
  global int $gLiqLastRenderIsRenderRegion;
  if ( !`liquidGlobalsExists` ) {
    string $sel[] = `ls -sl`;
    eval("liquidCreateGlobals();");
    select $sel;
  }

  liqShowRV();

  string $editor = `liqGetRVPanel`;
  liqRenderViewMenu( $editor );
  renderWindowEditor -e -dbf $editor;
  string $renderCamera = `getAttr liquidGlobals.renderCamera`;
  renderWindowEditor -e -currentCamera $renderCamera $editor;
  liquidPreview();
  $gLiqLastRenderIsRenderRegion = 0;
  return "";
}

global proc liquidmayaRenderRegion( string $editor )
{
  global int $gLiqLastRenderIsRenderRegion;
  liquidCropPreview();
  $gLiqLastRenderIsRenderRegion = 1;
}

global proc liquidSaveRenderViewImage()
{
  string $editor = `liqGetRVPanel`;

  int $currentImage = `renderWindowEditor -q -displayImage $editor`;
  if ($currentImage < 0)
  {
    renderWindowEditor -edit -saveImage $editor;
    renderWindowRefreshMenu("file", $editor);
    renderWindowRefreshLayout($editor);
  }
}
